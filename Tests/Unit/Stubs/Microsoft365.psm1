#region AzureAD
function Add-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADGroupMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADGroupOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Add-AzureADMSPrivilegedResource
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId}
    )
}
function Add-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ServicePrincipalId}
    )
}
function Add-AzureADScopedRoleMembership
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${AdministrativeUnitObjectId},

        [Parameter()]
        [System.String]
        ${RoleObjectId},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.RoleMemberInfo]
        ${RoleMemberInfo}
    )
}
function Add-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Add-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Close-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Confirm-AzureADDomain
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.CrossCloudVerificationCodeBody]
    ${CrossCloudVerificationCode})

}
function Connect-AzureAD
{
    [CmdletBinding(DefaultParameterSetName='UserCredential', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [ValidateNotNullOrEmpty()]
    [Microsoft.Open.Azure.AD.CommonLibrary.AzureEnvironment+EnvironmentName]
    ${AzureEnvironmentName},

    [Parameter(ParameterSetName='UserCredential')]
    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [Parameter(ParameterSetName='AccessToken')]
    [Alias('Domain','TenantDomain')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TenantId},

    [Parameter(ParameterSetName='UserCredential')]
    [pscredential]
    ${Credential},

    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [string]
    ${CertificateThumbprint},

    [Parameter(ParameterSetName='ServicePrincipalCertificate', Mandatory=$true)]
    [string]
    ${ApplicationId},

    [Parameter(ParameterSetName='AccessToken', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AadAccessToken},

    [Parameter(ParameterSetName='AccessToken')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${MsAccessToken},

    [Parameter(ParameterSetName='AccessToken', Mandatory=$true)]
    [Parameter(ParameterSetName='UserCredential')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountId},

    [Microsoft.Open.Azure.AD.CommonLibrary.LogLevel]
    ${LogLevel},

    [string]
    ${LogFilePath})

}
function Disconnect-AzureAD
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param()

}
function Enable-AzureADDirectoryRole
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${RoleTemplateId}
    )
}
function Get-AzureADAdministrativeUnit
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationLogo
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-AzureADApplicationOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADApplicationProxyConnector
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorGroupMembers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationProxyConnectorMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADApplicationServiceEndpoint
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADApplicationSignInDetailedSummary
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADApplicationSignInSummary
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Days},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAuditDirectoryLogs
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADAuditSignInLogs
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADContact
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADContactDirectReport
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADContactManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADContactMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADContactThumbnailPhoto
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-AzureADContract
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADCurrentSessionInfo
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param()

}
function Get-AzureADDeletedApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDeviceConfiguration
{
    [CmdletBinding()]
param()

}
function Get-AzureADDeviceRegisteredOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDeviceRegisteredUser
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDirectoryRole
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADDirectoryRoleTemplate
{
    [CmdletBinding()]
param()

}
function Get-AzureADDirectorySetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADDirectorySettingTemplate
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADDomain
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainNameReference
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainServiceConfigurationRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADDomainVerificationDnsRecord
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Get-AzureADExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsSyncedFromOnPremises}
    )
}
function Get-AzureADExternalDomainFederation
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalDomainName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADGroupAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADGroupMember
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADGroupOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADMSApplication
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADMSApplicationOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADMSApplicationTemplate
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSAuthorizationPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSDeletedGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSGroup
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='GetById', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Select},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSIdentityProvider
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
    ${PasswordSSOObjectId})

}
function Get-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADMSPrivilegedResource
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ResourceId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleDefinition
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ResourceId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ProviderId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSRoleDefinition
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ServicePrincipalId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetById', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OutputFilePath})

}
function Get-AzureADOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADObjectByObjectId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ObjectIds},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Types}
    )
}
function Get-AzureADObjectSetting
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADPolicy
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADPolicyAppliedObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADPrivilegedRole
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADScopedRoleMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ScopedRoleMembershipId})

}
function Get-AzureADServiceAppRoleAssignedTo
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServiceAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipal
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADServicePrincipalCreatedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADServicePrincipalMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOwnedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalOwner
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Get-AzureADSubscribedSku
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADTenantDetail
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The ID of the tenant of instance of Azure Active Directory')]
    [string]
    ${TrustedIssuer},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The ID of the tenant of instance of Azure Active Directory')]
    [string]
    ${TrustedIssuerSki})

}
function Get-AzureADUser
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(ParameterSetName='GetVague', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter})

}
function Get-AzureADUserAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserCreatedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserDirectReport
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserLicenseDetail
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Get-AzureADUserMembership
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOAuth2PermissionGrant
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOwnedDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserOwnedObject
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserRegisteredDevice
{
    [CmdletBinding(DefaultParameterSetName='GetQuery')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${All},

    [Parameter(ParameterSetName='GetQuery', ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[int]]
    ${Top})

}
function Get-AzureADUserThumbnailPhoto
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FileName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${View})

}
function Get-CrossCloudVerificationCode
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function New-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName}
    )
}
function New-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowGuestsSignIn},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowPassthroughUsers},

        [Parameter()]
        [System.String]
        ${AppLogoUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AvailableToOtherTenants},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        ${InformationalUrls},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDisabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${KnownClientApplications},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowImplicitFlow},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowUrlPathMatching},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        ${Oauth2Permissions},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2RequirePostResponse},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${PublicClient},

        [Parameter()]
        [System.String]
        ${PublisherDomain},

        [Parameter()]
        [System.String]
        ${RecordConsentConditions},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.String]
        ${WwwHomepage}
    )
}
function New-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${DataType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TargetObjects}
    )
}
function New-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
    ${Type},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
    ${Usage},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalUrl},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
    ${ExternalAuthenticationType},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateHostHeaderEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateLinksInBodyEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
    ${ApplicationServerTimeout},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function New-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.Name]
    ${Name})

}
function New-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        ${AlternativeSecurityIds},

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ApproximateLastLogonTimeStamp},

        [Parameter()]
        [System.String]
        ${DeviceId},

        [Parameter()]
        [System.String]
        ${DeviceMetadata},

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${DeviceObjectVersion},

        [Parameter()]
        [System.String]
        ${DeviceOSType},

        [Parameter()]
        [System.String]
        ${DeviceOSVersion},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${DevicePhysicalIds},

        [Parameter()]
        [System.String]
        ${DeviceTrustType},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompliant},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsManaged},

        [Parameter()]
        [System.String]
        ${ProfileType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SystemLabels}
    )
}
function New-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function New-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDefault},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDefaultForCloudRedirections},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SupportedServices}
    )
}
function New-AzureADExternalDomainFederation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ExternalDomainName},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.DomainFederationSettings]
        ${FederationSettings}
    )
}
function New-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${MailEnabled},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SecurityEnabled}
    )
}
function New-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function New-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        ${Api},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsFallbackPublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        ${InformationalUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        ${PublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags},

        [Parameter()]
        [System.String]
        ${TokenEncryptionKeyId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        ${Web}
    )
}
function New-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${DataType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TargetObjects}
    )
}
function New-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.KeyCredential]
        ${KeyCredential},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        ${PasswordCredential},

        [Parameter()]
        [System.String]
        ${Proof}
    )
}
function New-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PasswordCredential]
        ${PasswordCredential}
    )
}
function New-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[Microsoft.Open.MSGraph.Model.MsFeatureRolloutPolicy+FeatureEnum]]
        ${Feature},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsEnabled},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsAppliedToOrganization},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.MsDirectoryObject]]
        ${AppliesTo}
    )
}
function New-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${LabelId}
    )
}
function New-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${GroupLifetimeInDays},

        [Parameter()]
        [System.String]
        ${ManagedGroupTypes},

        [Parameter()]
        [System.String]
        ${AlternateNotificationEmails}
    )
}
function New-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Type},

        [Parameter()]
        [System.String]
        ${Name},

        [Parameter()]
        [System.String]
        ${ClientId},

        [Parameter()]
        [System.String]
        ${ClientSecret}
    )
}
function New-AzureADMSInvitation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${InvitedUserDisplayName},

        [Parameter()]
        [System.String]
        ${InvitedUserEmailAddress},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SendInvitationMessage},

        [Parameter()]
        [System.String]
        ${InviteRedirectUrl},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.User]
        ${InvitedUser},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo]
        ${InvitedUserMessageInfo},

        [Parameter()]
        [System.String]
        ${InvitedUserType},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ResetRedemption}
    )
}
function New-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
    ${PasswordSSOCredential})

}
function New-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PermissionGrantConditionSet]]
        ${Excludes},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PermissionGrantConditionSet]]
        ${Includes},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function New-AzureADMSRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${RoleDefinitionId},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceScope}
    )
}
function New-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ResourceScopes},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RolePermission]]
        ${RolePermissions},

        [Parameter()]
        [System.String]
        ${TemplateId},

        [Parameter()]
        [System.String]
        ${Version}
    )
}
function New-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='Content')]
param(
    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InputFilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${OutputFilePath},

    [Parameter(ParameterSetName='Content', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Content})

}
function New-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function New-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${AlternativeIdentifier},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Definition},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsOrganizationDefault},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${Type}
    )
}
function New-AzureADPrivilegedRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ExpirationDateTime},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsElevated},

        [Parameter()]
        [System.String]
        ${ResultMessage},

        [Parameter()]
        [System.String]
        ${RoleId},

        [Parameter()]
        [System.String]
        ${UserId}
    )
}
function New-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function New-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${AlternativeNames},

        [Parameter()]
        [System.String]
        ${AppId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AppRoleAssignmentRequired},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.String]
        ${PublisherName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ServicePrincipalNames},

        [Parameter()]
        [System.String]
        ${ServicePrincipalType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags}
    )
}
function New-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyType]]
    ${Type},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.AzureAD.Graph.PowerShell.Custom.KeyUsage]]
    ${Usage},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CustomKeyIdentifier},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${StartDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[datetime]]
    ${EndDate},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Value})

}
function New-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Trusted certificate authority list')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function New-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        ${ExtensionProperty},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.String]
        ${AgeGroup},

        [Parameter()]
        [System.String]
        ${City},

        [Parameter()]
        [System.String]
        ${CompanyName},

        [Parameter()]
        [System.String]
        ${ConsentProvidedForMinor},

        [Parameter()]
        [System.String]
        ${Country},

        [Parameter()]
        [System.String]
        ${CreationType},

        [Parameter()]
        [System.String]
        ${Department},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${FacsimileTelephoneNumber},

        [Parameter()]
        [System.String]
        ${GivenName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompromised},

        [Parameter()]
        [System.String]
        ${ImmutableId},

        [Parameter()]
        [System.String]
        ${JobTitle},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.String]
        ${Mobile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OtherMails},

        [Parameter()]
        [System.String]
        ${PasswordPolicies},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        ${PasswordProfile},

        [Parameter()]
        [System.String]
        ${PhysicalDeliveryOfficeName},

        [Parameter()]
        [System.String]
        ${PostalCode},

        [Parameter()]
        [System.String]
        ${PreferredLanguage},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ShowInAddressList},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        ${SignInNames},

        [Parameter()]
        [System.String]
        ${State},

        [Parameter()]
        [System.String]
        ${StreetAddress},

        [Parameter()]
        [System.String]
        ${Surname},

        [Parameter()]
        [System.String]
        ${TelephoneNumber},

        [Parameter()]
        [System.String]
        ${UsageLocation},

        [Parameter()]
        [System.String]
        ${UserPrincipalName},

        [Parameter()]
        [System.String]
        ${UserState},

        [Parameter()]
        [System.String]
        ${UserStateChangedOn},

        [Parameter()]
        [System.String]
        ${UserType}
    )
}
function New-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${PrincipalId},

        [Parameter()]
        [System.String]
        ${ResourceId}
    )
}
function Open-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId}
    )
}
function Remove-AzureADAdministrativeUnit
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADAdministrativeUnitMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionPropertyId})

}
function Remove-AzureADApplicationKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADApplicationPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADApplicationPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyId})

}
function Remove-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${RemoveADApplication})

}
function Remove-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADContact
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADContactManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDeletedApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDevice
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADDeviceRegisteredOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADDeviceRegisteredUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId})

}
function Remove-AzureADDirectoryRoleMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADDomain
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name})

}
function Remove-AzureADExternalDomainFederation
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='GetById', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalDomainName})

}
function Remove-AzureADGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADGroupAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADGroupMember
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${MemberId})

}
function Remove-AzureADGroupOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADMSApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADMSApplicationExtensionProperty
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionPropertyId})

}
function Remove-AzureADMSApplicationKey
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${KeyId},

        [Parameter()]
        [System.String]
        ${Proof}
    )
}
function Remove-AzureADMSApplicationOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADMSApplicationPassword
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${KeyId}
    )
}
function Remove-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSFeatureRolloutPolicyDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADMSGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSIdentityProvider
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSLifecyclePolicyGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Remove-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOObjectId]
    ${PasswordSSOObjectId})

}
function Remove-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSRoleDefinition
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSServicePrincipalDelegatedPermissionClassification
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ServicePrincipalId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADOAuth2PermissionGrant
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Remove-AzureADScopedRoleMembership
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ScopedRoleMembershipId})

}
function Remove-AzureADServiceAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADServicePrincipal
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADServicePrincipalKeyCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADServicePrincipalOwner
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${OwnerId})

}
function Remove-AzureADServicePrincipalPasswordCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KeyId})

}
function Remove-AzureADServicePrincipalPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyId})

}
function Remove-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='The unique identifier of the object specific Azure Active Directory object')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function Remove-AzureADUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Remove-AzureADUserAppRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppRoleAssignmentId})

}
function Remove-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionName},

    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Collections.Generic.List[string]]
    ${ExtensionNames})

}
function Remove-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Reset-AzureADMSLifeCycleGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${GroupId}
    )
}
function Restore-AzureADDeletedApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris}
    )
}
function Restore-AzureADMSDeletedDirectoryObject
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id})

}
function Revoke-AzureADSignedInUserAllRefreshToken
{
    [CmdletBinding()]
param()

}
function Revoke-AzureADUserAllRefreshToken
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId})

}
function Select-AzureADGroupIdsContactIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsGroupIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsServicePrincipalIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Select-AzureADGroupIdsUserIsMemberOf
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck]
    ${GroupIdsForMembershipCheck})

}
function Set-AzureADAdministrativeUnit
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName}
    )
}
function Set-AzureADApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowGuestsSignIn},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AllowPassthroughUsers},

        [Parameter()]
        [System.String]
        ${AppLogoUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AvailableToOtherTenants},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.InformationalUrl]
        ${InformationalUrls},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDisabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${KnownClientApplications},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowImplicitFlow},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2AllowUrlPathMatching},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.OAuth2Permission]]
        ${Oauth2Permissions},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${Oauth2RequirePostResponse},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${PublicClient},

        [Parameter()]
        [System.String]
        ${PublisherDomain},

        [Parameter()]
        [System.String]
        ${RecordConsentConditions},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.String]
        ${WwwHomepage}
    )
}
function Set-AzureADApplicationLogo
{
    [CmdletBinding(DefaultParameterSetName='File')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Stream')]
    [Parameter(ParameterSetName='File')]
    [Parameter(ParameterSetName='ByteArray')]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Stream', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.IO.Stream]
    ${FileStream},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ParameterSetName='ByteArray', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${ImageByteArray})

}
function Set-AzureADApplicationProxyApplication
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InternalUrl},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ExternalAuthenticationTypeEnum]]
    ${ExternalAuthenticationType},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateHostHeaderEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[bool]]
    ${IsTranslateLinksInBodyEnabled},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.ApplicationProxyApplicationObject+ApplicationServerTimeoutEnum]]
    ${ApplicationServerTimeout},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyApplicationConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyApplicationCustomDomainCertificate
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PfxFilePath},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${Password})

}
function Set-AzureADApplicationProxyApplicationSingleSignOn
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.OnPremisesPublishingSingleSignOnObject+SingleSignOnModeEnum]]
    ${SingleSignOnMode},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${KerberosInternalApplicationServicePrincipalName},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Nullable[Microsoft.Open.MSGraph.Model.OnPremisesPublishingKerberosSignOnSettingsObject+KerberosSignOnMappingAttributeTypeEnum]]
    ${KerberosDelegatedLoginIdentity})

}
function Set-AzureADApplicationProxyConnector
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorGroupId})

}
function Set-AzureADApplicationProxyConnectorGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.Name]
    ${Name})

}
function Set-AzureADDevice
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]]
        ${AlternativeSecurityIds},

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        ${ApproximateLastLogonTimeStamp},

        [Parameter()]
        [System.String]
        ${DeviceId},

        [Parameter()]
        [System.String]
        ${DeviceMetadata},

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        ${DeviceObjectVersion},

        [Parameter()]
        [System.String]
        ${DeviceOSType},

        [Parameter()]
        [System.String]
        ${DeviceOSVersion},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${DevicePhysicalIds},

        [Parameter()]
        [System.String]
        ${DeviceTrustType},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompliant},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsManaged},

        [Parameter()]
        [System.String]
        ${ProfileType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SystemLabels}
    )
}
function Set-AzureADDirectorySetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function Set-AzureADDomain
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Name}
    )
}
function Set-AzureADGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${Description},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${MailEnabled},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${SecurityEnabled}
    )
}
function Set-AzureADMSApplication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]]
        ${AddIns},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ApiApplication]
        ${Api},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]]
        ${AppRoles},

        [Parameter()]
        [System.String]
        ${GroupMembershipClaims},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsDeviceOnlyAuthSupported},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsFallbackPublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${IdentifierUris},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.InformationalUrl]
        ${InformationalUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.OptionalClaims]
        ${OptionalClaims},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OrgRestrictions},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.ParentalControlSettings]
        ${ParentalControlSettings},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]]
        ${PreAuthorizedApplications},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.PublicClientApplication]
        ${PublicClient},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]]
        ${RequiredResourceAccess},

        [Parameter()]
        [System.String]
        ${SignInAudience},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags},

        [Parameter()]
        [System.String]
        ${TokenEncryptionKeyId},

        [Parameter()]
        [Microsoft.Open.MSGraph.Model.WebApplication]
        ${Web}
    )
}
function Set-AzureADMSApplicationLogo
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${Content})

}
function Set-AzureADMSAuthorizationPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSFeatureRolloutPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id},

        [Parameter()]
        [System.String]
        ${LabelId}
    )
}
function Set-AzureADMSGroupLifecyclePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSIdentityProvider
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPasswordSingleSignOnCredential
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.PasswordSSOCredentials]
    ${PasswordSSOCredential})

}
function Set-AzureADMSPermissionGrantPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPrivilegedRoleAssignmentRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSPrivilegedRoleSetting
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ProviderId},

        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADMSTrustFrameworkPolicy
{
    [CmdletBinding(DefaultParameterSetName='Content')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${Id},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${InputFilePath},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Content')]
    [Parameter(ParameterSetName='File')]
    [string]
    ${OutputFilePath},

    [Parameter(ParameterSetName='Content', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Content})

}
function Set-AzureADObjectSetting
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetType},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${TargetObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Id},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.MSGraph.Model.DirectorySetting]
    ${DirectorySetting})

}
function Set-AzureADPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${Id}
    )
}
function Set-AzureADServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.String]
        ${AccountEnabled},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${AlternativeNames},

        [Parameter()]
        [System.String]
        ${AppId},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AppRoleAssignmentRequired},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${ErrorUrl},

        [Parameter()]
        [System.String]
        ${Homepage},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]]
        ${KeyCredentials},

        [Parameter()]
        [System.String]
        ${LogoutUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]]
        ${PasswordCredentials},

        [Parameter()]
        [System.String]
        ${PublisherName},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ReplyUrls},

        [Parameter()]
        [System.String]
        ${SamlMetadataUrl},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${ServicePrincipalNames},

        [Parameter()]
        [System.String]
        ${ServicePrincipalType},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${Tags}
    )
}
function Set-AzureADTenantDetail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${MarketingNotificationEmails},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PrivacyProfile]
        ${PrivacyProfile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SecurityComplianceNotificationMails},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${SecurityComplianceNotificationPhones},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${TechnicalNotificationMails}
    )
}
function Set-AzureADTrustedCertificateAuthority
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true, HelpMessage='Trusted certificate authority list')]
    [Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation]
    ${CertificateAuthorityInformation})

}
function Set-AzureADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        ${ObjectId},

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        ${ExtensionProperty},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${AccountEnabled},

        [Parameter()]
        [System.String]
        ${AgeGroup},

        [Parameter()]
        [System.String]
        ${City},

        [Parameter()]
        [System.String]
        ${CompanyName},

        [Parameter()]
        [System.String]
        ${ConsentProvidedForMinor},

        [Parameter()]
        [System.String]
        ${Country},

        [Parameter()]
        [System.String]
        ${CreationType},

        [Parameter()]
        [System.String]
        ${Department},

        [Parameter()]
        [System.String]
        ${DisplayName},

        [Parameter()]
        [System.String]
        ${FacsimileTelephoneNumber},

        [Parameter()]
        [System.String]
        ${GivenName},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${IsCompromised},

        [Parameter()]
        [System.String]
        ${ImmutableId},

        [Parameter()]
        [System.String]
        ${JobTitle},

        [Parameter()]
        [System.String]
        ${MailNickName},

        [Parameter()]
        [System.String]
        ${Mobile},

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        ${OtherMails},

        [Parameter()]
        [System.String]
        ${PasswordPolicies},

        [Parameter()]
        [Microsoft.Open.AzureAD.Model.PasswordProfile]
        ${PasswordProfile},

        [Parameter()]
        [System.String]
        ${PhysicalDeliveryOfficeName},

        [Parameter()]
        [System.String]
        ${PostalCode},

        [Parameter()]
        [System.String]
        ${PreferredLanguage},

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        ${ShowInAddressList},

        [Parameter()]
        [System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]]
        ${SignInNames},

        [Parameter()]
        [System.String]
        ${State},

        [Parameter()]
        [System.String]
        ${StreetAddress},

        [Parameter()]
        [System.String]
        ${Surname},

        [Parameter()]
        [System.String]
        ${TelephoneNumber},

        [Parameter()]
        [System.String]
        ${UsageLocation},

        [Parameter()]
        [System.String]
        ${UserPrincipalName},

        [Parameter()]
        [System.String]
        ${UserState},

        [Parameter()]
        [System.String]
        ${UserStateChangedOn},

        [Parameter()]
        [System.String]
        ${UserType}
    )
}
function Set-AzureADUserExtension
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionName},

    [Parameter(ParameterSetName='SetSingle', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ExtensionValue},

    [Parameter(ParameterSetName='SetMultiple', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.Collections.Generic.Dictionary[string,string]]
    ${ExtensionNameValues})

}
function Set-AzureADUserLicense
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.Open.AzureAD.Model.AssignedLicenses]
    ${AssignedLicenses})

}
function Set-AzureADUserManager
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RefObjectId})

}
function Set-AzureADUserPassword
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ObjectId},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${Password},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${ForceChangePasswordNextLogin},

    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [bool]
    ${EnforceChangePasswordPolicy})

}
function Set-AzureADUserThumbnailPhoto
{
    [CmdletBinding(DefaultParameterSetName='File')]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Stream')]
    [Parameter(ParameterSetName='File')]
    [Parameter(ParameterSetName='ByteArray')]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Stream', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [System.IO.Stream]
    ${FileStream},

    [Parameter(ParameterSetName='File', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FilePath},

    [Parameter(ParameterSetName='ByteArray', Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [byte[]]
    ${ImageByteArray})

}
function Update-AzureADSignedInUserPassword
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${CurrentPassword},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]
    [securestring]
    ${NewPassword})

}
#endregion
#region ExchangeOnline
function Add-AvailabilityAddressSpace
{

param(
    [System.Object]
    ${Credentials},

    [System.Object]
    ${ForestName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AccessMethod},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${SharingPermissionFlags},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessRights},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Deny},

    [System.Object]
    ${AutoMapping},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [System.Object]
    ${Owner},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InheritanceType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ParentRoleEntry},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [switch]
    ${Overwrite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Type},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${SkipDomainValidationForMailContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipDomainValidationForMailUser},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipDomainValidationForSharedMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Approve-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${AccountOnly},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Clear-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Compare-TextMessagingVerificationCode
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${VerificationCode},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Complete-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SyncAndComplete},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function ConvertFrom-ExoJobData.ps1
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${InputObject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Delete-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Deny-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-JournalArchiving
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${PreserveMailUser},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDisable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-MailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Immediate},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${KeepProperties},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoleAssignmentPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AutoExpandingArchive},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ArchiveName},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-MailPublicFolder
{

param(
    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${OverrideRecipientQuotas},

    [switch]
    ${AsJob})

}
function Enable-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-OrganizationCustomization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Mode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${ValidateOnly},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendWelcomeMail},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Extensions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PinExpired},

    [switch]
    ${EnableCloudVoiceMail},

    [System.Object]
    ${NotifyEmail},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SIPResourceIdentifier},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMMailboxPolicy},

    [System.Object]
    ${Pin},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PilotNumber},

    [switch]
    ${AsJob})

}
function Export-DlpPolicyCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-MailboxDiagnosticLogs
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ComponentName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${ExtendedProperties},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${IncludeInactiveMailboxes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-MigrationReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StartingRowIndex},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RowCount},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CsvStream},

    [switch]
    ${AsJob})

}
function Export-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-TransportRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-UMCallDataRecord
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientStream},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Date},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-UMPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${PromptFileName},

    [System.Object]
    ${UMAutoAttendant},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AcceptedDomain
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceAccessRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceClass
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncDeviceStatistics
{

param(
    [switch]
    ${ShowRecoveryPassword},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ActiveSyncOrganizationSettings
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AddressBookPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdminAuditLogConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdministrativeUnit
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AdvancedThreatProtectionDocumentDetail
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AdvancedThreatProtectionDocumentReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Spoof},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ApplicationAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ATPEvaluation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PrintAll},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OrganizationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ATPTotalTrafficReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-AuditConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CreatedAfter},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${CreatedBefore},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AuthenticationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuthServer
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AvailabilityAddressSpace
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AvailabilityConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-BlockedSenderAddress
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SenderAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticAnalysis
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${GlobalObjectId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LogLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutputAs},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DetailLevel},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CalendarLogs},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Latest},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LogLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ItemClass},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ItemIds},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MeetingId},

    [System.Object]
    ${EntryId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ExactMatch},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarDiagnosticObjects
{

param(
    [System.Object]
    ${ShouldDecodeEnums},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ShouldFetchAttendeeCollection},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Subject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExactMatch},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ItemIds},

    [System.Object]
    ${ShouldBindToItem},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${EwsId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ShouldFetchRecurrenceExceptions},

    [System.Object]
    ${MeetingId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemClass},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ConfigurationName},

    [System.Object]
    ${EndDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ODataId},

    [System.Object]
    ${CustomPropertyNames},

    [System.Object]
    ${EntryId},

    [switch]
    ${AsJob})

}
function Get-CalendarNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarProcessing
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CalendarViewDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WindowEndUtc},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ReturnSeriesMasters},

    [switch]
    ${IgnoreCorruptItems},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${WindowStartUtc},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CASMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ResultSize},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReadIsOptimizedForAccessibility},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [switch]
    ${ActiveSyncDebugLogging},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [switch]
    ${ProtocolSettings},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${RecalculateHasActiveSyncDevicePartnership},

    [System.Object]
    ${Filter},

    [switch]
    ${ActiveSyncSuppressReadReceipt},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CASMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ClassificationRuleCollection
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Clutter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-CompliancePolicyFileSyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CompliancePolicySyncNotification
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludingLabelState},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTagStorage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ConnectionByClientTypeDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ConnectionByClientTypeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Contact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsActiveUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAVConferenceTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientDeviceDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UserName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientDeviceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsConferenceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsP2PAVTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsP2PSessionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPSTNConferenceTimeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPSTNUsageDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserActivitiesReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UserName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUsersBlockedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CustomizedUserSubmission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubmittedBy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ClassificationRuleCollectionIdentity},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataClassificationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DataRetentionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReportFilter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceCompliancePolicyInventory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceReportDate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserInventory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DevicePolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSoftDeletedObjects},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Credential},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DkimSigningConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Actor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-DlpIncidentDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Actor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpKeywordDictionary
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpPolicyTemplate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSiDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitiveType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DynamicDistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessApprovalPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessAuthorization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Requestor},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ElevatedAccessRequest
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [switch]
    ${AsJob})

}
function Get-EligibleDistributionGroupForMigration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ManagedBy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-EmailAddressPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-EvaluationModeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientDomain},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${EventSubType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IsScanAndDrop},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [System.Object]
    ${IsComplexRouted},

    [System.Object]
    ${IsEvaluationMode},

    [System.Object]
    ${ConnectorId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FailedContentIndexDocuments
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ErrorCode},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${FailureMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('mailbox')]
    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederatedOrganizationIdentifier
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeExtendedDomainInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederationInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TrustedHostnames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassAdditionalDomainValidation},

    [System.Object]
    ${DomainName},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FederationTrust
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FfoMigrationReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Page},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FocusedInbox
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-GroupActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-GroupMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeMailboxUrls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeMembers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HistoricalSearch
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JobId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedConnectionFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedContentFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HotmailSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HybridMailflow
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-HybridMailflowDatacenterIPs
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ImapSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InboundConnector
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DescriptionTimeFormat},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeHidden},

    [switch]
    ${BypassScopeCheck},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DescriptionTimeZone},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportDetails
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportSummary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-IntraOrganizationConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationGuid},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-IntraOrganizationConnector
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-IRMConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-JournalRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LicenseVsUsageSummaryReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LinkedUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-LogonStatistics
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeInactiveMailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [switch]
    ${InactiveMailboxOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SoftDeletedMailbox},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${MailboxPlan},

    [switch]
    ${Migration},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxAuditBypassAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxAutoReplyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxCalendarConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxCalendarFolder
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxFolder
{

param(
    [switch]
    ${GetChildren},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${MailFolderOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxFolderStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${IncludeOldestAndNewestItems},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeAnalysis},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${FolderScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxJunkEmailConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxLocation
{

param(
    [switch]
    ${IncludePreviousPrimary},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${MailboxLocationType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxMessageConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxOverrideConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [System.Object]
    ${User},

    [switch]
    ${Owner},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${SoftDeletedMailbox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllMailboxPlanReleases},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxPreferredLocation
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxRegionalConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${VerifyDefaultFolderNameLanguage},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Suspend},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [System.Object]
    ${HighPriority},

    [System.Object]
    ${TargetMailbox},

    [switch]
    ${AsJob})

}
function Get-MailboxRestoreRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${ShowDeletionInProgressSearches},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${InPlaceHoldIdentity},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxSpellingConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailboxStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeMoveReport},

    [switch]
    ${Archive},

    [switch]
    ${IncludeMoveHistory},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUsageDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUsageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailboxUserConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailContact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailATPReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${DataSource},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${ProbeTag},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MalwareName},

    [System.Object]
    ${RecipientAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailDlpPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TransportRule},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailEvaluationModeReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientDomain},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${EventSubType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsScanAndDrop},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${ProbeTag},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [System.Object]
    ${IsComplexRouted},

    [System.Object]
    ${IsEvaluationMode},

    [System.Object]
    ${ConnectorId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailMalwareReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MalwareName},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailSpamReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MessageTraceId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailDetailTransportRuleReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MessageTraceId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailFilterListReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SelectionTarget},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Domain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailFlowStatusReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailTrafficATPReport
{

param(
    [System.Object]
    ${NumberOfRows},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PivotBy},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailTrafficSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${DlpPolicy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TransportRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${Category},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MailTrafficTopReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-MailUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [switch]
    ${SoftDeletedMailUser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MalwareFilterPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RoleType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CmdletParameters},

    [System.Object]
    ${ScriptParameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlet},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Script},

    [switch]
    ${GetChildren},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-ManagementRoleAssignment
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RoleAssigneeType},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientWriteScope},

    [System.Object]
    ${WritableRecipient},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ConfigWriteScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoleAssignee},

    [System.Object]
    ${Delegating},

    [System.Object]
    ${Exclusive},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AssignmentMethod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Role},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${GetEffectiveUsers},

    [switch]
    ${AsJob})

}
function Get-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PSSnapinName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Orphan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IncludeLocales},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageRecallResult
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NetworkMessageId},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [System.Object]
    ${RequestTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTrace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${FromIP},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ToIP},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${Status},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTraceDetail
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Event},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MessageTraceId},

    [System.Object]
    ${PageSize},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MessageTrackingReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientPathFilter},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ReportTemplate},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeReport},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [System.Object]
    ${Endpoint},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MigrationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailboxGuid},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BatchId},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [System.Object]
    ${StatusSummary},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MigrationUserStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DiagnosticInfo},

    [switch]
    ${IncludeSkippedItems},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipSubscription},

    [System.Object]
    ${LimitSkippedItemsTo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${OWAforDevices},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${UniversalOutlook},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceDashboardSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MobileDeviceStatistics
{

param(
    [switch]
    ${ShowRecoveryPassword},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${OWAforDevices},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${UniversalOutlook},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${GetMailboxLog},

    [System.Object]
    ${Identity},

    [switch]
    ${ActiveSync},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmailAddresses},

    [switch]
    ${RestApi},

    [switch]
    ${AsJob})

}
function Get-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Flags},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MoveStatus},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Suspend},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SuspendWhenReadyToComplete},

    [System.Object]
    ${Offline},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MoveRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${DiagnosticOnly},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MxRecordReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-MxRecordsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Notification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Summary},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ProcessType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientBrowserDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${WindowsLiveID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Browser},

    [System.Object]
    ${BrowserVersion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientBrowserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Browser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientOSDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OperatingSystem},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OperatingSystemVersion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${WindowsLiveID},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-O365ClientOSReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${OS},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OMEConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OnlineMeetingConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OnPremisesOrganization
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OrganizationalUnit
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SearchText},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${SingleNodeOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${IncludeContainers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OrganizationConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OrganizationRelationship
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeTestModeConnectors},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OutboundConnectorReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-OutlookProtectionRule
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-OwaMailboxPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PartnerApplication
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PartnerCustomerUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PerimeterConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PerimeterMessageTrace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PhishFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Detailed},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DecisionSetBy},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SpoofType},

    [switch]
    ${WidgetData},

    [switch]
    ${SpoofAllowBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowedToSpoof},

    [System.Object]
    ${ConfidenceLevel},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Place
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PolicyConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PolicyTipConfig
{

param(
    [System.Object]
    ${Locale},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Original},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PopSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolder
{

param(
    [switch]
    ${GetChildren},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${LostAndFound},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${ResidentFolders},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Mailbox},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderItemStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${IncludeHierarchyInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeDumpsterInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Suspend},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Status},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderMailboxMigrationRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-PublicFolderStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessage
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${Page},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Reported},

    [System.Object]
    ${Direction},

    [System.Object]
    ${QuarantineTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndReceivedDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PageSize},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${StartExpiresDate},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${Subject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${StartReceivedDate},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${MyItems},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EndExpiresDate},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessageHeader
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RbacDiagnosticInfo
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Recipient
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RecipientPreviewFilter},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Anr},

    [System.Object]
    ${BookmarkDisplayName},

    [System.Object]
    ${Capabilities},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RecipientTypeDetails},

    [System.Object]
    ${Properties},

    [System.Object]
    ${PropertySet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AuthenticationType},

    [System.Object]
    ${Filter},

    [switch]
    ${IncludeSoftDeletedRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RecipientType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncludeBookmarkObject},

    [switch]
    ${AsJob})

}
function Get-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RecipientStatisticsReport
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RemoteDomain
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ReportExecutionInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ReportSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ReportScheduleList
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeDLP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ReportSubmissionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ResourceConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllStatus},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RetentionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RetentionPolicyTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OptionalInMailbox},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IncludeSystemTags},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Types},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RMSTemplate
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [System.Object]
    ${TrustedPublishingDomain},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleAssignmentPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ShowPartnerLinked},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SCInsights
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientDeviceReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientOSReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardClientOutlookReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Category},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ScorecardMetricsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SearchDocumentFormat
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SecurityPrincipal
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Types},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SendAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddressId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SenderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SensitivityLabelActivityDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${MIPLabelName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SensitivityLabelActivityReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${MIPLabelName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ServiceDeliveryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ServiceStatus
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaintenanceWindowDays},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SharingPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [switch]
    ${BypassOwnerCheck},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SiteMailboxDiagnostics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SendMeEmail},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SiteMailboxProvisioningPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SmimeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SPOActiveUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SpoofMailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Page},

    [System.Object]
    ${ProbeTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOSkyDriveProDeployedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOSkyDriveProStorageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTeamSiteDeployedReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTeamSiteStorageReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SPOTenantStorageMetricReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-StaleMailboxDetailReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-StaleMailboxReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Subscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SubscriptionType},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AggregationType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewActivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Policies},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyV2
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Policies},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassScopeCheck},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SyncConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${WorkloadType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SyncProtocol},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SyncRequestStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${IncludeReport},

    [System.Object]
    ${DiagnosticInfo},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ReportOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TenantAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ToolInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TransportConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpPolicy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${State},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TransportRuleAction
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TransportRulePredicate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-TxpUserSettings
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallDataRecord
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMCallSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${GroupBy},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMDialPlan
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeSimulator},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxConfiguration
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPIN
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [switch]
    ${IgnoreErrors},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UMPhoneSession
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UnifiedAuditSetting
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeSoftDeletedGroups},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IncludeAllProperties},

    [System.Object]
    ${Filter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-User
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [switch]
    ${IsVIP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UserAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ReadFromDomainController},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${PhotoType},

    [System.Object]
    ${Filter},

    [switch]
    ${Preview},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-ContactList
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DateCultureName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${CSV},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CSVData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CSVStream},

    [switch]
    ${AsJob})

}
function Import-DlpPolicyCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-RecipientDataProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Picture},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SpokenName},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${ExtranetLicensingUrl},

    [switch]
    ${RefreshTemplates},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IntranetLicensingUrl},

    [System.Object]
    ${IntranetCertificationUrl},

    [System.Object]
    ${FileData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-TransportRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-UMPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PromptFileData},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${PromptFileName},

    [System.Object]
    ${UMAutoAttendant},

    [System.Object]
    ${PromptFileStream},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-ShadowCalendarSync
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MaxEventsToSync},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActiveSyncDeviceAccessRule
{

param(
    [System.Object]
    ${QueryString},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Characteristic},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessLevel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActiveSyncMailboxPolicy
{

param(
    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxInactivityTimeDeviceLock},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${DevicePasswordEnabled},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [System.Object]
    ${DevicePasswordHistory},

    [System.Object]
    ${AllowInternetSharing},

    [System.Object]
    ${MinDevicePasswordComplexCharacters},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DevicePasswordExpiration},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${MaxDevicePasswordFailedAttempts},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${AlphanumericDevicePasswordRequired},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${AllowSimpleDevicePassword},

    [System.Object]
    ${AttachmentsEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${IsDefaultPolicy},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${Name},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MinDevicePasswordLength},

    [System.Object]
    ${IrmEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-AdminAuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Parameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableUnauthenticatedSender},

    [System.Object]
    ${EnableAntiSpoofEnforcement},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AuthenticationFailAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${AntiPhishPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-App
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Etoken},

    [System.Object]
    ${FileStream},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Url},

    [System.Object]
    ${Mailbox},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MarketplaceServicesUrl},

    [switch]
    ${PrivateCatalog},

    [System.Object]
    ${MarketplaceCorrelationID},

    [System.Object]
    ${DefaultStateForUser},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MarketplaceQueryMarket},

    [System.Object]
    ${MarketplaceUserProfileType},

    [switch]
    ${DownloadOnly},

    [System.Object]
    ${ProvidedTo},

    [System.Object]
    ${UserList},

    [switch]
    ${OrganizationApp},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MarketplaceAssetID},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AllowReadWriteMailbox},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AppId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PolicyScopeGroupId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AccessRight},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthPop},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthPowershell},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllowBasicAuthOutlookService},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AllowBasicAuthWebServices},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OrgWideAccount},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ClientAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UsernameMatchesAnyOfPatterns},

    [System.Object]
    ${Action},

    [System.Object]
    ${AnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptAnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserRecipientFilter},

    [System.Object]
    ${ExceptAnyOfProtocols},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptUsernameMatchesAnyOfPatterns},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AnyOfAuthenticationTypes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AnyOfProtocols},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptAnyOfAuthenticationTypes},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Scope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-CompliancePolicySyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SyncChangeInfos},

    [switch]
    ${FullSync},

    [switch]
    ${SyncNow},

    [System.Object]
    ${SyncSvcUrl},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestToken},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OAuthVerifier},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequestSecret},

    [switch]
    ${LinkedIn},

    [System.Object]
    ${RedirectUri},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ClassificationRuleCollectionIdentity},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DistributionGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MemberDepartRestriction},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IgnoreNamingPolicy},

    [switch]
    ${RoomList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${BypassNestedModerationEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${CopyOwnerToMember},

    [System.Object]
    ${Members},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MemberJoinRestriction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Type},

    [System.Object]
    ${Alias},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${Notes},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BodyCanonicalization},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${KeySize},

    [System.Object]
    ${HeaderCanonicalization},

    [System.Object]
    ${DomainName},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TemplateData},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [System.Object]
    ${Template},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DynamicDistributionGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ConditionalCustomAttribute5},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${RecipientFilter},

    [System.Object]
    ${ConditionalCustomAttribute8},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ConditionalCustomAttribute10},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ConditionalCustomAttribute9},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConditionalCustomAttribute2},

    [System.Object]
    ${IncludedRecipients},

    [System.Object]
    ${ConditionalCompany},

    [System.Object]
    ${ConditionalCustomAttribute6},

    [System.Object]
    ${ConditionalCustomAttribute3},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ConditionalCustomAttribute13},

    [System.Object]
    ${RecipientContainer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConditionalCustomAttribute12},

    [System.Object]
    ${ConditionalDepartment},

    [System.Object]
    ${ConditionalStateOrProvince},

    [System.Object]
    ${DirectMembershipOnly},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ConditionalCustomAttribute7},

    [System.Object]
    ${ConditionalCustomAttribute14},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ConditionalCustomAttribute4},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConditionalCustomAttribute1},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Alias},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ConditionalCustomAttribute15},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${ConditionalCustomAttribute11},

    [switch]
    ${AsJob})

}
function New-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RoleGroup},

    [System.Object]
    ${ExternalIdentity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DurationHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Task},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledEmailAddressTemplates},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ManagedByFilter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IncludeUnifiedGroupRecipients},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-Fingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${IPBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IPAllowList},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedContentFilterPolicy
{

param(
    [System.Object]
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TestModeAction},

    [System.Object]
    ${QuarantineRetentionPeriod},

    [System.Object]
    ${MarkAsSpamWebBugsInHtml},

    [System.Object]
    ${EndUserSpamNotificationCustomFromName},

    [System.Object]
    ${MarkAsSpamFromAddressAuthFail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomFromAddress},

    [System.Object]
    ${IncreaseScoreWithRedirectToOtherPort},

    [System.Object]
    ${BulkThreshold},

    [System.Object]
    ${EnableLanguageBlockList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomSubject},

    [System.Object]
    ${MarkAsSpamSensitiveWordList},

    [System.Object]
    ${MarkAsSpamFormTagsInHtml},

    [System.Object]
    ${MarkAsSpamNdrBackscatter},

    [System.Object]
    ${AddXHeaderValue},

    [System.Object]
    ${BulkSpamAction},

    [System.Object]
    ${ModifySubjectValue},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${IncreaseScoreWithImageLinks},

    [System.Object]
    ${MarkAsSpamEmptyMessages},

    [System.Object]
    ${MarkAsSpamSpfRecordHardFail},

    [System.Object]
    ${PhishSpamAction},

    [System.Object]
    ${HighConfidencePhishAction},

    [System.Object]
    ${MarkAsSpamJavaScriptInHtml},

    [System.Object]
    ${EnableRegionBlockList},

    [System.Object]
    ${EnableEndUserSpamNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RedirectToRecipients},

    [System.Object]
    ${AllowedSenderDomains},

    [System.Object]
    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MarkAsSpamFramesInHtml},

    [System.Object]
    ${TestModeBccToRecipients},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MarkAsSpamEmbedTagsInHtml},

    [System.Object]
    ${EndUserSpamNotificationLanguage},

    [System.Object]
    ${EndUserSpamNotificationLimit},

    [System.Object]
    ${SpamAction},

    [System.Object]
    ${InlineSafetyTipsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SpamZapEnabled},

    [System.Object]
    ${PhishZapEnabled},

    [System.Object]
    ${BlockedSenders},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowedSenders},

    [System.Object]
    ${LanguageBlockList},

    [System.Object]
    ${RegionBlockList},

    [System.Object]
    ${IncreaseScoreWithBizOrInfoUrls},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EndUserSpamNotificationFrequency},

    [System.Object]
    ${IncreaseScoreWithNumericIps},

    [System.Object]
    ${BlockedSenderDomains},

    [System.Object]
    ${MarkAsSpamBulkMail},

    [System.Object]
    ${DownloadLink},

    [switch]
    ${AsJob})

}
function New-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${HostedContentFilterPolicy},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BccSuspiciousOutboundAdditionalRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NotifyOutboundSpamRecipients},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientLimitPerDay},

    [System.Object]
    ${ActionWhenThresholdReached},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientLimitExternalPerHour},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NotifyOutboundSpam},

    [System.Object]
    ${RecipientLimitInternalPerHour},

    [System.Object]
    ${BccSuspiciousOutboundMail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfFrom},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${SenderDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HostedOutboundSpamFilterPolicy},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${From},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictDomainsToIPAddresses},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EFSkipMailGateway},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EFTestMode},

    [System.Object]
    ${TlsSenderCertificateName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ScanAndDropRecipients},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AssociatedAcceptedDomains},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RequireTls},

    [System.Object]
    ${SenderDomains},

    [System.Object]
    ${SenderIPAddresses},

    [System.Object]
    ${EFSkipLastIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EFUsers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RestrictDomainsToCertificate},

    [System.Object]
    ${EFSkipIPs},

    [System.Object]
    ${TreatMessagesAsInternal},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-InboxRule
{

param(
    [System.Object]
    ${ExceptIfMyNameNotInToBox},

    [System.Object]
    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PinMessage},

    [System.Object]
    ${WithinSizeRangeMaximum},

    [System.Object]
    ${ReceivedBeforeDate},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${ExceptIfFromSubscription},

    [System.Object]
    ${ExceptIfWithinSizeRangeMaximum},

    [System.Object]
    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MyNameInToOrCcBox},

    [System.Object]
    ${ExceptIfReceivedBeforeDate},

    [System.Object]
    ${Mailbox},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${RedirectTo},

    [System.Object]
    ${ReceivedAfterDate},

    [System.Object]
    ${ForwardTo},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${ExceptIfSentOnlyToMe},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfHasAttachment},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${ExceptIfMyNameInToBox},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${From},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${FlaggedForAction},

    [System.Object]
    ${WithSensitivity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CopyToFolder},

    [System.Object]
    ${FromMessageId},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${MarkImportance},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ApplyCategory},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HasAttachment},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfFlaggedForAction},

    [System.Object]
    ${FromSubscription},

    [System.Object]
    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopProcessingRules},

    [System.Object]
    ${DeleteSystemCategory},

    [System.Object]
    ${ExceptIfWithinSizeRangeMinimum},

    [System.Object]
    ${MessageTypeMatches},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ApplySystemCategory},

    [System.Object]
    ${SendTextMessageNotificationTo},

    [System.Object]
    ${MarkAsRead},

    [System.Object]
    ${MoveToFolder},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${MyNameInCcBox},

    [switch]
    ${ValidateOnly},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${MyNameInToBox},

    [System.Object]
    ${ExceptIfSentTo},

    [switch]
    ${Force},

    [System.Object]
    ${SentOnlyToMe},

    [System.Object]
    ${Name},

    [System.Object]
    ${ForwardAsAttachmentTo},

    [System.Object]
    ${ExceptIfBodyContainsWords},

    [System.Object]
    ${ExceptIfMyNameInCcBox},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MyNameNotInToBox},

    [System.Object]
    ${ExceptIfWithSensitivity},

    [System.Object]
    ${ExceptIfHasClassification},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TargetAddressDomains},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DiscoveryEndpoint},

    [System.Object]
    ${TargetSharingEpr},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Scope},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${JournalEmailAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-Mailbox
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${Office},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Password},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${TargetAllMDBs},

    [System.Object]
    ${RemovedMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${PublicFolder},

    [switch]
    ${Force},

    [System.Object]
    ${LastName},

    [System.Object]
    ${EnableRoomMailboxAccount},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${ResourceCapacity},

    [switch]
    ${Archive},

    [switch]
    ${Equipment},

    [System.Object]
    ${ImmutableId},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RoomMailboxPassword},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Shared},

    [System.Object]
    ${IsExcludedFromServingHierarchy},

    [System.Object]
    ${MailboxPlan},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [switch]
    ${Migration},

    [switch]
    ${Room},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FederatedIdentity},

    [System.Object]
    ${ActiveSyncMailboxPolicy},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${HoldForMigration},

    [switch]
    ${Discovery},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${Phone},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${InactiveMailbox},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Name},

    [System.Object]
    ${RemotePowerShellEnabled},

    [switch]
    ${AsJob})

}
function New-MailboxAuditLogSearch
{

param(
    [switch]
    ${ShowDetails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${LogonTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Operations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Mailboxes},

    [System.Object]
    ${HasAttachments},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailboxFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailboxRestoreRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ExcludeDumpster},

    [System.Object]
    ${TargetType},

    [System.Object]
    ${ConflictResolutionOption},

    [System.Object]
    ${RemoteDatabaseGuid},

    [System.Object]
    ${AssociatedMessagesCopyOption},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SuspendComment},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${TargetIsArchive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncludeFolders},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${Suspend},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${RemoteRestoreType},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${SourceMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${SourceStoreMailbox},

    [switch]
    ${SourceIsArchive},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoteCredential},

    [switch]
    ${AllowLegacyDNMismatch},

    [System.Object]
    ${ExcludeFolders},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetRootFolder},

    [System.Object]
    ${SourceRootFolder},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${TargetMailbox},

    [switch]
    ${AsJob})

}
function New-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${InPlaceHoldEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemHoldPeriod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SourceMailboxes},

    [System.Object]
    ${InPlaceHoldIdentity},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailContact
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LastName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UsePreferMessageFormat},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MessageBodyFormat},

    [System.Object]
    ${Initials},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-MailMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Body},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${BodyFormat},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MailUser
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Password},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LastName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${ImmutableId},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [System.Object]
    ${MessageBodyFormat},

    [System.Object]
    ${Initials},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FederatedIdentity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${SendModerationNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Name},

    [System.Object]
    ${RemotePowerShellEnabled},

    [switch]
    ${AsJob})

}
function New-MalwareFilterPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CustomFromName},

    [System.Object]
    ${Action},

    [System.Object]
    ${AdminDisplayName},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomExternalBody},

    [System.Object]
    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomNotifications},

    [System.Object]
    ${EnableInternalSenderNotifications},

    [System.Object]
    ${EnableExternalSenderAdminNotifications},

    [System.Object]
    ${InternalSenderAdminAddress},

    [System.Object]
    ${CustomAlertText},

    [System.Object]
    ${FileTypes},

    [System.Object]
    ${EnableInternalSenderAdminNotifications},

    [System.Object]
    ${CustomFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalSenderAdminAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CustomInternalSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomInternalBody},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableFileFilter},

    [switch]
    ${AsJob})

}
function New-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${MalwareFilterPolicy},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledCmdlets},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Delegating},

    [System.Object]
    ${Policy},

    [System.Object]
    ${SecurityGroup},

    [System.Object]
    ${Role},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RecipientRelativeWriteScope},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Exclusive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RecipientRestrictionFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientRoot},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MessageClassification
{

param(
    [System.Object]
    ${Locale},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientDescription},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermissionMenuVisible},

    [System.Object]
    ${ClassificationID},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SenderDescription},

    [System.Object]
    ${DisplayPrecedence},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetainClassificationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-MigrationBatch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SkipMail},

    [System.Object]
    ${SourceEndpoint},

    [switch]
    ${AutoStart},

    [switch]
    ${DisableOnCopy},

    [System.Object]
    ${MoveOptions},

    [System.Object]
    ${WorkflowControlFlags},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TargetDatabases},

    [System.Object]
    ${TargetEndpoint},

    [System.Object]
    ${CSVData},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NotificationEmails},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${SkipReports},

    [System.Object]
    ${TargetArchiveDatabases},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReportInterval},

    [System.Object]
    ${LargeItemLimit},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${SkipContacts},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SkipMoving},

    [switch]
    ${AutoComplete},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${CompleteAfter},

    [switch]
    ${PrimaryOnly},

    [System.Object]
    ${Partition},

    [System.Object]
    ${SourcePFPrimaryMailboxGuid},

    [System.Object]
    ${TargetDeliveryDomain},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Users},

    [switch]
    ${ArchiveOnly},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${ArchiveDomain},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${ExcludeDumpsters},

    [System.Object]
    ${UserIds},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExcludeFolders},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Name},

    [switch]
    ${SkipCalendar},

    [System.Object]
    ${AllowUnknownColumnsInCsv},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${WorkflowTemplate},

    [System.Object]
    ${TimeZone},

    [switch]
    ${AsJob})

}
function New-MigrationEndpoint
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExchangeRemoteMove},

    [System.Object]
    ${MaxConcurrentMigrations},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [switch]
    ${PublicFolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [switch]
    ${Gmail},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Credentials},

    [switch]
    ${Compliance},

    [System.Object]
    ${Port},

    [System.Object]
    ${EmailAddress},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [switch]
    ${IMAP},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${NspiServer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RpcProxyServer},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [switch]
    ${SkipVerification},

    [System.Object]
    ${MaxConcurrentIncrementalSyncs},

    [switch]
    ${AsJob})

}
function New-MobileDeviceMailboxPolicy
{

param(
    [System.Object]
    ${AllowMicrosoftPushNotifications},

    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxPasswordFailedAttempts},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PasswordHistory},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowInternetSharing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${PasswordEnabled},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MinPasswordComplexCharacters},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IrmEnabled},

    [System.Object]
    ${PasswordExpiration},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AlphanumericPasswordRequired},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowGooglePushNotifications},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${Name},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AttachmentsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${MaxInactivityTimeLock},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MinPasswordLength},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-MoveRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Identity},

    [switch]
    ${SuspendWhenReadyToComplete},

    [System.Object]
    ${MoveOptions},

    [System.Object]
    ${RemoteArchiveTargetDatabase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${ForceOffline},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestExpiryInterval},

    [switch]
    ${PreventCompletion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${Suspend},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SuspendComment},

    [System.Object]
    ${CompleteAfter},

    [switch]
    ${PrimaryOnly},

    [switch]
    ${Remote},

    [System.Object]
    ${RemoteTargetDatabase},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [switch]
    ${ArchiveOnly},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${ArchiveDomain},

    [System.Object]
    ${RemoteGlobalCatalog},

    [System.Object]
    ${TargetDeliveryDomain},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RemoteCredential},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${Outbound},

    [switch]
    ${AsJob})

}
function New-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${OutboundConnector},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OrganizationGuid},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationRelationship},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-OrganizationRelationship
{

param(
    [System.Object]
    ${TargetApplicationUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MailTipsAccessLevel},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DeliveryReportEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ArchiveAccessEnabled},

    [System.Object]
    ${FreeBusyAccessEnabled},

    [System.Object]
    ${MailTipsAccessScope},

    [System.Object]
    ${TargetOwaURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailTipsAccessEnabled},

    [System.Object]
    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MailboxMovePublishedScopes},

    [System.Object]
    ${MailboxMoveEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${FreeBusyAccessLevel},

    [System.Object]
    ${DomainNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

}
function New-OutboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RouteAllMessagesViaOnPremises},

    [System.Object]
    ${RecipientDomains},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${LinkForModifiedConnector},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TestMode},

    [System.Object]
    ${AllAcceptedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${UseMXRecord},

    [System.Object]
    ${TlsSettings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SmartHosts},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TlsDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${UserCanOverride},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FromDepartment},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-OwaMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LinkedAccount},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AcceptSecurityIdentifierInformation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountType},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Value},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PrivilegedIdentityManagementRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RoleGroup},

    [System.Object]
    ${ExternalIdentity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DurationHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Task},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Role},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ProtectionServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EformsLocaleId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Path},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RemoteDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ReportSchedule
{

param(
    [System.Object]
    ${Locale},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Direction},

    [System.Object]
    ${EncryptionTemplate},

    [System.Object]
    ${TransportRuleId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ScheduleName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeDLP},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpRuleId},

    [System.Object]
    ${EncryptionType},

    [System.Object]
    ${ExpiryDate},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${NotificationEmail},

    [System.Object]
    ${ReportFrequency},

    [System.Object]
    ${ReportType},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ReportSubmissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PostSubmitMessage},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ThirdPartyReportAddresses},

    [System.Object]
    ${EnableCustomizedMsg},

    [System.Object]
    ${EnableThirdPartyAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ReportJunkToCustomizedAddress},

    [System.Object]
    ${ReportNotJunkAddresses},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ReportJunkAddresses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ReportNotJunkToCustomizedAddress},

    [System.Object]
    ${PostSubmitMessageTitle},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReportPhishToCustomizedAddress},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PreSubmitMessageTitle},

    [System.Object]
    ${PreSubmitMessage},

    [System.Object]
    ${EnableReportToMicrosoft},

    [System.Object]
    ${ReportPhishAddresses},

    [switch]
    ${AsJob})

}
function New-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RetentionId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RetentionPolicyTag
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageClass},

    [System.Object]
    ${MustDisplayCommentEnabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IsDefaultAutoGroupPolicyTag},

    [System.Object]
    ${LocalizedRetentionPolicyTagName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AgeLimitForRetention},

    [switch]
    ${IsDefaultModeratedRecipientsPolicyTag},

    [System.Object]
    ${RetentionAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${LocalizedComment},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetentionEnabled},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SystemTag},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Roles},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${WellKnownObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManagedBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Roles},

    [switch]
    ${AsJob})

}
function New-SchedulingMailbox
{

param(
    [System.Object]
    ${ReplyToAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Alias},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BusinessType},

    [System.Object]
    ${Owner},

    [System.Object]
    ${Culture},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${TimeZone},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${BookingServiceName},

    [switch]
    ${AsJob})

}
function New-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Domains},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Alias},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SiteMailboxProvisioningPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [System.Object]
    ${SystemCategory},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${KeepLatest},

    [System.Object]
    ${ExceptIfFlagged},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceFolder},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${DestinationFolder},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExceptIfPinned},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${KeepForDays},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SyncMailPublicFolder
{

param(
    [System.Object]
    ${WindowsEmailAddress},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CustomAttribute7},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ForwardingAddress},

    [switch]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${CustomAttribute1},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${OverrideRecipientQuotas},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${MaxReceiveSize},

    [System.Object]
    ${Contacts},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${CustomAttribute15},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${OnPremisesObjectId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CustomAttribute4},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute11},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${EntryId},

    [switch]
    ${AsJob})

}
function New-SyncRequest
{

param(
    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [switch]
    ${Unified},

    [switch]
    ${Mail},

    [System.Object]
    ${TokenSecret},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WorkloadType},

    [System.Object]
    ${Name},

    [System.Object]
    ${RequestExpiryInterval},

    [System.Object]
    ${TargetRootFolder},

    [System.Object]
    ${OAuthProvider},

    [switch]
    ${Force},

    [switch]
    ${Contact},

    [switch]
    ${SendOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemoteServerPort},

    [System.Object]
    ${Authentication},

    [System.Object]
    ${SmtpPassword},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Pop},

    [switch]
    ${DoNotLeaveOnServer},

    [System.Object]
    ${SmtpUserName},

    [System.Object]
    ${IncludeFolders},

    [switch]
    ${UseTokenStore},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserName},

    [System.Object]
    ${TokenStoreId},

    [switch]
    ${RemoteSendEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Eas},

    [System.Object]
    ${SmtpServerName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Calendar},

    [switch]
    ${Imap},

    [switch]
    ${ThirdPartyCalendarSync},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupMailbox},

    [System.Object]
    ${RemoteEmailAddress},

    [System.Object]
    ${RemoteUserIdentifier},

    [System.Object]
    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessToken},

    [switch]
    ${Xrm},

    [System.Object]
    ${ExcludeFolders},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Security},

    [System.Object]
    ${RefreshToken},

    [System.Object]
    ${ProviderArgs},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${RemoteServerName},

    [switch]
    ${AsJob})

}
function New-TransportRule
{

param(
    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${AddToRecipients},

    [System.Object]
    ${ApplyHtmlDisclaimerFallbackAction},

    [System.Object]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object]
    ${AttachmentSizeOver},

    [System.Object]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object]
    ${SetSCL},

    [System.Object]
    ${AnyOfToHeaderMemberOf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disconnect},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${ExceptIfAnyOfCcHeader},

    [System.Object]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${ManagerForEvaluatedUser},

    [System.Object]
    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfFromScope},

    [System.Object]
    ${ADComparisonAttribute},

    [System.Object]
    ${ExceptIfAttachmentContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${HeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfAttachmentIsPasswordProtected},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${HasSenderOverride},

    [System.Object]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    [System.Object]
    ${ExceptIfHasClassification},

    [System.Object]
    ${Quarantine},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${RecipientAddressType},

    [System.Object]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object]
    ${BlindCopyTo},

    [System.Object]
    ${ApplyHtmlDisclaimerLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [System.Object]
    ${SenderIpRanges},

    [System.Object]
    ${ExceptIfMessageContainsDataClassifications},

    [System.Object]
    ${ModerateMessageByUser},

    [System.Object]
    ${HasNoClassification},

    [System.Object]
    ${ExceptIfSenderInRecipientList},

    [System.Object]
    ${HeaderContainsMessageHeader},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${MessageContainsDataClassifications},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [System.Object]
    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [System.Object]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object]
    ${From},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${ContentCharacterSetContainsWords},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${RejectMessageEnhancedStatusCode},

    [System.Object]
    ${SenderADAttributeMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${UseLegacyRegex},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${AttachmentContainsWords},

    [System.Object]
    ${ExceptIfSCLOver},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfBetweenMemberOf1},

    [System.Object]
    ${GenerateNotification},

    [System.Object]
    ${NotifySender},

    [System.Object]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderManagementRelationship},

    [System.Object]
    ${SetAuditSeverity},

    [System.Object]
    ${AttachmentPropertyContainsWords},

    [System.Object]
    ${ExceptIfAnyOfToHeader},

    [System.Object]
    ${ApplyRightsProtectionCustomizationTemplate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RouteMessageOutboundRequireTls},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${FromScope},

    [System.Object]
    ${AttachmentNameMatchesPatterns},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptIfAttachmentSizeOver},

    [System.Object]
    ${ExceptIfManagerForEvaluatedUser},

    [System.Object]
    ${RemoveOMEv2},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${AttachmentHasExecutableContent},

    [System.Object]
    ${RouteMessageOutboundConnector},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [System.Object]
    ${SenderManagementRelationship},

    [System.Object]
    ${ExceptIfBetweenMemberOf2},

    [System.Object]
    ${RedirectMessageTo},

    [System.Object]
    ${ApplyOME},

    [System.Object]
    ${AddManagerAsRecipientType},

    [System.Object]
    ${ExceptIfMessageSizeOver},

    [System.Object]
    ${RecipientInSenderList},

    [System.Object]
    ${SenderADAttributeContainsWords},

    [System.Object]
    ${MessageSizeOver},

    [System.Object]
    ${ExceptIfRecipientInSenderList},

    [System.Object]
    ${ExceptIfAttachmentHasExecutableContent},

    [System.Object]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object]
    ${RemoveOME},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RejectMessageReasonText},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${FromAddressContainsWords},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ApplyHtmlDisclaimerText},

    [System.Object]
    ${RecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${AnyOfToCcHeader},

    [System.Object]
    ${ExceptIfSentToScope},

    [System.Object]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object]
    ${ModerateMessageByManager},

    [System.Object]
    ${ADComparisonOperator},

    [System.Object]
    ${BetweenMemberOf2},

    [System.Object]
    ${SetHeaderName},

    [System.Object]
    ${AttachmentProcessingLimitExceeded},

    [System.Object]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderMatchesMessageHeader},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${Comments},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${ExceptIfADComparisonAttribute},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfADComparisonOperator},

    [System.Object]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object]
    ${Mode},

    [System.Object]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object]
    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDomainIs},

    [System.Object]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHasNoClassification},

    [System.Object]
    ${ExceptIfSenderIpRanges},

    [System.Object]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object]
    ${RecipientADAttributeContainsWords},

    [System.Object]
    ${AttachmentIsUnsupported},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${AttachmentExtensionMatchesWords},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${LogEventText},

    [System.Object]
    ${ExceptIfManagerAddresses},

    [System.Object]
    ${SenderInRecipientList},

    [System.Object]
    ${AttachmentMatchesPatterns},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${ManagerAddresses},

    [System.Object]
    ${SenderAddressLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CopyTo},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ApplyClassification},

    [System.Object]
    ${SetHeaderValue},

    [System.Object]
    ${Priority},

    [System.Object]
    ${AttachmentIsPasswordProtected},

    [System.Object]
    ${BetweenMemberOf1},

    [System.Object]
    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object]
    ${SmtpRejectMessageRejectText},

    [System.Object]
    ${AnyOfCcHeaderMemberOf},

    [System.Object]
    ${AnyOfToHeader},

    [System.Object]
    ${ExceptIfHasSenderOverride},

    [System.Object]
    ${SCLOver},

    [System.Object]
    ${PrependSubject},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${MessageTypeMatches},

    [System.Object]
    ${ExceptIfAttachmentPropertyContainsWords},

    [System.Object]
    ${StopRuleProcessing},

    [System.Object]
    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

}
function New-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SpeechEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${DTMFFallbackAutoAttendant},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [System.Object]
    ${UMDialPlan},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CallerIds},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallersCanInterruptGreeting},

    [System.Object]
    ${ScheduleStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TimeOfDay},

    [System.Object]
    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExtensionsDialed},

    [System.Object]
    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${CountryOrRegionCode},

    [System.Object]
    ${GenerateUMMailboxPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NumberOfDigitsInExtension},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FaxEnabled},

    [System.Object]
    ${AccessTelephoneNumbers},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DefaultLanguage},

    [System.Object]
    ${URIType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UMIPGateway},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PilotIdentifier},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UMDialPlan},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UnifiedGroup
{

param(
    [System.Object]
    ${MailboxRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [switch]
    ${ConvertClosedDlToPrivateGroup},

    [switch]
    ${ExoErrorAsWarning},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Classification},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${HiddenGroupMembershipEnabled},

    [switch]
    ${AutoSubscribeNewMembers},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExecutingUser},

    [switch]
    ${SuppressWarmupMessage},

    [switch]
    ${SubscriptionEnabled},

    [System.Object]
    ${DlIdentity},

    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Members},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${DeleteDlAfterMigration},

    [System.Object]
    ${Owner},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Notes},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Alias},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Language},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${DataEncryptionPolicy},

    [System.Object]
    ${AccessType},

    [System.Object]
    ${Name},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${SensitivityLabelId},

    [switch]
    ${AsJob})

}
function Preview-QuarantineMessage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Release-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ReportFalsePositive},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AllowSender},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ReleaseToAll},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncDeviceAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActiveSyncMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [switch]
    ${PrivateCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ATPEvaluation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OrganizationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditStubFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FolderName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AvailabilityAddressSpace
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-BlockedSenderAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Reason},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SenderAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CalendarEvents
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${QueryStartDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CancelOrganizedMeetings},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${QueryWindowInDays},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CompliancePolicyFileSyncNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CompliancePolicySyncNotification
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Remove-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DynamicDistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedContentFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InboxRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Mailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDelete},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Migration},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ClearAutoMapping},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${GroupMailbox},

    [switch]
    ${BypassMasterAccountSid},

    [switch]
    ${Deny},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SoftDeletedMailbox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ResetDefault},

    [System.Object]
    ${InheritanceType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailboxUserConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailContact
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MailUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PermanentlyDelete},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${IgnoreLegalHold},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MalwareFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Remove-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MobileDevice
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MobileDeviceMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OrganizationRelationship
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OwaMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Remove-PublicFolderClientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RecipientPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${Trustee},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RemoteDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ReportSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeDLP},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ReportSubmissionPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Remove-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionPolicyTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Subscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SyncMailPublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Xrm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TransportRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UMMailboxPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedGroupLinks
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LinkType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Links},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhotoType},

    [switch]
    ${ClearMailboxPhotoRecord},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Reset-ShadowCalendar
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Reset-TxpBlockStatus
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Resume-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SuspendWhenReadyToComplete},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Resume-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Revoke-ElevatedAccessAuthorization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Rotate-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${KeySize},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${StartIndex},

    [System.Object]
    ${ExternalAccess},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${IsSuccess},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-MailboxAuditLog
{

param(
    [switch]
    ${ShowDetails},

    [switch]
    ${IncludeInactiveMailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${LogonTypes},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Mailboxes},

    [System.Object]
    ${HasAttachments},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-MessageTrackingReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${BypassDelegateChecking},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${DoNotResolve},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${MessageEntryId},

    [System.Object]
    ${MessageId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-UnifiedAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${IPAddresses},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [switch]
    ${Formatted},

    [System.Object]
    ${FreeText},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SiteIds},

    [System.Object]
    ${SessionId},

    [System.Object]
    ${SessionCommand},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordType},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Send-TextMessagingVerificationCode
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AcceptedDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableNego2Authentication},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainType},

    [System.Object]
    ${MatchSubDomains},

    [System.Object]
    ${OutboundOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncDeviceAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccessLevel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncMailboxPolicy
{

param(
    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxInactivityTimeDeviceLock},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${DevicePasswordEnabled},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [System.Object]
    ${DevicePasswordHistory},

    [System.Object]
    ${AllowInternetSharing},

    [System.Object]
    ${MinDevicePasswordComplexCharacters},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DevicePasswordExpiration},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${MaxDevicePasswordFailedAttempts},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${AlphanumericDevicePasswordRequired},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${AllowSimpleDevicePassword},

    [System.Object]
    ${AttachmentsEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${IsDefaultPolicy},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${Name},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MinDevicePasswordLength},

    [System.Object]
    ${IrmEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ActiveSyncOrganizationSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowRMSSupportForUnenlightenedApps},

    [System.Object]
    ${UserMailInsert},

    [System.Object]
    ${DefaultAccessLevel},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtaNotificationMailInsert},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableMobileMailboxPolicyWhenCAInplace},

    [System.Object]
    ${AllowAccessForUnSupportedPlatform},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TenantAdminPreference},

    [System.Object]
    ${AdminMailRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AdminAuditLogConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UnifiedAuditLogIngestionEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AntiPhishPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableUnauthenticatedSender},

    [System.Object]
    ${EnableAntiSpoofEnforcement},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AuthenticationFailAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AntiPhishRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${AntiPhishPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-App
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DefaultStateForUser},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UserList},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${OrganizationApp},

    [System.Object]
    ${ProvidedTo},

    [switch]
    ${PrivateCatalog},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuthenticationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AllowBasicAuthRpc},

    [switch]
    ${AllowBasicAuthPop},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AllowBasicAuthSmtp},

    [switch]
    ${AllowBasicAuthMapi},

    [switch]
    ${AllowBasicAuthImap},

    [switch]
    ${AllowBasicAuthAutodiscover},

    [switch]
    ${AllowBasicAuthPowershell},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AllowBasicAuthActiveSync},

    [switch]
    ${AllowBasicAuthOfflineAddressBook},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${AllowBasicAuthReportingWebServices},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AllowBasicAuthOutlookService},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AllowBasicAuthWebServices},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AvailabilityConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OrgWideAccount},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CalendarNotification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DailyAgendaNotificationSendTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DailyAgendaNotification},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MeetingReminderSendDuringWorkHour},

    [System.Object]
    ${NextDays},

    [System.Object]
    ${CalendarUpdateNotification},

    [System.Object]
    ${MeetingReminderNotification},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${CalendarUpdateSendDuringWorkHour},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CalendarProcessing
{

param(
    [System.Object]
    ${MaximumConflictInstances},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${BookingType},

    [System.Object]
    ${ForwardRequestsToDelegates},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResourceDelegates},

    [System.Object]
    ${DeleteNonCalendarItems},

    [System.Object]
    ${DeleteComments},

    [System.Object]
    ${EnforceSchedulingHorizon},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableResponseDetails},

    [System.Object]
    ${RequestInPolicy},

    [System.Object]
    ${AutoRSVPConfiguration},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${AllowConflicts},

    [System.Object]
    ${AllRequestInPolicy},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BookInPolicy},

    [System.Object]
    ${ConflictPercentageAllowed},

    [System.Object]
    ${AutomateProcessing},

    [System.Object]
    ${AllRequestOutOfPolicy},

    [System.Object]
    ${AddNewRequestsTentatively},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllBookInPolicy},

    [System.Object]
    ${ProcessExternalMeetingMessages},

    [System.Object]
    ${DeleteAttachments},

    [System.Object]
    ${ScheduleOnlyDuringWorkHours},

    [System.Object]
    ${RemovePrivateProperty},

    [System.Object]
    ${AdditionalResponse},

    [System.Object]
    ${TentativePendingApproval},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaximumDurationInMinutes},

    [System.Object]
    ${OrganizerInfo},

    [System.Object]
    ${RequestOutOfPolicy},

    [System.Object]
    ${RemoveOldMeetingMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BookingWindowInDays},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AddAdditionalResponse},

    [System.Object]
    ${RemoveForwardedMeetingNotifications},

    [System.Object]
    ${DeleteSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowRecurringMeetings},

    [System.Object]
    ${AddOrganizerToSubject},

    [switch]
    ${AsJob})

}
function Set-CASMailbox
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsOptimizedForAccessibility},

    [System.Object]
    ${ImapEnabled},

    [System.Object]
    ${ImapSuppressReadReceipt},

    [System.Object]
    ${ActiveSyncSuppressReadReceipt},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EwsBlockList},

    [System.Object]
    ${EwsAllowEntourage},

    [System.Object]
    ${OwaMailboxPolicy},

    [System.Object]
    ${PopUseProtocolDefaults},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SmtpClientAuthenticationDisabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PopForceICalForCalendarRetrievalOption},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ImapForceICalForCalendarRetrievalOption},

    [System.Object]
    ${ShowGalAsDefaultView},

    [System.Object]
    ${OutlookMobileEnabled},

    [System.Object]
    ${ActiveSyncBlockedDeviceIDs},

    [System.Object]
    ${MAPIEnabled},

    [System.Object]
    ${EwsAllowOutlook},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PopEnabled},

    [System.Object]
    ${ActiveSyncAllowedDeviceIDs},

    [System.Object]
    ${EwsEnabled},

    [System.Object]
    ${EwsAllowMacOutlook},

    [System.Object]
    ${EwsApplicationAccessPolicy},

    [System.Object]
    ${PublicFolderClientAccess},

    [System.Object]
    ${OWAEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ActiveSyncEnabled},

    [System.Object]
    ${ActiveSyncMailboxPolicy},

    [System.Object]
    ${UniversalOutlookEnabled},

    [System.Object]
    ${ImapUseProtocolDefaults},

    [System.Object]
    ${ActiveSyncDebugLogging},

    [System.Object]
    ${OWAforDevicesEnabled},

    [System.Object]
    ${ImapMessagesRetrievalMimeFormat},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MacOutlookEnabled},

    [System.Object]
    ${PopSuppressReadReceipt},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PopMessagesRetrievalMimeFormat},

    [switch]
    ${AsJob})

}
function set-CASMailboxPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ImapEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OwaMailboxPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PopEnabled},

    [System.Object]
    ${ActiveSyncEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ClassificationRuleCollection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ClientAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UsernameMatchesAnyOfPatterns},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Action},

    [System.Object]
    ${AnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${ExceptAnyOfClientIPAddressesOrRanges},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UserRecipientFilter},

    [System.Object]
    ${ExceptAnyOfProtocols},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptUsernameMatchesAnyOfPatterns},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AnyOfAuthenticationTypes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AnyOfProtocols},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptAnyOfAuthenticationTypes},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Scope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-Clutter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ConnectSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RequestToken},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OAuthVerifier},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequestSecret},

    [switch]
    ${LinkedIn},

    [System.Object]
    ${RedirectUri},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Contact
{

param(
    [System.Object]
    ${Company},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Office},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${OtherTelephone},

    [System.Object]
    ${Pager},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Fax},

    [System.Object]
    ${PostOfficeBox},

    [System.Object]
    ${LastName},

    [System.Object]
    ${UMCallingLineIds},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SeniorityIndex},

    [System.Object]
    ${City},

    [System.Object]
    ${TelephoneAssistant},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${Title},

    [System.Object]
    ${MobilePhone},

    [System.Object]
    ${AssistantName},

    [System.Object]
    ${CreateDTMFMap},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Manager},

    [System.Object]
    ${HomePhone},

    [System.Object]
    ${OtherFax},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Department},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtherHomePhone},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${Notes},

    [System.Object]
    ${Name},

    [System.Object]
    ${GeoCoordinates},

    [System.Object]
    ${StreetAddress},

    [System.Object]
    ${PostalCode},

    [switch]
    ${AsJob})

}
function Set-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${PermanentDataPurgeRequested},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermanentDataPurgeReason},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${PermanentDataPurgeContact},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DistributionGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${SimpleDisplayName},

    [switch]
    ${IgnoreNamingPolicy},

    [System.Object]
    ${ReportToManagerEnabled},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [switch]
    ${ResetMigrationToUnifiedGroup},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${BypassNestedModerationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${MemberDepartRestriction},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${ReportToOriginatorEnabled},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${ManagedBy},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${MemberJoinRestriction},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [switch]
    ${RoomList},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-DkimSigningConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BodyCanonicalization},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${PublishTxtRecords},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HeaderCanonicalization},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${Mode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DynamicDistributionGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${ConditionalCustomAttribute6},

    [System.Object]
    ${ModerationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${ConditionalCustomAttribute7},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${ConditionalCustomAttribute2},

    [System.Object]
    ${ConditionalCustomAttribute1},

    [System.Object]
    ${PhoneticDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConditionalCustomAttribute9},

    [System.Object]
    ${ConditionalCustomAttribute4},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${ConditionalCustomAttribute13},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ReportToOriginatorEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${IncludedRecipients},

    [System.Object]
    ${ConditionalCustomAttribute12},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${ReportToManagerEnabled},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${ConditionalCustomAttribute14},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${ManagedBy},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${Notes},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${RecipientFilter},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${SendOofMessageToOriginatorEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConditionalCompany},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ConditionalStateOrProvince},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConditionalCustomAttribute15},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ConditionalCustomAttribute10},

    [System.Object]
    ${ConditionalCustomAttribute5},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${ConditionalCustomAttribute8},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${RecipientContainer},

    [System.Object]
    ${CustomAttribute11},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${ConditionalCustomAttribute3},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ConditionalDepartment},

    [System.Object]
    ${DirectMembershipOnly},

    [System.Object]
    ${ConditionalCustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ElevatedAccessRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('Identity')]
    [System.Object]
    ${RequestId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ApprovalDecision')]
    [System.Object]
    ${Decision},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RequestContext},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-EmailAddressPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnabledEmailAddressTemplates},

    [switch]
    ${ForceUpgrade},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnabledPrimarySMTPAddressTemplate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FederatedOrganizationIdentifier
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountNamespace},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DelegationFederationTrust},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DefaultDomain},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FocusedInbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FocusedInboxOn},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${IsHierarchicalGroup},

    [System.Object]
    ${DisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Universal},

    [System.Object]
    ${Notes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Name},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [System.Object]
    ${SeniorityIndex},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ManagedBy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WindowsEmailAddress},

    [switch]
    ${AsJob})

}
function Set-GroupMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${Language},

    [switch]
    ${AutoSubscribeNewGroupMembers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedConnectionFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ConfigurationXmlRaw},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableSafeList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${IPBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IPAllowList},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedContentFilterPolicy
{

param(
    [System.Object]
    ${HighConfidenceSpamAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${QuarantineRetentionPeriod},

    [System.Object]
    ${MarkAsSpamWebBugsInHtml},

    [System.Object]
    ${EndUserSpamNotificationCustomFromName},

    [System.Object]
    ${MarkAsSpamFromAddressAuthFail},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EndUserSpamNotificationCustomFromAddress},

    [System.Object]
    ${IncreaseScoreWithRedirectToOtherPort},

    [System.Object]
    ${BulkThreshold},

    [System.Object]
    ${EnableLanguageBlockList},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PhishZapEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndUserSpamNotificationCustomSubject},

    [System.Object]
    ${MarkAsSpamSensitiveWordList},

    [System.Object]
    ${MarkAsSpamFormTagsInHtml},

    [System.Object]
    ${MarkAsSpamNdrBackscatter},

    [System.Object]
    ${AddXHeaderValue},

    [System.Object]
    ${BulkSpamAction},

    [System.Object]
    ${ModifySubjectValue},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${IncreaseScoreWithImageLinks},

    [System.Object]
    ${MarkAsSpamEmptyMessages},

    [System.Object]
    ${MarkAsSpamSpfRecordHardFail},

    [System.Object]
    ${PhishSpamAction},

    [System.Object]
    ${HighConfidencePhishAction},

    [System.Object]
    ${MarkAsSpamJavaScriptInHtml},

    [System.Object]
    ${EnableRegionBlockList},

    [System.Object]
    ${EnableEndUserSpamNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TestModeAction},

    [System.Object]
    ${RedirectToRecipients},

    [System.Object]
    ${AllowedSenderDomains},

    [System.Object]
    ${MarkAsSpamObjectTagsInHtml},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MarkAsSpamFramesInHtml},

    [System.Object]
    ${TestModeBccToRecipients},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MarkAsSpamEmbedTagsInHtml},

    [System.Object]
    ${EndUserSpamNotificationLanguage},

    [System.Object]
    ${EndUserSpamNotificationLimit},

    [System.Object]
    ${SpamAction},

    [System.Object]
    ${InlineSafetyTipsEnabled},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SpamZapEnabled},

    [System.Object]
    ${BlockedSenders},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowedSenders},

    [System.Object]
    ${LanguageBlockList},

    [System.Object]
    ${RegionBlockList},

    [System.Object]
    ${IncreaseScoreWithBizOrInfoUrls},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EndUserSpamNotificationFrequency},

    [System.Object]
    ${IncreaseScoreWithNumericIps},

    [System.Object]
    ${BlockedSenderDomains},

    [System.Object]
    ${MarkAsSpamBulkMail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DownloadLink},

    [switch]
    ${AsJob})

}
function Set-HostedContentFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${HostedContentFilterPolicy},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedOutboundSpamFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AdminDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BccSuspiciousOutboundAdditionalRecipients},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NotifyOutboundSpamRecipients},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientLimitPerDay},

    [System.Object]
    ${ActionWhenThresholdReached},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyOutboundSpam},

    [System.Object]
    ${BccSuspiciousOutboundMail},

    [System.Object]
    ${RecipientLimitInternalPerHour},

    [System.Object]
    ${RecipientLimitExternalPerHour},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HostedOutboundSpamFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfFrom},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SenderDomainIs},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HostedOutboundSpamFilterPolicy},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${From},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HotmailSubscription
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Password},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HybridMailflow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CertificateSubject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CentralizedTransportEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OnPremisesFQDN},

    [System.Object]
    ${SecureMailEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OutboundDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundIPs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ImapSubscription
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ResendVerification},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${IncomingServer},

    [System.Object]
    ${IncomingUserName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncomingSecurity},

    [System.Object]
    ${IncomingPort},

    [System.Object]
    ${IncomingPassword},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ValidateSecret},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncomingAuth},

    [switch]
    ${AsJob})

}
function Set-InboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictDomainsToIPAddresses},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EFTestMode},

    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EFSkipMailGateway},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TlsSenderCertificateName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ScanAndDropRecipients},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AssociatedAcceptedDomains},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RequireTls},

    [System.Object]
    ${SenderDomains},

    [System.Object]
    ${SenderIPAddresses},

    [System.Object]
    ${EFSkipLastIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EFUsers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RestrictDomainsToCertificate},

    [System.Object]
    ${EFSkipIPs},

    [System.Object]
    ${TreatMessagesAsInternal},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function Set-InboxRule
{

param(
    [System.Object]
    ${ExceptIfMyNameNotInToBox},

    [System.Object]
    ${ExceptIfMyNameInToOrCcBox},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PinMessage},

    [System.Object]
    ${WithinSizeRangeMaximum},

    [System.Object]
    ${ReceivedBeforeDate},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${ExceptIfFromSubscription},

    [System.Object]
    ${ExceptIfWithinSizeRangeMaximum},

    [System.Object]
    ${WithinSizeRangeMinimum},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MyNameInToOrCcBox},

    [System.Object]
    ${ExceptIfReceivedBeforeDate},

    [System.Object]
    ${Mailbox},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${RedirectTo},

    [System.Object]
    ${ReceivedAfterDate},

    [System.Object]
    ${ForwardTo},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExceptIfReceivedAfterDate},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${ExceptIfSentOnlyToMe},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfHasAttachment},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${ExceptIfMyNameInToBox},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AlwaysDeleteOutlookRulesBlob},

    [System.Object]
    ${From},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${FlaggedForAction},

    [System.Object]
    ${WithSensitivity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CopyToFolder},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${MarkImportance},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ApplyCategory},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HasAttachment},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ExceptIfFlaggedForAction},

    [System.Object]
    ${FromSubscription},

    [System.Object]
    ${BodyContainsWords},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopProcessingRules},

    [System.Object]
    ${DeleteSystemCategory},

    [System.Object]
    ${ExceptIfWithinSizeRangeMinimum},

    [System.Object]
    ${MessageTypeMatches},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ApplySystemCategory},

    [System.Object]
    ${SendTextMessageNotificationTo},

    [System.Object]
    ${MarkAsRead},

    [System.Object]
    ${MoveToFolder},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${MyNameInCcBox},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${MyNameInToBox},

    [System.Object]
    ${ExceptIfSentTo},

    [switch]
    ${Force},

    [System.Object]
    ${SentOnlyToMe},

    [System.Object]
    ${Name},

    [System.Object]
    ${ForwardAsAttachmentTo},

    [System.Object]
    ${ExceptIfBodyContainsWords},

    [System.Object]
    ${ExceptIfMyNameInCcBox},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${MyNameNotInToBox},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExceptIfWithSensitivity},

    [System.Object]
    ${ExceptIfHasClassification},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-IntraOrganizationConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TargetAddressDomains},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DiscoveryEndpoint},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-IRMConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TransportDecryptionSetting},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RMSOnlineKeySharingLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SimplifiedClientAccessDoNotForwardDisabled},

    [switch]
    ${Force},

    [System.Object]
    ${AzureRMSLicensingEnabled},

    [System.Object]
    ${EnablePdfEncryption},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DecryptAttachmentForEncryptOnly},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${InternalLicensingEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EDiscoverySuperUserEnabled},

    [System.Object]
    ${JournalReportDecryptionEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AutomaticServiceUpdateEnabled},

    [System.Object]
    ${SimplifiedClientAccessEncryptOnlyDisabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${SearchEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${LicensingLocation},

    [System.Object]
    ${SimplifiedClientAccessEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-JournalRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Scope},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${JournalEmailAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-LabelProperties
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ApplyToUsers},

    [System.Object]
    ${GrantAccessToNoUsers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-LinkedUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CertificateSubject},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Mailbox
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${AuditOwner},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [switch]
    ${GroupMailbox},

    [System.Object]
    ${UserCertificate},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${RetentionUrl},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [switch]
    ${RecalculateInactiveMailbox},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${ProhibitSendReceiveQuota},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${RoomMailboxPassword},

    [System.Object]
    ${MessageRecallProcessingEnabled},

    [System.Object]
    ${ElcProcessingDisabled},

    [System.Object]
    ${ExcludeFromOrgHolds},

    [System.Object]
    ${Type},

    [System.Object]
    ${MailTip},

    [System.Object]
    ${IssueWarningQuota},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AuditLogAgeLimit},

    [System.Object]
    ${UserSMimeCertificate},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${SingleItemRecoveryEnabled},

    [switch]
    ${RemoveDisabledArchive},

    [System.Object]
    ${Languages},

    [System.Object]
    ${UseDatabaseQuotaDefaults},

    [System.Object]
    ${JournalArchiveAddress},

    [System.Object]
    ${LitigationHoldDuration},

    [System.Object]
    ${ModerationEnabled},

    [switch]
    ${InactiveMailbox},

    [System.Object]
    ${RetentionComment},

    [System.Object]
    ${MaxReceiveSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MessageCopyForSendOnBehalfEnabled},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${LitigationHoldEnabled},

    [switch]
    ${UpdateEnforcedTimestamp},

    [System.Object]
    ${ImmutableId},

    [switch]
    ${PublicFolder},

    [System.Object]
    ${UseDatabaseRetentionDefaults},

    [System.Object]
    ${SharingPolicy},

    [System.Object]
    ${RemoveOrphanedHolds},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${RulesQuota},

    [System.Object]
    ${Alias},

    [System.Object]
    ${EnforcedTimestamps},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${ResourceCustom},

    [System.Object]
    ${DefaultPublicFolderMailbox},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${ProhibitSendQuota},

    [System.Object]
    ${DefaultAuditSet},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${CalendarRepairDisabled},

    [System.Object]
    ${StsRefreshTokensValidFrom},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${AddressBookPolicy},

    [System.Object]
    ${MailboxRegion},

    [System.Object]
    ${NonCompliantDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ResourceCapacity},

    [System.Object]
    ${LitigationHoldOwner},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${AccountDisabled},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${AuditDelegate},

    [System.Object]
    ${CustomAttribute14},

    [switch]
    ${ApplyMandatoryProperties},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${LitigationHoldDate},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableRoomMailboxAccount},

    [System.Object]
    ${RetentionPolicy},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [System.Object]
    ${MessageTrackingReadStatusEnabled},

    [System.Object]
    ${AuditAdmin},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${RetentionHoldEnabled},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CustomAttribute2},

    [switch]
    ${RemoveDelayHoldApplied},

    [System.Object]
    ${ExternalOofOptions},

    [System.Object]
    ${ImListMigrationCompleted},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${EndDateForRetentionHold},

    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${IsExcludedFromServingHierarchy},

    [System.Object]
    ${Office},

    [System.Object]
    ${MaxSendSize},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RecipientLimits},

    [System.Object]
    ${MessageCopyForSentAsEnabled},

    [switch]
    ${ProvisionedForOfficeGraph},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CalendarVersionStoreDisabled},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${ArchiveName},

    [System.Object]
    ${StartDateForRetentionHold},

    [System.Object]
    ${AuditEnabled},

    [System.Object]
    ${Password},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ForwardingAddress},

    [switch]
    ${ExcludeFromAllOrgHolds},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [System.Object]
    ${ForwardingSmtpAddress},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxAuditBypassAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AuditBypassEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxAutoReplyConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${DeclineMeetingMessage},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExternalAudience},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DeclineEventsForScheduledOOF},

    [System.Object]
    ${AutoDeclineFutureRequestsWhenOOF},

    [System.Object]
    ${AutoReplyState},

    [System.Object]
    ${EventsToDeleteIDs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${StartTime},

    [System.Object]
    ${CreateOOFEvent},

    [System.Object]
    ${OOFEventSubject},

    [System.Object]
    ${DeclineAllEventsForScheduledOOF},

    [System.Object]
    ${EndTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${InternalMessage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExternalMessage},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxCalendarConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EntertainmentEventsFromEmailEnabled},

    [System.Object]
    ${ConversationalSchedulingEnabled},

    [System.Object]
    ${HotelEventsFromEmailEnabled},

    [System.Object]
    ${SkipAgendaMailOnFreeDays},

    [System.Object]
    ${DiningEventsFromEmailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CreateEventsFromEmailAsPrivate},

    [System.Object]
    ${WeatherLocationBookmark},

    [System.Object]
    ${CalendarFeedsPreferredLanguage},

    [System.Object]
    ${PackageDeliveryEventsFromEmailEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RentalCarEventsFromEmailEnabled},

    [System.Object]
    ${DefaultMeetingDuration},

    [System.Object]
    ${ReminderSoundEnabled},

    [System.Object]
    ${WorkingHoursEndTime},

    [System.Object]
    ${AgendaMailIntroductionEnabled},

    [System.Object]
    ${InvoiceEventsFromEmailEnabled},

    [System.Object]
    ${UseBrightCalendarColorThemeInOwa},

    [System.Object]
    ${DefaultReminderTime},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${WorkDays},

    [System.Object]
    ${CalendarFeedsPreferredRegion},

    [System.Object]
    ${ServiceAppointmentEventsFromEmailEnabled},

    [System.Object]
    ${ShowWeekNumbers},

    [System.Object]
    ${RemindersEnabled},

    [System.Object]
    ${WeekStartDay},

    [System.Object]
    ${FirstWeekOfYear},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${WorkingHoursStartTime},

    [System.Object]
    ${CalendarFeedsRootPageId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DailyAgendaMailSchedule},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AddOnlineMeetingToAllEvents},

    [System.Object]
    ${WeatherLocations},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TimeIncrement},

    [System.Object]
    ${WorkingHoursTimeZone},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EventsFromEmailEnabled},

    [System.Object]
    ${WeatherUnit},

    [System.Object]
    ${FlightEventsFromEmailEnabled},

    [System.Object]
    ${WeatherEnabled},

    [System.Object]
    ${AgendaMailEnabled},

    [System.Object]
    ${AgendaPaneEnabled},

    [switch]
    ${AsJob})

}
function Set-MailboxCalendarFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DetailLevel},

    [switch]
    ${UseHttps},

    [switch]
    ${SetAsSharingSource},

    [System.Object]
    ${SharedCalendarSyncStartDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchableUrlEnabled},

    [System.Object]
    ${PublishEnabled},

    [System.Object]
    ${PublishDateRangeTo},

    [System.Object]
    ${PublishDateRangeFrom},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ResetUrl},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxFolderPermission
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccessRights},

    [System.Object]
    ${SharingPermissionFlags},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SendNotificationToUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxJunkEmailConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TrustedSendersAndDomains},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TrustedListsOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${BlockedSendersAndDomains},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContactsTrusted},

    [System.Object]
    ${TrustedRecipientsAndDomains},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxMessageConfiguration
{

param(
    [System.Object]
    ${SendAddressDefault},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AutoAddSignature},

    [System.Object]
    ${NewItemNotification},

    [System.Object]
    ${SignatureText},

    [System.Object]
    ${ShowPreviewTextInListView},

    [System.Object]
    ${ShowReadingPaneOnFirstLoad},

    [System.Object]
    ${Identity},

    [System.Object]
    ${LinkPreviewEnabled},

    [System.Object]
    ${AfterMoveOrDeleteBehavior},

    [System.Object]
    ${DefaultFontColor},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${GlobalReadingPanePosition},

    [System.Object]
    ${PreviewMarkAsReadDelaytime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AlwaysShowFrom},

    [System.Object]
    ${ShowSenderOnTopInListView},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IsReplyAllTheDefaultResponse},

    [System.Object]
    ${SignatureHtml},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${UseDefaultSignatureOnMobile},

    [System.Object]
    ${DefaultFontName},

    [System.Object]
    ${NavigationPaneViewOption},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EmailComposeMode},

    [System.Object]
    ${AutoAddSignatureOnReply},

    [System.Object]
    ${HideDeletedItems},

    [System.Object]
    ${ShowConversationAsTree},

    [System.Object]
    ${EchoGroupMessageBackToSubscribedSender},

    [System.Object]
    ${CheckForForgottenAttachments},

    [System.Object]
    ${IsFavoritesFolderTreeCollapsed},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SignatureTextOnMobile},

    [System.Object]
    ${IsMailRootFolderTreeCollapsed},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConversationSortOrder},

    [System.Object]
    ${ShowUpNext},

    [System.Object]
    ${PreferAccessibleContent},

    [System.Object]
    ${EmptyDeletedItemsOnLogoff},

    [System.Object]
    ${ReadReceiptResponse},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DefaultFontSize},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MailFolderPaneExpanded},

    [System.Object]
    ${AlwaysShowBcc},

    [System.Object]
    ${AutoAddSignatureOnMobile},

    [System.Object]
    ${PreviewMarkAsReadBehavior},

    [System.Object]
    ${DefaultFontFlags},

    [System.Object]
    ${DefaultFormat},

    [switch]
    ${AsJob})

}
function Set-MailboxPlan
{

param(
    [System.Object]
    ${RoleAssignmentPolicy},

    [System.Object]
    ${IssueWarningQuota},

    [switch]
    ${Force},

    [System.Object]
    ${MaxSendSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RetentionPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProhibitSendQuota},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${ProhibitSendReceiveQuota},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientLimits},

    [System.Object]
    ${MaxReceiveSize},

    [switch]
    ${IsDefault},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-MailboxRegionalConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${DateFormat},

    [System.Object]
    ${TimeFormat},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${LocalizeDefaultFolderName},

    [System.Object]
    ${TimeZone},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Language},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxRestoreRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RequestExpiryInterval},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${LargeItemLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BatchName},

    [switch]
    ${RehomeRequest},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${SkippedItemApprovalTime},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${InternalFlags},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${AcceptLargeDataLoss},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${AsJob})

}
function Set-MailboxSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${InPlaceHoldEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ItemHoldPeriod},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SourceMailboxes},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailboxSpellingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${DictionaryLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CheckBeforeSend},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IgnoreMixedDigits},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IgnoreUppercase},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MailContact
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${MessageBodyFormat},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${UMDtmfMap},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UseMapiRichTextFormat},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailPublicFolder
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${CustomAttribute14},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeliverToMailboxAndForward},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${PhoneticDisplayName},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${MaxReceiveSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EmailAddressPolicyEnabled},

    [System.Object]
    ${CustomAttribute15},

    [switch]
    ${IgnoreDefaultScope},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${IgnoreMissingFolderLink},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${Contacts},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${EntryId},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${OnPremisesObjectId},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${ForwardingAddress},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MailUser
{

param(
    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${RejectMessagesFromDLMembers},

    [System.Object]
    ${ModerationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${UserCertificate},

    [System.Object]
    ${Password},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute8},

    [System.Object]
    ${CustomAttribute5},

    [System.Object]
    ${SimpleDisplayName},

    [System.Object]
    ${ExchangeGuid},

    [System.Object]
    ${ExcludeFromOrgHolds},

    [System.Object]
    ${MailboxRegion},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PrimarySmtpAddress},

    [System.Object]
    ${UserSMimeCertificate},

    [System.Object]
    ${AcceptMessagesOnlyFrom},

    [System.Object]
    ${JournalArchiveAddress},

    [System.Object]
    ${MessageBodyFormat},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${FederatedIdentity},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${RemoveOrphanedHolds},

    [System.Object]
    ${RejectMessagesFrom},

    [System.Object]
    ${Alias},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BypassModerationFromSendersOrMembers},

    [System.Object]
    ${AcceptMessagesOnlyFromDLMembers},

    [System.Object]
    ${CustomAttribute1},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${UMDtmfMap},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MessageFormat},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [switch]
    ${RecalculateInactiveMailUser},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UsePreferMessageFormat},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MicrosoftOnlineServicesID},

    [switch]
    ${RemoveDelayReleaseHoldApplied},

    [System.Object]
    ${ImmutableId},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [switch]
    ${RemoveDelayHoldApplied},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UseMapiRichTextFormat},

    [System.Object]
    ${SecondaryDialPlan},

    [System.Object]
    ${SendModerationNotifications},

    [System.Object]
    ${ExternalEmailAddress},

    [System.Object]
    ${CreateDTMFMap},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SecondaryAddress},

    [System.Object]
    ${MailTipTranslations},

    [System.Object]
    ${CustomAttribute7},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${MacAttachmentFormat},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [switch]
    ${RemoveComplianceTagHoldApplied},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MalwareFilterPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${MakeDefault},

    [System.Object]
    ${CustomFromName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AdminDisplayName},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Action},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomExternalBody},

    [System.Object]
    ${EnableExternalSenderNotifications},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomNotifications},

    [System.Object]
    ${EnableInternalSenderNotifications},

    [System.Object]
    ${EnableExternalSenderAdminNotifications},

    [System.Object]
    ${InternalSenderAdminAddress},

    [System.Object]
    ${CustomAlertText},

    [System.Object]
    ${FileTypes},

    [System.Object]
    ${EnableInternalSenderAdminNotifications},

    [System.Object]
    ${CustomFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomExternalSubject},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ZapEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalSenderAdminAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CustomInternalSubject},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CustomInternalBody},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableFileFilter},

    [switch]
    ${AsJob})

}
function Set-MalwareFilterRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToMemberOf},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Comments},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${MalwareFilterPolicy},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementRoleAssignment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CustomRecipientWriteScope},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RecipientAdministrativeUnitScope},

    [System.Object]
    ${ExclusiveRecipientWriteScope},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RecipientRelativeWriteScope},

    [System.Object]
    ${RecipientOrganizationalUnitScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementRoleEntry
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Parameters},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${RemoveParameter},

    [switch]
    ${AddParameter},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ManagementScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RecipientRestrictionFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecipientRoot},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MessageClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientDescription},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PermissionMenuVisible},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ClassificationID},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDescription},

    [System.Object]
    ${DisplayPrecedence},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RetainClassificationEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MigrationBatch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MoveOptions},

    [switch]
    ${Update},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationEmails},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SkipReports},

    [switch]
    ${ApproveSkippedItems},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${SyncNow},

    [System.Object]
    ${ReportInterval},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${CompleteAfter},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BadItemLimit},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkipMerging},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowUnknownColumnsInCsv},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${LargeItemLimit},

    [switch]
    ${AsJob})

}
function Set-MigrationConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MigrationEndpoint
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AcceptUntrustedCertificates},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MaxConcurrentMigrations},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Port},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Partition},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${NspiServer},

    [System.Object]
    ${RpcProxyServer},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [switch]
    ${SkipVerification},

    [System.Object]
    ${MaxConcurrentIncrementalSyncs},

    [System.Object]
    ${Credentials},

    [switch]
    ${AsJob})

}
function Set-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ApproveSkippedItems},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${CompleteAfter},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StartAfter},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${SyncNow},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-MobileDeviceMailboxPolicy
{

param(
    [System.Object]
    ${AllowMicrosoftPushNotifications},

    [System.Object]
    ${AllowUnsignedApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowUnsignedInstallationPackages},

    [System.Object]
    ${MaxPasswordFailedAttempts},

    [System.Object]
    ${AllowExternalDeviceManagement},

    [System.Object]
    ${RequireDeviceEncryption},

    [System.Object]
    ${RequireSignedSMIMEMessages},

    [System.Object]
    ${AllowStorageCard},

    [System.Object]
    ${AllowIrDA},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PasswordHistory},

    [System.Object]
    ${AllowNonProvisionableDevices},

    [System.Object]
    ${UnapprovedInROMApplicationList},

    [System.Object]
    ${RequireEncryptedSMIMEMessages},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowInternetSharing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${PasswordEnabled},

    [System.Object]
    ${MaxEmailHTMLBodyTruncationSize},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MinPasswordComplexCharacters},

    [System.Object]
    ${UNCAccessEnabled},

    [System.Object]
    ${AllowCamera},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IrmEnabled},

    [System.Object]
    ${PasswordExpiration},

    [System.Object]
    ${AllowBrowser},

    [System.Object]
    ${MaxEmailAgeFilter},

    [System.Object]
    ${RequireSignedSMIMEAlgorithm},

    [System.Object]
    ${RequireManualSyncWhenRoaming},

    [System.Object]
    ${AlphanumericPasswordRequired},

    [System.Object]
    ${AllowSMIMEEncryptionAlgorithmNegotiation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MaxEmailBodyTruncationSize},

    [System.Object]
    ${AllowBluetooth},

    [System.Object]
    ${RequireEncryptionSMIMEAlgorithm},

    [System.Object]
    ${DevicePolicyRefreshInterval},

    [System.Object]
    ${AllowGooglePushNotifications},

    [System.Object]
    ${AllowMobileOTAUpdate},

    [System.Object]
    ${Name},

    [System.Object]
    ${MaxAttachmentSize},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowConsumerEmail},

    [System.Object]
    ${AllowDesktopSync},

    [System.Object]
    ${RequireStorageCardEncryption},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AttachmentsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowSMIMESoftCerts},

    [System.Object]
    ${AllowRemoteDesktop},

    [System.Object]
    ${PasswordRecoveryEnabled},

    [System.Object]
    ${MaxCalendarAgeFilter},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowApplePushNotifications},

    [System.Object]
    ${AllowPOPIMAPEmail},

    [System.Object]
    ${IsDefault},

    [System.Object]
    ${MaxInactivityTimeLock},

    [System.Object]
    ${AllowWiFi},

    [System.Object]
    ${ApprovedApplicationList},

    [System.Object]
    ${AllowTextMessaging},

    [System.Object]
    ${WSSAccessEnabled},

    [System.Object]
    ${DeviceEncryptionEnabled},

    [System.Object]
    ${MinPasswordLength},

    [System.Object]
    ${AllowHTMLEmail},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-MoveRequest
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [System.Object]
    ${ProxyToMailbox},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SuspendWhenReadyToComplete},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RequestExpiryInterval},

    [System.Object]
    ${PreventCompletion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkipMoving},

    [System.Object]
    ${RemoteHostName},

    [System.Object]
    ${CompleteAfter},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MoveOptions},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${StartAfter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${RemoteGlobalCatalog},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoteCredential},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [switch]
    ${AsJob})

}
function Set-Notification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationEmails},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OMEConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ReadButtonText},

    [System.Object]
    ${PortalText},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Image},

    [System.Object]
    ${OTPEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BackgroundColor},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DisclaimerText},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SocialIdSignIn},

    [System.Object]
    ${IntroductionText},

    [System.Object]
    ${EmailText},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OnPremisesOrganization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${InboundConnector},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OutboundConnector},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${OrganizationName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationRelationship},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${HybridDomains},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Organization
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${UnifiedAuditLogIngestionEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OrganizationConfig
{

param(
    [System.Object]
    ${RequiredCharsetCoverage},

    [System.Object]
    ${ConnectorsEnabledForYammer},

    [System.Object]
    ${PublicFolderShowClientControl},

    [System.Object]
    ${MailTipsGroupMetricsEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PublicFoldersEnabled},

    [System.Object]
    ${ReadTrackingEnabled},

    [System.Object]
    ${ExchangeNotificationEnabled},

    [System.Object]
    ${DefaultPublicFolderDeletedItemRetention},

    [System.Object]
    ${MailTipsExternalRecipientsTipsEnabled},

    [System.Object]
    ${FocusedInboxOn},

    [System.Object]
    ${EwsApplicationAccessPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OAuth2ClientProfileEnabled},

    [System.Object]
    ${PreferredInternetCodePageForShiftJis},

    [System.Object]
    ${ElcProcessingDisabled},

    [System.Object]
    ${UnblockUnsafeSenderPromptEnabled},

    [System.Object]
    ${AutoEnableArchiveMailbox},

    [System.Object]
    ${RefreshSessionEnabled},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutEnabled},

    [System.Object]
    ${SmtpActionableMessagesEnabled},

    [System.Object]
    ${ConnectorsEnabledForTeams},

    [System.Object]
    ${ComplianceMLBgdCrawlEnabled},

    [System.Object]
    ${MailTipsAllTipsEnabled},

    [System.Object]
    ${RemotePublicFolderMailboxes},

    [System.Object]
    ${DefaultPublicFolderMovedItemRetention},

    [System.Object]
    ${EwsAllowEntourage},

    [System.Object]
    ${ExternalCloudAccessEnabled},

    [System.Object]
    ${DefaultPublicFolderProhibitPostQuota},

    [System.Object]
    ${ExchangeNotificationRecipients},

    [System.Object]
    ${DirectReportsGroupAutoCreationEnabled},

    [System.Object]
    ${LinkPreviewEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OutlookPayEnabled},

    [System.Object]
    ${OutlookMobileGCCRestrictionsEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${WebPushNotificationsDisabled},

    [System.Object]
    ${ConnectorsEnabledForOutlook},

    [System.Object]
    ${DefaultAuthenticationPolicy},

    [System.Object]
    ${AuditDisabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IsAgendaMailEnabled},

    [System.Object]
    ${EwsEnabled},

    [System.Object]
    ${PerTenantSwitchToESTSEnabled},

    [System.Object]
    ${LeanPopoutEnabled},

    [System.Object]
    ${DistributionGroupNameBlockedWordsList},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AsyncSendEnabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ConnectorsEnabledForSharepoint},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutWithSingleSignOnEnabled},

    [System.Object]
    ${HierarchicalAddressBookRoot},

    [System.Object]
    ${WebSuggestedRepliesDisabled},

    [System.Object]
    ${DefaultPublicFolderAgeLimit},

    [System.Object]
    ${VisibleMeetingUpdateProperties},

    [System.Object]
    ${MailTipsLargeAudienceThreshold},

    [System.Object]
    ${DefaultGroupAccessType},

    [System.Object]
    ${CalendarVersionStoreEnabled},

    [System.Object]
    ${BookingsPaymentsEnabled},

    [System.Object]
    ${DistributionGroupNamingPolicy},

    [System.Object]
    ${PublicComputersDetectionEnabled},

    [System.Object]
    ${BookingsSocialSharingRestricted},

    [System.Object]
    ${EwsBlockList},

    [System.Object]
    ${MatchSenderOrganizerProperties},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DistributionGroupDefaultOU},

    [System.Object]
    ${ConnectorsActionableMessagesEnabled},

    [System.Object]
    ${MailTipsMailboxSourcedTipsEnabled},

    [System.Object]
    ${BookingsEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EndUserDLUpgradeFlowsDisabled},

    [System.Object]
    ${AppsForOfficeEnabled},

    [System.Object]
    ${EwsAllowOutlook},

    [switch]
    ${AutoExpandingArchive},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EwsAllowMacOutlook},

    [System.Object]
    ${EwsAllowList},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IPListBlocked},

    [System.Object]
    ${BookingsMembershipApprovalRequired},

    [System.Object]
    ${AutodiscoverPartialDirSync},

    [System.Object]
    ${ActivityBasedAuthenticationTimeoutInterval},

    [System.Object]
    ${ConnectorsEnabled},

    [System.Object]
    ${OutlookMobileHelpShiftEnabled},

    [System.Object]
    ${SiteMailboxCreationURL},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DefaultPublicFolderMaxItemSize},

    [System.Object]
    ${ByteEncoderTypeFor7BitCharsets},

    [System.Object]
    ${DefaultPublicFolderIssueWarningQuota},

    [System.Object]
    ${OutlookMobileSingleAccountEnabled},

    [switch]
    ${AsJob})

}
function Set-OrganizationRelationship
{

param(
    [System.Object]
    ${TargetApplicationUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MailTipsAccessLevel},

    [System.Object]
    ${TargetAutodiscoverEpr},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${DeliveryReportEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OrganizationContact},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ArchiveAccessEnabled},

    [System.Object]
    ${FreeBusyAccessEnabled},

    [System.Object]
    ${MailTipsAccessScope},

    [System.Object]
    ${TargetOwaURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailTipsAccessEnabled},

    [System.Object]
    ${PhotosEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MailboxMovePublishedScopes},

    [System.Object]
    ${MailboxMoveEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TargetSharingEpr},

    [System.Object]
    ${FreeBusyAccessLevel},

    [System.Object]
    ${DomainNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FreeBusyAccessScope},

    [switch]
    ${AsJob})

}
function Set-OutboundConnector
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RouteAllMessagesViaOnPremises},

    [System.Object]
    ${RecipientDomains},

    [System.Object]
    ${CloudServicesMailEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TestMode},

    [System.Object]
    ${AllAcceptedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${IsTransportRuleScoped},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IsValidated},

    [System.Object]
    ${UseMXRecord},

    [System.Object]
    ${LastValidationTimestamp},

    [System.Object]
    ${TlsSettings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ValidationRecipients},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ConnectorType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SmartHosts},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TlsDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ConnectorSource},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-OutlookProtectionRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SentTo},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${UserCanOverride},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${FromDepartment},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-OwaMailboxPolicy
{

param(
    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DefaultClientLanguage},

    [System.Object]
    ${ContactsEnabled},

    [System.Object]
    ${PersonalAccountCalendarsEnabled},

    [System.Object]
    ${ConditionalAccessPolicy},

    [System.Object]
    ${MessagePreviewsDisabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExplicitLogonEnabled},

    [System.Object]
    ${WebPartsFrameOptionsType},

    [System.Object]
    ${BlockedFileTypes},

    [System.Object]
    ${OneDriveAttachmentsEnabled},

    [System.Object]
    ${LinkedInEnabled},

    [System.Object]
    ${DirectFileAccessOnPrivateComputersEnabled},

    [System.Object]
    ${ChangePasswordEnabled},

    [System.Object]
    ${SignaturesEnabled},

    [System.Object]
    ${AllowedMimeTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WacViewingOnPublicComputersEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OutlookBetaToggleEnabled},

    [System.Object]
    ${ExternalSPMySiteHostURL},

    [System.Object]
    ${OnSendAddinsEnabled},

    [System.Object]
    ${NotesEnabled},

    [System.Object]
    ${JournalEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SpellCheckerEnabled},

    [System.Object]
    ${DisplayPhotosEnabled},

    [System.Object]
    ${TasksEnabled},

    [System.Object]
    ${GroupCreationEnabled},

    [System.Object]
    ${ForceSaveFileTypes},

    [System.Object]
    ${ForceWacViewingFirstOnPublicComputers},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PlacesEnabled},

    [System.Object]
    ${TeamsnapCalendarsEnabled},

    [System.Object]
    ${WacViewingOnPrivateComputersEnabled},

    [System.Object]
    ${TextMessagingEnabled},

    [System.Object]
    ${SearchFoldersEnabled},

    [System.Object]
    ${UserVoiceEnabled},

    [System.Object]
    ${CalendarEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${GlobalAddressListEnabled},

    [System.Object]
    ${IRMEnabled},

    [System.Object]
    ${DirectFileAccessOnPublicComputersEnabled},

    [System.Object]
    ${NpsSurveysEnabled},

    [System.Object]
    ${WSSAccessOnPublicComputersEnabled},

    [System.Object]
    ${ForceSaveMimeTypes},

    [System.Object]
    ${WacOMEXEnabled},

    [System.Object]
    ${WacExternalServicesEnabled},

    [System.Object]
    ${InternalSPMySiteHostURL},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SatisfactionEnabled},

    [System.Object]
    ${InstantMessagingType},

    [System.Object]
    ${ActiveSyncIntegrationEnabled},

    [System.Object]
    ${DefaultTheme},

    [System.Object]
    ${SetPhotoEnabled},

    [System.Object]
    ${ClassicAttachmentsEnabled},

    [System.Object]
    ${AllowCopyContactsToDeviceAddressBook},

    [System.Object]
    ${UseISO885915},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${OutboundCharset},

    [System.Object]
    ${LocalEventsEnabled},

    [System.Object]
    ${ReportJunkEmailEnabled},

    [System.Object]
    ${ForceWacViewingFirstOnPrivateComputers},

    [System.Object]
    ${RecoverDeletedItemsEnabled},

    [System.Object]
    ${InstantMessagingEnabled},

    [System.Object]
    ${OrganizationEnabled},

    [System.Object]
    ${DelegateAccessEnabled},

    [System.Object]
    ${ActionForUnknownFileAndMIMETypes},

    [System.Object]
    ${WacEditingEnabled},

    [System.Object]
    ${PublicFoldersEnabled},

    [System.Object]
    ${ForceSaveAttachmentFilteringEnabled},

    [System.Object]
    ${LogonAndErrorLanguage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${WSSAccessOnPrivateComputersEnabled},

    [System.Object]
    ${AllAddressListsEnabled},

    [System.Object]
    ${ExternalImageProxyEnabled},

    [System.Object]
    ${PremiumClientEnabled},

    [System.Object]
    ${BlockedMimeTypes},

    [System.Object]
    ${UMIntegrationEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SilverlightEnabled},

    [System.Object]
    ${WeatherEnabled},

    [switch]
    ${IsDefault},

    [System.Object]
    ${UseGB18030},

    [System.Object]
    ${AllowOfflineOn},

    [System.Object]
    ${AllowedFileTypes},

    [System.Object]
    ${SetPhotoURL},

    [System.Object]
    ${RulesEnabled},

    [System.Object]
    ${RemindersAndNotificationsEnabled},

    [System.Object]
    ${FreCardsEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${ThemeSelectionEnabled},

    [System.Object]
    ${AdditionalStorageProvidersAvailable},

    [System.Object]
    ${InterestingCalendarsEnabled},

    [System.Object]
    ${OWALightEnabled},

    [System.Object]
    ${PrintWithoutDownloadEnabled},

    [System.Object]
    ${SaveAttachmentsToCloudEnabled},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SkipCreateUnifiedGroupCustomSharepointClassification},

    [System.Object]
    ${ReferenceAttachmentsEnabled},

    [switch]
    ${DisableFacebook},

    [System.Object]
    ${PhoneticSupportEnabled},

    [switch]
    ${AsJob})

}
function Set-PartnerApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ApplicationIdentifier},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LinkedAccount},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AcceptSecurityIdentifierInformation},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AccountType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ActAsPermissions},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PerimeterConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${GatewayIPAddresses},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PhishFilterPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SpoofAllowBlockList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-Place
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Street},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AudioDeviceName},

    [System.Object]
    ${DisplayDeviceName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Building},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${State},

    [System.Object]
    ${City},

    [System.Object]
    ${Floor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VideoDeviceName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Tags},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${IsWheelChairAccessible},

    [System.Object]
    ${FloorLabel},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Capacity},

    [System.Object]
    ${Label},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GeoCoordinates},

    [switch]
    ${AsJob})

}
function Set-PolicyTipConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Value},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PopSubscription
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ResendVerification},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${LeaveOnServer},

    [System.Object]
    ${EmailAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${IncomingServer},

    [System.Object]
    ${IncomingUserName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IncomingSecurity},

    [System.Object]
    ${IncomingPort},

    [System.Object]
    ${IncomingPassword},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ValidateSecret},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncomingAuth},

    [switch]
    ${AsJob})

}
function Set-ProtectionServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PublicFolder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${IssueWarningQuota},

    [System.Object]
    ${Path},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RetainDeletedItemsFor},

    [System.Object]
    ${Name},

    [System.Object]
    ${MailRecipientGuid},

    [System.Object]
    ${MaxItemSize},

    [System.Object]
    ${PerUserReadStateEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EformsLocaleId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MailEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ProhibitPostQuota},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AgeLimit},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${LargeItemLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BadItemLimit},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RemoteDomain
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AutoReplyEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TNEFEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DeliveryReportEnabled},

    [System.Object]
    ${RequiredCharsetCoverage},

    [System.Object]
    ${MeetingForwardNotificationEnabled},

    [System.Object]
    ${ContentType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ByteEncoderTypeFor7BitCharsets},

    [System.Object]
    ${AutoForwardEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${TrustedMailInboundEnabled},

    [System.Object]
    ${LineWrapSize},

    [System.Object]
    ${CharacterSet},

    [System.Object]
    ${PreferredInternetCodePageForShiftJis},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NonMimeCharacterSet},

    [System.Object]
    ${NDREnabled},

    [System.Object]
    ${TargetDeliveryDomain},

    [System.Object]
    ${TrustedMailOutboundEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DisplaySenderName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowedOOFType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NDRDiagnosticInfoEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${IsInternal},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${UseSimpleDisplayName},

    [switch]
    ${AsJob})

}
function Set-ReportSchedule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DlpRuleId},

    [System.Object]
    ${Direction},

    [switch]
    ${IncludeDLP},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExpiryDate},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ScheduleName},

    [System.Object]
    ${ScheduleId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ReportType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${TransportRuleId},

    [System.Object]
    ${ReportFrequency},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EncryptionType},

    [System.Object]
    ${StartDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${NotificationEmail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EncryptionTemplate},

    [switch]
    ${AsJob})

}
function Set-ReportSubmissionPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PreSubmitMessageTitle},

    [System.Object]
    ${PostSubmitMessage},

    [System.Object]
    ${EnableReportToMicrosoft},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableCustomizedMsg},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PreSubmitMessage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ReportPhishToCustomizedAddress},

    [System.Object]
    ${ReportJunkAddresses},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ReportNotJunkAddresses},

    [System.Object]
    ${ReportPhishAddresses},

    [System.Object]
    ${ReportJunkToCustomizedAddress},

    [System.Object]
    ${PostSubmitMessageTitle},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableThirdPartyAddress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ThirdPartyReportAddresses},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ReportNotJunkToCustomizedAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-ResourceConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ResourcePropertySchema},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionPolicyTagLinks},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RetentionId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsDefaultArbitrationMailbox},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RetentionPolicyTag
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MessageClass},

    [System.Object]
    ${Identity},

    [System.Object]
    ${MustDisplayCommentEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OptionalInMailbox},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LocalizedRetentionPolicyTagName},

    [System.Object]
    ${LegacyManagedFolder},

    [System.Object]
    ${AgeLimitForRetention},

    [System.Object]
    ${RetentionAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${LocalizedComment},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RetentionEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SystemTag},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function Set-RMSTemplate
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RMSTrustedPublishingDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExtranetCertificationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExtranetLicensingUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IntranetLicensingUrl},

    [System.Object]
    ${IntranetCertificationUrl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleAssignmentPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${WellKnownObject},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ManagedBy},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SharingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Domains},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${Default},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SiteMailbox
{

param(
    [switch]
    ${Force},

    [System.Object]
    ${SyncEnabled},

    [System.Object]
    ${Owners},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ShowInMyClient},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SharePointUrl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RemoveDuplicateMessages},

    [System.Object]
    ${Members},

    [System.Object]
    ${Active},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SiteMailboxProvisioningPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AliasPrefix},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DefaultAliasPrefixEnabled},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SmimeConfig
{

param(
    [System.Object]
    ${SMIMECertificateIssuingCA},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${OWACopyRecipientHeaders},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OWAIncludeSMIMECapabilitiesInMessage},

    [System.Object]
    ${OWAEncryptionAlgorithms},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OWAAlwaysSign},

    [System.Object]
    ${OWAUseSecondaryProxiesWhenFindingCertificates},

    [System.Object]
    ${OWAAlwaysEncrypt},

    [System.Object]
    ${OWACheckCRLOnSend},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OWADLExpansionTimeout},

    [System.Object]
    ${OWAUseKeyIdentifier},

    [System.Object]
    ${OWAOnlyUseSmartCard},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OWAIncludeCertificateChainAndRootCertificate},

    [System.Object]
    ${OWAEncryptTemporaryBuffers},

    [System.Object]
    ${OWAIncludeCertificateChainWithoutRootCertificate},

    [System.Object]
    ${OWAForceSMIMEClientUpgrade},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OWAAllowUserChoiceOfSigningCertificate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${OWASigningAlgorithms},

    [System.Object]
    ${OWADisableCRLCheck},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OWABCCEncryptedEmailForking},

    [System.Object]
    ${OWATripleWrapSignedEncryptedMail},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OWACRLRetrievalTimeout},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OWACRLConnectionTimeout},

    [System.Object]
    ${OWAClearSign},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OWASenderCertificateAttributesToDisplay},

    [System.Object]
    ${OWASignedEmailCertificateInclusion},

    [switch]
    ${AsJob})

}
function Set-SweepRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Provider},

    [System.Object]
    ${SystemCategory},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${KeepLatest},

    [System.Object]
    ${ExceptIfFlagged},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceFolder},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${DestinationFolder},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExceptIfPinned},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Sender},

    [System.Object]
    ${KeepForDays},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SyncRequest
{

param(
    [System.Object]
    ${Password},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncrementalSyncInterval},

    [switch]
    ${AcceptUntrustedCertificates},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Priority},

    [System.Object]
    ${DisplayName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Calendar},

    [System.Object]
    ${Contact},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemoteServerPort},

    [System.Object]
    ${Authentication},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SmtpPassword},

    [System.Object]
    ${SmtpUserName},

    [System.Object]
    ${IncludeFolders},

    [System.Object]
    ${LargeItemLimit},

    [System.Object]
    ${UserName},

    [switch]
    ${RemoteSendEnabled},

    [switch]
    ${StartDivergenceFixup},

    [System.Object]
    ${SmtpServerName},

    [System.Object]
    ${BatchName},

    [System.Object]
    ${SkippedItemApprovalTime},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${SkipInitialConnectionValidation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${AcceptLargeDataLoss},

    [System.Object]
    ${RequestExpiryInterval},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BadItemLimit},

    [System.Object]
    ${SmtpServerPort},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${StartHierarchyFixup},

    [System.Object]
    ${SkipMerging},

    [System.Object]
    ${Security},

    [System.Object]
    ${RefreshToken},

    [System.Object]
    ${ProviderArgs},

    [System.Object]
    ${CompletedRequestAgeLimit},

    [System.Object]
    ${RemoteServerName},

    [switch]
    ${AsJob})

}
function Set-TenantAnalyticsConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MinRecipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-TextMessagingAccount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CountryRegionId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MobileOperatorId},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationPhoneNumber},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-TransportConfig
{

param(
    [System.Object]
    ${InternalDelayDsnEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InternalDsnSendHtml},

    [System.Object]
    ${ExternalDelayDsnEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DSNConversionMode},

    [System.Object]
    ${SmtpClientAuthenticationDisabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${InternalDsnLanguageDetectionEnabled},

    [System.Object]
    ${AddressBookPolicyRoutingEnabled},

    [System.Object]
    ${ExternalDsnLanguageDetectionEnabled},

    [System.Object]
    ${ExternalDsnSendHtml},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Rfc2231EncodingEnabled},

    [System.Object]
    ${HeaderPromotionModeSetting},

    [System.Object]
    ${VoicemailJournalingEnabled},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JournalingReportNdrTo},

    [System.Object]
    ${ConvertDisclaimerWrapperToEml},

    [System.Object]
    ${InternalDsnReportingAuthority},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExternalDsnReportingAuthority},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExternalDsnDefaultLanguage},

    [System.Object]
    ${InternalDsnDefaultLanguage},

    [System.Object]
    ${ExternalPostmasterAddress},

    [System.Object]
    ${ClearCategories},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-TransportRule
{

param(
    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${AddToRecipients},

    [System.Object]
    ${ApplyHtmlDisclaimerFallbackAction},

    [System.Object]
    ${ExceptIfRecipientADAttributeContainsWords},

    [System.Object]
    ${RecipientADAttributeMatchesPatterns},

    [System.Object]
    ${AttachmentSizeOver},

    [System.Object]
    ${ExceptIfSenderADAttributeContainsWords},

    [System.Object]
    ${SetSCL},

    [System.Object]
    ${AnyOfToHeaderMemberOf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disconnect},

    [System.Object]
    ${ExceptIfSentToMemberOf},

    [System.Object]
    ${ExceptIfAnyOfCcHeader},

    [System.Object]
    ${ExceptIfAttachmentMatchesPatterns},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${ManagerForEvaluatedUser},

    [System.Object]
    ${SmtpRejectMessageRejectStatusCode},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExceptIfHeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfFromScope},

    [System.Object]
    ${ADComparisonAttribute},

    [System.Object]
    ${ExceptIfHeaderContainsWords},

    [System.Object]
    ${HeaderMatchesPatterns},

    [System.Object]
    ${ExceptIfAttachmentIsPasswordProtected},

    [System.Object]
    ${DeleteMessage},

    [System.Object]
    ${HasSenderOverride},

    [System.Object]
    ${ExceptIfSubjectOrBodyMatchesPatterns},

    [System.Object]
    ${ExceptIfHasClassification},

    [System.Object]
    ${Quarantine},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${RecipientAddressType},

    [System.Object]
    ${ExceptIfContentCharacterSetContainsWords},

    [System.Object]
    ${BlindCopyTo},

    [System.Object]
    ${ApplyHtmlDisclaimerLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfMessageTypeMatches},

    [System.Object]
    ${SenderIpRanges},

    [System.Object]
    ${ExceptIfMessageContainsDataClassifications},

    [System.Object]
    ${ModerateMessageByUser},

    [System.Object]
    ${HasNoClassification},

    [System.Object]
    ${ExceptIfSenderInRecipientList},

    [System.Object]
    ${HeaderContainsMessageHeader},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${HasClassification},

    [System.Object]
    ${MessageContainsDataClassifications},

    [System.Object]
    ${ExceptIfFromMemberOf},

    [System.Object]
    ${RuleSubType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SentToScope},

    [System.Object]
    ${AnyOfToCcHeaderMemberOf},

    [System.Object]
    ${From},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfWithImportance},

    [System.Object]
    ${ContentCharacterSetContainsWords},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${RejectMessageEnhancedStatusCode},

    [System.Object]
    ${SenderADAttributeMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderADAttributeMatchesPatterns},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${AttachmentContainsWords},

    [System.Object]
    ${ExceptIfSCLOver},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ExceptIfBetweenMemberOf1},

    [System.Object]
    ${GenerateNotification},

    [System.Object]
    ${NotifySender},

    [System.Object]
    ${ExceptIfAttachmentNameMatchesPatterns},

    [System.Object]
    ${ExceptIfSenderManagementRelationship},

    [System.Object]
    ${SetAuditSeverity},

    [System.Object]
    ${AttachmentPropertyContainsWords},

    [System.Object]
    ${ExceptIfAnyOfToHeader},

    [System.Object]
    ${ApplyRightsProtectionCustomizationTemplate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RouteMessageOutboundRequireTls},

    [System.Object]
    ${WithImportance},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${FromScope},

    [System.Object]
    ${AttachmentNameMatchesPatterns},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${AnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfAttachmentSizeOver},

    [System.Object]
    ${ExceptIfManagerForEvaluatedUser},

    [System.Object]
    ${RemoveOMEv2},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${AttachmentHasExecutableContent},

    [System.Object]
    ${RouteMessageOutboundConnector},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfSenderDomainIs},

    [System.Object]
    ${SenderManagementRelationship},

    [System.Object]
    ${ExceptIfBetweenMemberOf2},

    [System.Object]
    ${RedirectMessageTo},

    [System.Object]
    ${ApplyOME},

    [System.Object]
    ${AddManagerAsRecipientType},

    [System.Object]
    ${ExceptIfMessageSizeOver},

    [System.Object]
    ${RecipientInSenderList},

    [System.Object]
    ${SenderADAttributeContainsWords},

    [System.Object]
    ${MessageSizeOver},

    [System.Object]
    ${ExceptIfRecipientInSenderList},

    [System.Object]
    ${ExceptIfAttachmentHasExecutableContent},

    [System.Object]
    ${ExceptIfAttachmentIsUnsupported},

    [System.Object]
    ${RemoveOME},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RejectMessageReasonText},

    [System.Object]
    ${RecipientAddressContainsWords},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${FromAddressContainsWords},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ApplyHtmlDisclaimerText},

    [System.Object]
    ${RecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${ExceptIfFrom},

    [System.Object]
    ${AnyOfToCcHeader},

    [System.Object]
    ${ExceptIfSentToScope},

    [System.Object]
    ${ExceptIfAnyOfToCcHeaderMemberOf},

    [System.Object]
    ${ModerateMessageByManager},

    [System.Object]
    ${ADComparisonOperator},

    [System.Object]
    ${BetweenMemberOf2},

    [System.Object]
    ${SetHeaderName},

    [System.Object]
    ${AttachmentProcessingLimitExceeded},

    [System.Object]
    ${ExceptIfAnyOfCcHeaderMemberOf},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExceptIfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderMatchesMessageHeader},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [System.Object]
    ${HeaderContainsWords},

    [System.Object]
    ${Comments},

    [System.Object]
    ${SentToMemberOf},

    [System.Object]
    ${ExceptIfADComparisonAttribute},

    [System.Object]
    ${ExceptIfSentTo},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExceptIfADComparisonOperator},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExceptIfAnyOfToHeaderMemberOf},

    [System.Object]
    ${Mode},

    [System.Object]
    ${ExceptIfAnyOfToCcHeader},

    [System.Object]
    ${SubjectOrBodyMatchesPatterns},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfAttachmentExtensionMatchesWords},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SenderDomainIs},

    [System.Object]
    ${ExceptIfRecipientAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHasNoClassification},

    [System.Object]
    ${ExceptIfSenderIpRanges},

    [System.Object]
    ${ExceptIfRecipientADAttributeMatchesPatterns},

    [System.Object]
    ${RecipientADAttributeContainsWords},

    [System.Object]
    ${AttachmentIsUnsupported},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${AttachmentExtensionMatchesWords},

    [System.Object]
    ${ExceptIfSubjectOrBodyContainsWords},

    [System.Object]
    ${LogEventText},

    [System.Object]
    ${ExceptIfManagerAddresses},

    [System.Object]
    ${SenderInRecipientList},

    [System.Object]
    ${AttachmentMatchesPatterns},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${ManagerAddresses},

    [System.Object]
    ${SenderAddressLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CopyTo},

    [System.Object]
    ${SubjectOrBodyContainsWords},

    [System.Object]
    ${ApplyClassification},

    [System.Object]
    ${SetHeaderValue},

    [System.Object]
    ${Priority},

    [System.Object]
    ${AttachmentIsPasswordProtected},

    [System.Object]
    ${BetweenMemberOf1},

    [System.Object]
    ${AnyOfCcHeader},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExceptIfAttachmentProcessingLimitExceeded},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfHeaderMatchesMessageHeader},

    [System.Object]
    ${SmtpRejectMessageRejectText},

    [System.Object]
    ${ExceptIfAttachmentContainsWords},

    [System.Object]
    ${AnyOfToHeader},

    [System.Object]
    ${ExceptIfHasSenderOverride},

    [System.Object]
    ${SCLOver},

    [System.Object]
    ${PrependSubject},

    [System.Object]
    ${ApplyRightsProtectionTemplate},

    [System.Object]
    ${MessageTypeMatches},

    [System.Object]
    ${ExceptIfAttachmentPropertyContainsWords},

    [System.Object]
    ${StopRuleProcessing},

    [System.Object]
    ${ExceptIfHeaderContainsMessageHeader},

    [switch]
    ${AsJob})

}
function Set-TxpUserSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CreateEventsFromEmailAsPrivate},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FlightReservationProcessingLevel},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${FoodEstablishmentReservationProcessingLevel},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ServiceReservationProcessingLevel},

    [System.Object]
    ${EventReservationProcessingLevel},

    [System.Object]
    ${LodgingReservationProcessingLevel},

    [switch]
    ${ResetSettings},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ParcelDeliveryProcessingLevel},

    [System.Object]
    ${RentalCarReservationProcessingLevel},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InvoiceProcessingLevel},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMAutoAttendant
{

param(
    [System.Object]
    ${AfterHoursMainMenuCustomPromptEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SpeechEnabled},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${AfterHoursTransferToOperatorEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BusinessLocation},

    [System.Object]
    ${TimeZoneName},

    [System.Object]
    ${BusinessHoursMainMenuCustomPromptFilename},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OperatorExtension},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DTMFFallbackAutoAttendant},

    [System.Object]
    ${BusinessHoursTransferToOperatorEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AfterHoursKeyMappingEnabled},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${AllowExtensions},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${InfoAnnouncementEnabled},

    [System.Object]
    ${SendVoiceMsgEnabled},

    [System.Object]
    ${BusinessName},

    [System.Object]
    ${ContactScope},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BusinessHoursMainMenuCustomPromptEnabled},

    [System.Object]
    ${AfterHoursKeyMapping},

    [System.Object]
    ${AllowedInternationalGroups},

    [System.Object]
    ${WeekStartDay},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${MatchedNameSelectionMethod},

    [System.Object]
    ${BusinessHoursWelcomeGreetingEnabled},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CallSomeoneEnabled},

    [System.Object]
    ${ContactAddressList},

    [System.Object]
    ${BusinessHoursKeyMapping},

    [System.Object]
    ${InfoAnnouncementFilename},

    [System.Object]
    ${AfterHoursMainMenuCustomPromptFilename},

    [System.Object]
    ${BusinessHoursKeyMappingEnabled},

    [System.Object]
    ${NameLookupEnabled},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [System.Object]
    ${AfterHoursWelcomeGreetingFilename},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContactRecipientContainer},

    [System.Object]
    ${BusinessHoursSchedule},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AfterHoursWelcomeGreetingEnabled},

    [System.Object]
    ${Language},

    [System.Object]
    ${HolidaySchedule},

    [System.Object]
    ${BusinessHoursWelcomeGreetingFilename},

    [System.Object]
    ${Name},

    [System.Object]
    ${TimeZone},

    [switch]
    ${AsJob})

}
function Set-UMCallAnsweringRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CallerIds},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Mailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CallersCanInterruptGreeting},

    [System.Object]
    ${ScheduleStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TimeOfDay},

    [System.Object]
    ${CheckAutomaticReplies},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExtensionsDialed},

    [System.Object]
    ${KeyMappings},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMDialPlan
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NationalNumberPrefix},

    [System.Object]
    ${InternationalNumberFormat},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OutsideLineAccessCode},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [System.Object]
    ${AudioCodec},

    [System.Object]
    ${AllowHeuristicADCallingLineIdResolution},

    [System.Object]
    ${EquivalentDialPlanPhoneContexts},

    [System.Object]
    ${OperatorExtension},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TUIPromptEditingEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DefaultLanguage},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PilotIdentifierList},

    [System.Object]
    ${AllowExtensions},

    [System.Object]
    ${LegacyPromptPublishingPoint},

    [System.Object]
    ${InfoAnnouncementEnabled},

    [System.Object]
    ${SendVoiceMsgEnabled},

    [System.Object]
    ${ContactScope},

    [System.Object]
    ${MaxRecordingDuration},

    [System.Object]
    ${WelcomeGreetingEnabled},

    [switch]
    ${ForceUpgrade},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowedInternationalGroups},

    [System.Object]
    ${Extension},

    [System.Object]
    ${MaxCallDuration},

    [System.Object]
    ${WelcomeGreetingFilename},

    [System.Object]
    ${InternationalAccessCode},

    [System.Object]
    ${InfoAnnouncementFilename},

    [System.Object]
    ${NumberingPlanFormats},

    [System.Object]
    ${CallSomeoneEnabled},

    [System.Object]
    ${ContactAddressList},

    [System.Object]
    ${AccessTelephoneNumbers},

    [System.Object]
    ${CountryOrRegionCode},

    [System.Object]
    ${LogonFailuresBeforeDisconnect},

    [System.Object]
    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContactRecipientContainer},

    [System.Object]
    ${UMAutoAttendant},

    [System.Object]
    ${ConfiguredInternationalGroups},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ConfiguredInCountryOrRegionGroups},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallAnsweringRulesEnabled},

    [System.Object]
    ${DialByNamePrimary},

    [System.Object]
    ${DialByNameSecondary},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Name},

    [System.Object]
    ${RecordingIdleTimeout},

    [System.Object]
    ${InputFailuresBeforeDisconnect},

    [System.Object]
    ${InCountryOrRegionNumberFormat},

    [System.Object]
    ${MatchedNameSelectionMethod},

    [switch]
    ${AsJob})

}
function Set-UMIPGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DelayedSourcePartyInfoEnabled},

    [System.Object]
    ${IPAddressFamily},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OutcallsAllowed},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Address},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Simulator},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MessageWaitingIndicatorAllowed},

    [System.Object]
    ${Port},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMMailbox
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UMSMSNotificationOption},

    [System.Object]
    ${AutomaticSpeechRecognitionEnabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PinlessAccessToVoiceMailEnabled},

    [System.Object]
    ${PlayOnPhoneEnabled},

    [System.Object]
    ${AnonymousCallersCanLeaveMessages},

    [System.Object]
    ${Name},

    [System.Object]
    ${UMMailboxPolicy},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TUIAccessToEmailEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${CallAnsweringAudioCodec},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OperatorNumber},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FaxEnabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TUIAccessToCalendarEnabled},

    [System.Object]
    ${ImListMigrationCompleted},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallAnsweringRulesEnabled},

    [System.Object]
    ${MissedCallNotificationEnabled},

    [System.Object]
    ${SubscriberAccessEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${VoiceMailAnalysisEnabled},

    [switch]
    ${AsJob})

}
function Set-UMMailboxConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${FolderToReadEmailsFrom},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SentVoiceMailPreviewEnabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReadOldestUnreadVoiceMessagesFirst},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ReceivedVoiceMailPreviewEnabled},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DefaultPlayOnPhoneNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Greeting},

    [switch]
    ${AsJob})

}
function Set-UMMailboxPIN
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LockedOut},

    [System.Object]
    ${SendEmail},

    [System.Object]
    ${PinExpired},

    [System.Object]
    ${NotifyEmail},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Pin},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UMMailboxPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VoiceMailPreviewPartnerAssignedID},

    [System.Object]
    ${AllowVoiceResponseToOtherMessageTypes},

    [System.Object]
    ${AllowCommonPatterns},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowDialPlanSubscribers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UMDialPlan},

    [System.Object]
    ${AllowPinlessVoiceMailAccess},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LogonFailuresBeforePINReset},

    [System.Object]
    ${VoiceMailPreviewPartnerAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowedInCountryOrRegionGroups},

    [System.Object]
    ${MaxGreetingDuration},

    [System.Object]
    ${AllowAutomaticSpeechRecognition},

    [System.Object]
    ${PINHistoryCount},

    [System.Object]
    ${AllowExtensions},

    [System.Object]
    ${AllowPlayOnPhone},

    [System.Object]
    ${ResetPINText},

    [System.Object]
    ${AllowVoiceMailAnalysis},

    [System.Object]
    ${FaxServerURI},

    [System.Object]
    ${InformCallerOfVoiceMailAnalysis},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowFax},

    [System.Object]
    ${FaxMessageText},

    [System.Object]
    ${VoiceMailPreviewPartnerMaxMessageDuration},

    [System.Object]
    ${AllowedInternationalGroups},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowMissedCallNotifications},

    [System.Object]
    ${ProtectedVoiceMailText},

    [System.Object]
    ${AllowSMSNotification},

    [System.Object]
    ${AllowTUIAccessToEmail},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowMessageWaitingIndicator},

    [System.Object]
    ${SourceForestPolicyNames},

    [System.Object]
    ${PINLifetime},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${VoiceMailText},

    [System.Object]
    ${ProtectAuthenticatedVoiceMail},

    [System.Object]
    ${MinPINLength},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${AllowSubscriberAccess},

    [System.Object]
    ${UMEnabledText},

    [System.Object]
    ${AllowVoiceMailPreview},

    [System.Object]
    ${ProtectUnauthenticatedVoiceMail},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${VoiceMailPreviewPartnerMaxDeliveryDelay},

    [System.Object]
    ${AllowTUIAccessToCalendar},

    [System.Object]
    ${AllowCallAnsweringRules},

    [System.Object]
    ${AllowTUIAccessToDirectory},

    [System.Object]
    ${RequireProtectedPlayOnPhone},

    [System.Object]
    ${AllowTUIAccessToPersonalContacts},

    [System.Object]
    ${MaxLogonAttempts},

    [switch]
    ${AsJob})

}
function Set-UnifiedAuditSetting
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UnifiedGroup
{

param(
    [System.Object]
    ${EmailAddresses},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AcceptMessagesOnlyFromSendersOrMembers},

    [System.Object]
    ${CustomAttribute12},

    [System.Object]
    ${CustomAttribute10},

    [System.Object]
    ${Language},

    [System.Object]
    ${CustomAttribute8},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CustomAttribute5},

    [switch]
    ${UnifiedGroupWelcomeMessageEnabled},

    [System.Object]
    ${MailTip},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ModeratedBy},

    [System.Object]
    ${GrantSendOnBehalfTo},

    [System.Object]
    ${Classification},

    [switch]
    ${AutoSubscribeNewMembers},

    [System.Object]
    ${AuditLogAgeLimit},

    [switch]
    ${HiddenFromExchangeClientsEnabled},

    [System.Object]
    ${MaxReceiveSize},

    [System.Object]
    ${ExtensionCustomAttribute5},

    [System.Object]
    ${CustomAttribute15},

    [System.Object]
    ${RejectMessagesFromSendersOrMembers},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Alias},

    [System.Object]
    ${DisplayName},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CustomAttribute1},

    [System.Object]
    ${CustomAttribute7},

    [switch]
    ${SubscriptionEnabled},

    [switch]
    ${ForceUpgrade},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AccessType},

    [System.Object]
    ${MailboxRegion},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExtensionCustomAttribute1},

    [System.Object]
    ${Notes},

    [System.Object]
    ${CustomAttribute14},

    [System.Object]
    ${RequireSenderAuthenticationEnabled},

    [System.Object]
    ${CustomAttribute9},

    [System.Object]
    ${CustomAttribute6},

    [System.Object]
    ${DataEncryptionPolicy},

    [System.Object]
    ${ExtensionCustomAttribute4},

    [System.Object]
    ${SensitivityLabelId},

    [switch]
    ${AlwaysSubscribeMembersToCalendarEvents},

    [System.Object]
    ${ExtensionCustomAttribute2},

    [System.Object]
    ${CustomAttribute13},

    [System.Object]
    ${CustomAttribute2},

    [System.Object]
    ${PrimarySmtpAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${CalendarMemberReadOnly},

    [System.Object]
    ${MaxSendSize},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HiddenFromAddressListsEnabled},

    [System.Object]
    ${MailTipTranslations},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CustomAttribute4},

    [System.Object]
    ${ExtensionCustomAttribute3},

    [switch]
    ${ConnectorsEnabled},

    [System.Object]
    ${ModerationEnabled},

    [System.Object]
    ${CustomAttribute3},

    [System.Object]
    ${CustomAttribute11},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-User
{

param(
    [System.Object]
    ${Company},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Phone},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Office},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${AuthenticationPolicy},

    [System.Object]
    ${OtherTelephone},

    [System.Object]
    ${Pager},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneticDisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Fax},

    [switch]
    ${Force},

    [System.Object]
    ${LastName},

    [System.Object]
    ${StsRefreshTokensValidFrom},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${RemoveMailboxProvisioningConstraint},

    [System.Object]
    ${ResetPasswordOnNextLogon},

    [System.Object]
    ${BlockCloudCache},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SeniorityIndex},

    [System.Object]
    ${City},

    [System.Object]
    ${AllowUMCallsFromNonUsers},

    [System.Object]
    ${Title},

    [System.Object]
    ${MobilePhone},

    [System.Object]
    ${AssistantName},

    [System.Object]
    ${CreateDTMFMap},

    [System.Object]
    ${VIP},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Initials},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${WebPage},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${PublicFolder},

    [switch]
    ${PermanentlyClearPreviousMailboxInfo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Manager},

    [System.Object]
    ${HomePhone},

    [System.Object]
    ${OtherFax},

    [System.Object]
    ${SimpleDisplayName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Department},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OtherHomePhone},

    [System.Object]
    ${FirstName},

    [System.Object]
    ${UMDtmfMap},

    [System.Object]
    ${WindowsEmailAddress},

    [System.Object]
    ${StreetAddress},

    [System.Object]
    ${Notes},

    [System.Object]
    ${RemotePowerShellEnabled},

    [System.Object]
    ${Name},

    [System.Object]
    ${GeoCoordinates},

    [System.Object]
    ${PostOfficeBox},

    [System.Object]
    ${PostalCode},

    [switch]
    ${AsJob})

}
function Set-UserAnalyticsConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PrivacyMode},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UserPhoto
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PictureData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${GroupMailbox},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Cancel},

    [System.Object]
    ${PictureStream},

    [switch]
    ${Save},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IgnoreDefaultScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhotoType},

    [switch]
    ${Preview},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-AuditAssistant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-HistoricalSearch
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageID},

    [System.Object]
    ${Direction},

    [System.Object]
    ${Url},

    [System.Object]
    ${CompressFile},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TransportRule},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ReportTitle},

    [System.Object]
    ${NetworkMessageID},

    [System.Object]
    ${ReportType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${SenderAddress},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DLPPolicy},

    [System.Object]
    ${DeliveryStatus},

    [System.Object]
    ${EncryptionType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${StartDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OriginalClientIP},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${NotifyAddress},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EncryptionTemplate},

    [System.Object]
    ${Locale},

    [switch]
    ${AsJob})

}
function Start-ManagedFolderAssistant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${StopHoldCleanup},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${DataGovernance},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ComplianceJob},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${FullCrawl},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${InactiveMailbox},

    [switch]
    ${HoldCleanup},

    [switch]
    ${AggMailboxCleanup},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-UMPhoneSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${DefaultVoicemailGreeting},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallAnsweringRuleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${UMMailbox},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${AwayVoicemailGreeting},

    [switch]
    ${AsJob})

}
function Stop-HistoricalSearch
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${JobId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Stop-MigrationBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-MigrationUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Partition},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-UMPhoneSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-MailboxRestoreRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-MoveRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ProxyToMailbox},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-PublicFolderMailboxMigrationRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SuspendComment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Suspend-SyncRequest
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-ApplicationAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AppId},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-ClientAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AuthenticationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemotePort},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [System.Object]
    ${Protocol},

    [System.Object]
    ${OAuthClaims},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RemoteAddress},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TestTextExtractionResults},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TextToClassify},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ClassificationNames},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataEncryptionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-IRMConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RMSOnline},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Recipient},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Sender},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-MAPIConnectivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Archive},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-MigrationServerAvailability
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Endpoint},

    [switch]
    ${AcceptUntrustedCertificates},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExchangeRemoteMove},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${ServiceAccountKeyFileData},

    [switch]
    ${PublicFolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TestMailbox},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ExchangeServer},

    [System.Object]
    ${Authentication},

    [switch]
    ${ExchangeOutlookAnywhere},

    [switch]
    ${Gmail},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Compliance},

    [System.Object]
    ${Port},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PublicFolderToUnifiedGroup},

    [System.Object]
    ${RemoteServer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MailboxPermission},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SourceMailboxLegacyDN},

    [switch]
    ${Imap},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Autodiscover},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Credentials},

    [System.Object]
    ${PublicFolderDatabaseServerLegacyDN},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Security},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RPCProxyServer},

    [switch]
    ${AsJob})

}
function Test-OAuthConnectivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OrganizationDomain},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AppOnly},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${UseCachedToken},

    [System.Object]
    ${Mailbox},

    [System.Object]
    ${TargetUri},

    [switch]
    ${ReloadConfig},

    [System.Object]
    ${Service},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-OrganizationRelationship
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${UserIdentity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${UseAppTokenOnly},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RequestorIdentity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-TextExtraction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Troubleshoot-AgendaMail
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Undo-SoftDeletedMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SoftDeletedObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [System.Object]
    ${WindowsLiveID},

    [switch]
    ${PublicFolder},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Password},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Undo-SoftDeletedUnifiedGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SoftDeletedObject},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-DistributionGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-HybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${SuppressOAuthWarning},

    [switch]
    ${ForceUpgrade},

    [System.Object]
    ${OnPremisesCredentials},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TenantCredentials},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-PublicFolderMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${ForceOnlineSync},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${CreateAssociatedDumpster},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${InvokeSynchronizer},

    [switch]
    ${SuppressStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ReconcileFolders},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${FullSync},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FolderId},

    [System.Object]
    ${Identity},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-Recipient
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${BypassSecurityGroupManagerCheck},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-SiteMailbox
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Target},

    [switch]
    ${FullSync},

    [switch]
    ${BypassOwnerCheck},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Upgrade-DistributionGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlIdentities},

    [System.Object]
    ${ExecutingUser},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ActionType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-OutboundConnector
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Recipients},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-RetentionRuleQuery
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${KqlQueryString},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Validate-ShadowCalendar
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CompareProperties},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CalendarId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ReturnItemDetails},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Write-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
#endregion
#region MicrosoftTeams
#endregion
#region PnP
function Add-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertDeliveryChannel]
        $DeliveryMethod,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertEventType]
        $ChangeType,

        [Parameter()]
        [Microsoft.SharePoint.Client.AlertFrequency]
        $Frequency,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AlertFilter]
        $Filter,

        [Parameter()]
        [System.DateTime]
        $Time,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipFeatureDeployment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.Int32]
        $Timeout,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [System.String]
        $ClientSideHostProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
        $LayoutType,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
        $PromoteAs,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageHeaderLayoutType]
        $HeaderLayoutType,

        [Parameter()]
        [System.String]
        $PublishMessage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPClientSidePageSection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.CanvasSectionTemplate]
        $SectionTemplate,

        [Parameter()]
        [System.Int32]
        $Order,

        [Parameter()]
        [System.Int32]
        $ZoneEmphasis,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPClientSideText
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [System.String]
        $Text,

        [Parameter()]
        [System.Int32]
        $Order,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPClientSideWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.DefaultClientSideWebParts]
        $DefaultWebPartType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
        $Component,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PropertyBagPipeBind]
        $WebPartProperties,

        [Parameter()]
        [System.Int32]
        $Order,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $ContentTypeId,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [Microsoft.SharePoint.Client.ContentType]
        $ParentContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPContentTypeToDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind[]]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPContentTypeToList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DefaultContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [System.String]
        $Location,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $ImageUrl,

        [Parameter()]
        [System.String]
        $CommandUIExtension,

        [Parameter()]
        [System.String]
        $RegistrationId,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Rights,

        [Parameter()]
        [Microsoft.SharePoint.Client.UserCustomActionRegistrationType]
        $RegistrationType,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [System.String]
        $ClientSideHostProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPDataRowsToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSecurity,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TokenizeUrls,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [Microsoft.SharePoint.Client.EventReceiverType]
        $EventReceiverType,

        [Parameter()]
        [Microsoft.SharePoint.Client.EventReceiverSynchronization]
        $Synchronization,

        [Parameter()]
        [System.Int32]
        $SequenceNumber,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $InternalName,

        [Parameter()]
        [Microsoft.SharePoint.Client.FieldType]
        $Type,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddToDefaultView,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPFieldFromXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $FieldXml,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPFieldToContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Hidden,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Add-PnPFileToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $Source,

        [Parameter()]
        [System.String]
        $SourceUrl,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $Container,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.FileLevel]
        $FileLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FileOverwrite,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPHtmlPublishingPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $AssociatedContentTypeID,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPHubSiteAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $HubSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPIndexedProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPJavaScriptBlock
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Script,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SiteScoped,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String[]]
        $Url,

        [Parameter()]
        [System.Int32]
        $Sequence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SiteScoped,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPListFoldersToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSecurity,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Add-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [System.String]
        $UIVersion,

        [Parameter()]
        [System.String]
        $DefaultCssFile,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPMicrosoft365GroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveExisting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPMicrosoft365GroupToSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPublic,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $KeepOldHomePage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $HubSiteId,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Parent,

        [Parameter()]
        [System.String]
        $Header,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $First,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $External,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LibraryUrl,

        [Parameter()]
        [System.String]
        $ThumbnailUrl,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $OrgNewsSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
        $SiteTemplate,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $TenantTemplate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm
    )
}
function Add-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Int32]
        $Width,

        [Parameter()]
        [System.Int32]
        $Height,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPPublishingPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $PageName,

        [Parameter()]
        [System.String]
        $FolderPath,

        [Parameter()]
        [System.String]
        $PageTemplateName,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPPublishingPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $AssociatedContentTypeID,

        [Parameter()]
        [System.String]
        $DestinationFolderHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RoleName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Clone,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Include,

        [Parameter()]
        [Microsoft.SharePoint.Client.PermissionKind[]]
        $Exclude,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Classifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
        $Owners,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
        $SiteScriptIds,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.String]
        $PreviewImageAltText,

        [Parameter()]
        [System.String]
        $PreviewImageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteWebTemplate]
        $WebTemplate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Username,

        [Parameter()]
        [System.Security.SecureString]
        $Password,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTaxonomyField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $InternalName,

        [Parameter()]
        [System.String]
        $TermSetPath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TaxonomyItemId,

        [Parameter()]
        [System.String]
        $TermPathDelimiter,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddToDefaultView,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MultiValue,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Required,

        [Parameter()]
        [Microsoft.SharePoint.Client.AddFieldOptions]
        $FieldOptions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Private,

        [Parameter()]
        [System.String]
        $OwnerUPN,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamTabType]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String]
        $ContentUrl
    )
}
function Add-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $OriginUrl,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPTenantSequenceSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
        $Site,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPTenantSequenceSubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.TeamNoGroupSubSite]
        $SubSite,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.SiteCollection]
        $Site,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Add-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePalettePipeBind]
        $Palette,

        [Parameter()]
        [System.Boolean]
        $IsInverted,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPUserToGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $EmailAddress,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SendEmail,

        [Parameter()]
        [System.String]
        $EmailBody,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [Microsoft.SharePoint.Client.ViewType]
        $ViewType,

        [Parameter()]
        [System.UInt32]
        $RowLimit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Personal,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAsDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Paged,

        [Parameter()]
        [System.String]
        $Aggregations,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [System.String]
        $ClientState,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWebPartToWebPartPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $ZoneId,

        [Parameter()]
        [System.Int32]
        $ZoneIndex,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWebPartToWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Int32]
        $Row,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddSpace,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [OfficeDevPnP.Core.WikiPageLayout]
        $Layout,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.WorkflowServices.WorkflowDefinition]
        $Definition,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotPublish,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Add-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $DefinitionName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartManually,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartOnCreated,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $StartOnChanged,

        [Parameter()]
        [System.String]
        $HistoryListName,

        [Parameter()]
        [System.String]
        $TaskListName,

        [Parameter()]
        [System.Collections.Generic.Dictionary`2[System.String,System.String]]
        $AssociationValues,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Apply-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [System.String]
        $ResourceFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteSystemPropertyBagValues,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDuplicateDataRowErrors,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionContentTypesToSubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionFieldsToSubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearNavigation,

        [Parameter()]
        [System.Collections.Hashtable]
        $Parameters,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningTemplate]
        $InputInstance,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Apply-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [System.String]
        $SequenceId,

        [Parameter()]
        [System.String]
        $ResourceFolder,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Collections.Hashtable]
        $Parameters,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteSystemPropertyBagValues,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreDuplicateDataRowErrors,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionContentTypesToSubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ProvisionFieldsToSubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearNavigation,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ApplyConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Approve-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $RequestId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Clear-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Clear-PnPListItemAsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Clear-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Clear-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SecondStageOnly,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Clear-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Clear-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Connect-PnPOnline
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReturnConnection,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.CredentialPipeBind]
        $Credentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CurrentCredentials,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseAdfs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseAdfsCert,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.X509Certificate2]
        $ClientCertificate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Kerberos,

        [Parameter()]
        [System.String]
        $LoginProviderName,

        [Parameter()]
        [System.Int32]
        $MinimalHealthScore,

        [Parameter()]
        [System.Int32]
        $RetryCount,

        [Parameter()]
        [System.Int32]
        $RetryWait,

        [Parameter()]
        [System.Int32]
        $RequestTimeout,

        [Parameter()]
        [System.String]
        $Realm,

        [Parameter()]
        [System.String]
        $AppId,

        [Parameter()]
        [System.String]
        $AppSecret,

        [Parameter()]
        [System.String]
        $ClientSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseWebLogin,

        [Parameter()]
        [Microsoft.SharePoint.Client.ClientAuthenticationMode]
        $AuthenticationMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateDrive,

        [Parameter()]
        [System.String]
        $DriveName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SPOManagementShell,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PnPManagementShell,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LaunchBrowser,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Graph,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $RedirectUri,

        [Parameter()]
        [System.String]
        $Tenant,

        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.String]
        $CertificateBase64Encoded,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.X509Certificate2]
        $Certificate,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.String]
        $PEMCertificate,

        [Parameter()]
        [System.String]
        $PEMPrivateKey,

        [Parameter()]
        [System.String]
        $Thumbprint,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearTokenCache,

        [Parameter()]
        [OfficeDevPnP.Core.AzureEnvironment]
        $AzureEnvironment,

        [Parameter()]
        [System.String[]]
        $Scopes,

        [Parameter()]
        [System.String]
        $AADDomain,

        [Parameter()]
        [System.String]
        $AccessToken,

        [Parameter()]
        [System.String]
        $TenantAdminUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipTenantAdminCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreSslErrors,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoTelemetry,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Convert-PnPFolderToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Convert-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $ToSchema,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function ConvertTo-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Library,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $WebPartMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TakeSourcePageName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ReplaceHomePageWithDefault,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddPageAcceptBanner,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipItemLevelPermissionCopyToClientSidePage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipUrlRewriting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipDefaultUrlRewriting,

        [Parameter()]
        [System.String]
        $UrlMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearCache,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CopyPageMetadata,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AddTableListImageAsImageWebPart,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseCommunityScriptEditor,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SummaryLinksToHtml,

        [Parameter()]
        [System.String]
        $TargetWebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePageTransformatorLogType]
        $LogType,

        [Parameter()]
        [System.String]
        $LogFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LogSkipFlush,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LogVerbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DontPublish,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $KeepPageCreationModificationInformation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAuthorInPageHeader,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PostAsNews,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisablePageComments,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublishingPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlogPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DelveBlogPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DelveKeepSubTitle,

        [Parameter()]
        [System.String]
        $PageLayoutMapping,

        [Parameter()]
        [System.String]
        $PublishingTargetPageName,

        [Parameter()]
        [System.String]
        $TargetPageName,

        [Parameter()]
        [System.String]
        $TargetPageFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TargetPageFolderOverridesDefaultFolder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveEmptySectionsAndColumns,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $TargetConnection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipUserMapping,

        [Parameter()]
        [System.String]
        $UserMappingFile,

        [Parameter()]
        [System.String]
        $TermMappingFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipTermStoreMapping,

        [Parameter()]
        [System.String]
        $LDAPConnectionString,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Copy-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SourceUrl,

        [Parameter()]
        [System.String]
        $TargetUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipSourceFolderName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreVersionHistory,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Copy-PnPItemProxy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [System.String[]]
        $Path,

        [Parameter()]
        [System.String[]]
        $LiteralPath,

        [Parameter()]
        [System.String]
        $Destination,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Container,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Include,

        [Parameter()]
        [System.String[]]
        $Exclude,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseTransaction
    )
}
function Deny-PnPTenantServicePrincipalPermissionRequest
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $RequestId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPResponsiveUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPSharingForNonOwnersOfSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Disconnect-PnPOnline
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPCommSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DesignPackageId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Sandboxed,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPInPlaceRecordsManagementForSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPPowerShellTelemetry
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPResponsiveUI
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $InfrastructureSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Classifications,

        [Parameter()]
        [System.String]
        $DefaultClassification,

        [Parameter()]
        [System.String]
        $UsageGuidelinesUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Enable-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Export-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistBrandingFiles,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Export-PnPClientSidePageMapping
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BuiltInWebPartMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BuiltInPageLayoutMapping,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CustomPageLayoutMapping,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.PagePipeBind]
        $PublishingPage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AnalyzeOOBPageLayouts,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Overwrite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Logging,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Export-PnPListToProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $List,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OutputInstance,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Export-PnPTaxonomy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TermSetId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeID,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $TermStoreName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.Encoding]
        $Encoding,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Export-PnPTermGroupToXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FullTemplate,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Find-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Match,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAADUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String]
        $OrderBy,

        [Parameter()]
        [System.String[]]
        $Select,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Delta,

        [Parameter()]
        [System.String]
        $DeltaToken,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAppAuthAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAppInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfCustomActionNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPAuditing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAuthenticationRealm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAvailableClientSideComponents
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideComponentPipeBind]
        $Component,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPAvailableLanguage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPAzureCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPConnection
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InSiteHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPContentTypePublishingHubUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPContext
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfCustomActionNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPDocumentSetTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPException
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPFeature
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FeaturePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.FeatureScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Group,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InSiteHierarchy,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $Filename,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsListItem,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfFileNotFound,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsString,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsFileObject,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPFolderItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $FolderSiteRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $ItemType,

        [Parameter()]
        [System.String]
        $ItemName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPFooter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPGraphAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedMemberGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedVisitorGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AssociatedOwnerGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPGroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPGroupPermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHealthScore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHideDefaultThemes
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHomePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPHubSiteChild
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPIndexedPropertyKeys
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPIsSiteAliasAvailable
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfJavaScriptLinkNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ValuesOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ThrowExceptionIfListNotFound,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPListInformationRightsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Int32]
        $Id,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $UniqueId,

        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.String]
        $FolderServerRelativeUrl,

        [Parameter()]
        [System.String[]]
        $Fields,

        [Parameter()]
        [System.Int32]
        $PageSize,

        [Parameter()]
        [System.Management.Automation.ScriptBlock]
        $ScriptBlock,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPListRecordDeclaration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPManagementApiAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantId,

        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $ClientSecret,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeSiteUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeClassification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHasTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPMicrosoft365GroupMembers
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPMicrosoft365GroupOwners
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location,

        [Parameter()]
        [System.Int32]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Tree,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOffice365CurrentServiceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOffice365HistoricalServiceStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOffice365ServiceMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[PnP.PowerShell.Commands.Enums.Office365Workload]]
        $Workload,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOffice365Services
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOfficeManagementApiAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPPowerShellTelemetryEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.ClientObject]
        $ClientObject,

        [Parameter()]
        [System.String[]]
        $Property,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPPropertyBag
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAllTermGroups,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteCollectionTermGroup,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteGroups,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeTermGroupsSecurity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSearchConfiguration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistBrandingFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistComposedLookFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistPublishingFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeNativePublishingFiles,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHiddenLists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAllClientSidePages,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipVersionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PersistMultiLanguageResources,

        [Parameter()]
        [System.String]
        $ResourceFilePrefix,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $Handlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Handlers]
        $ExcludeHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ExtensibilityHandler[]]
        $ExtensibilityHandlers,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.String[]]
        $ContentTypeGroups,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoBaseTemplate,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [System.String]
        $TemplateDisplayName,

        [Parameter()]
        [System.String]
        $TemplateImagePreviewUrl,

        [Parameter()]
        [System.Collections.Hashtable]
        $TemplateProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OutputInstance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ExcludeContentTypesFromSyndication,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $ListsToExtract,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FirstStage,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SecondStage,

        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPRequestAccessEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Search.OutputFormat]
        $OutputFormat,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSearchCrawlLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Search.LogLevel]
        $LogLevel,

        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [PnP.PowerShell.Commands.Search.ContentSource]
        $ContentSource,

        [Parameter()]
        [System.DateTime]
        $StartDate,

        [Parameter()]
        [System.DateTime]
        $EndDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RawFormat,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSearchSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSharingForNonOwnersOfSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSiteClosure
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSiteCollectionTermStore
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteDesignRun
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteDesignRunStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignRun]
        $Run,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSitePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllAvailable,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $SiteDesign,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteScriptFromList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteScriptFromWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String[]]
        $Lists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeAll,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeBranding,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeLinksToExportedItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeRegionalSettings,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeSiteExternalSharingCapability,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeTheme,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPSiteSearchQueryResults
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.Int32]
        $StartRow,

        [Parameter()]
        [System.Int32]
        $MaxResults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CredentialType]
        $Type,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPSubWebs
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recurse,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTaxonomyItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TermPath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTaxonomySession
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsChannelMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeDeleted,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.String]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTenantCdnEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantCdnPolicies
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TenantUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSequencePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTenantSequenceSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningSequence]
        $Sequence,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningSitePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTenantServicePrincipal
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantServicePrincipalPermissionGrants
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantServicePrincipalPermissionRequests
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Detailed,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeOneDriveSites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $WebTemplate,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTenantSyncClientRestriction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteUrl,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsInstance,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ExtractConfigurationPipeBind]
        $Configuration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Get-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsJson,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTerm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $TermSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeChildTerms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermGroup]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DetectCurrentComposedLook,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPTimeZoneId
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Match,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPUnifiedAuditLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AuditContentType]
        $ContentType,

        [Parameter()]
        [System.DateTime]
        $StartTime,

        [Parameter()]
        [System.DateTime]
        $EndTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPUPABulkImportStatus
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $JobId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeErrorDetails,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WithRightsAssigned,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WithRightsAssignedDetailed,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPUserOneDriveQuota
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPUserProfileProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Get-PnPWebhookSubscriptions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWebPartProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWebPartXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPartPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWebTemplates
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.UInt32]
        $Lcid,

        [Parameter()]
        [System.Int32]
        $CompatibilityLevel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWikiPageContent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PublishedOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $ListItem,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $WorkflowSubscription,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Get-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Grant-PnPHubSiteRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOHubSiteUserRights]
        $Rights,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Grant-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.TenantSiteDesignPrincipalRights]
        $Rights,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Grant-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Scope,

        [Parameter()]
        [System.String]
        $Resource,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Import-PnPAppPackage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $LoadOnly,

        [Parameter()]
        [System.Int32]
        $Locale,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Import-PnPTaxonomy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Terms,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [System.String]
        $TermStoreName,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SynchronizeDeletions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Import-PnPTermGroupFromXml
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Import-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Guid]
        $TermSetId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SynchronizeDeletions,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $IsOpen,

        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $TermStoreName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Initialize-PnPPowerShellAuthentication
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ApplicationName,

        [Parameter()]
        [System.String]
        $Tenant,

        [Parameter()]
        [System.String]
        $CertificatePath,

        [Parameter()]
        [System.String]
        $CommonName,

        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.String]
        $Locality,

        [Parameter()]
        [System.String]
        $Organization,

        [Parameter()]
        [System.String]
        $OrganizationUnit,

        [Parameter()]
        [System.Int32]
        $ValidYears,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.String]
        $OutPath,

        [Parameter()]
        [System.Security.Cryptography.X509Certificates.StoreLocation]
        $Store,

        [Parameter()]
        [OfficeDevPnP.Core.AzureEnvironment]
        $AzureEnvironment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Scopes
    )
}
function Install-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Install-PnPSolution
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $PackageId,

        [Parameter()]
        [System.String]
        $SourceFilePath,

        [Parameter()]
        [System.Int32]
        $MajorVersion,

        [Parameter()]
        [System.Int32]
        $MinorVersion,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Invoke-PnPQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Int32]
        $RetryCount,

        [Parameter()]
        [System.Int32]
        $RetryWait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Invoke-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Invoke-PnPSPRestMethod
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.HttpRequestMethod]
        $Method,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Object]
        $Content,

        [Parameter()]
        [System.String]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Invoke-PnPWebAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ListName,

        [Parameter()]
        [Microsoft.SharePoint.Client.Web[]]
        $Webs,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.Web]]
        $WebAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.Web,System.Boolean]]
        $ShouldProcessWebAction,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.Web]]
        $PostWebAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.Web,System.Boolean]]
        $ShouldProcessPostWebAction,

        [Parameter()]
        [System.String[]]
        $WebProperties,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.List]]
        $ListAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.List,System.Boolean]]
        $ShouldProcessListAction,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.List]]
        $PostListAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.List,System.Boolean]]
        $ShouldProcessPostListAction,

        [Parameter()]
        [System.String[]]
        $ListProperties,

        [Parameter()]
        [System.Action`1[Microsoft.SharePoint.Client.ListItem]]
        $ListItemAction,

        [Parameter()]
        [System.Func`2[Microsoft.SharePoint.Client.ListItem,System.Boolean]]
        $ShouldProcessListItemAction,

        [Parameter()]
        [System.String[]]
        $ListItemProperties,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SubWebs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableStatisticsOutput,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipCounting,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Measure-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ItemLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BrokenPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Measure-PnPResponseTime
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DiagnosticEndpointPipeBind]
        $Url,

        [Parameter()]
        [System.UInt32]
        $Count,

        [Parameter()]
        [System.UInt32]
        $WarmUp,

        [Parameter()]
        [System.UInt32]
        $Timeout,

        [Parameter()]
        [System.UInt32]
        $Histogram,

        [Parameter()]
        [PnP.PowerShell.Commands.Diagnostic.MeasureResponseTimeMode]
        $Mode,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Measure-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recursive,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IncludeHiddenList,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Move-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [System.Int32]
        $Section,

        [Parameter()]
        [System.Int32]
        $Column,

        [Parameter()]
        [System.Int32]
        $Position,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Move-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.String]
        $SiteRelativeUrl,

        [Parameter()]
        [System.String]
        $TargetUrl,

        [Parameter()]
        [System.String]
        $TargetServerRelativeLibrary,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSchemaMismatch,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSmallerVersionLimitOnDestination,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IgnoreVersionHistory,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Move-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $TargetFolder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Move-PnPItemProxy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Path,

        [Parameter()]
        [System.String[]]
        $LiteralPath,

        [Parameter()]
        [System.String]
        $Destination,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Container,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.String]
        $Filter,

        [Parameter()]
        [System.String[]]
        $Include,

        [Parameter()]
        [System.String[]]
        $Exclude,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $PassThru,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credential,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseTransaction
    )
}
function Move-PnPListItemToRecycleBin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Move-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPAzureCertificate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $CommonName,

        [Parameter()]
        [System.String]
        $Country,

        [Parameter()]
        [System.String]
        $State,

        [Parameter()]
        [System.String]
        $Locality,

        [Parameter()]
        [System.String]
        $Organization,

        [Parameter()]
        [System.String]
        $OrganizationUnit,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.String]
        $OutPfx,

        [Parameter()]
        [System.String]
        $OutCert,

        [Parameter()]
        [System.Int32]
        $ValidYears,

        [Parameter()]
        [System.Security.SecureString]
        $CertificatePassword,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPExtensibilityHandlerObject
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Assembly,

        [Parameter()]
        [System.String]
        $Type,

        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Enums.GraphSubscriptionChangeType]
        $ChangeType,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [System.String]
        $Resource,

        [Parameter()]
        [System.DateTime]
        $ExpirationDateTime,

        [Parameter()]
        [System.String]
        $ClientState,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.GraphSubscriptionTlsVersion]
        $LatestSupportedTlsVersion,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowRequestToJoinLeave,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AutoAcceptRequestToJoinLeave,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowMembersEditMembership,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnlyAllowMembersViewMembership,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisallowMembersViewMembership,

        [Parameter()]
        [System.String]
        $RequestToJoinEmail,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AssociatedGroupType]
        $SetAssociatedGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [Microsoft.SharePoint.Client.ListTemplateType]
        $Template,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Hidden,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableVersioning,

        [Parameter()]
        [Microsoft.SharePoint.Client.QuickLaunchOptions]
        $QuickLaunchOptions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableContentTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OnQuickLaunch,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $MailNickname,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPPersonalSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Email,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPProvisioningTemplateFromFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $TargetFolder,

        [Parameter()]
        [System.String]
        $Match,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Collections.Hashtable]
        $Properties,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AsIncludeFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Text.Encoding]
        $Encoding,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteType]
        $Type,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $HubSiteId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupId,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $MailNickName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowAddRemoveApps,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowChannelMentions,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCustomMemes,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowDeleteChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGiphy,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowTeamMentions,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowUserEditMessages,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamGiphyContentRating]
        $GiphyContentRating,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Teams.TeamVisibility]
        $Visibility,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTenantSequence
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Id,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTenantSequenceCommunicationSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.UInt32]
        $Language,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.String]
        $SiteDesignId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowFileSharingForGuestUsers,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTenantSequenceTeamNoGroupSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.UInt32]
        $TimeZoneId,

        [Parameter()]
        [System.UInt32]
        $Language,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTenantSequenceTeamNoGroupSubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.UInt32]
        $TimeZoneId,

        [Parameter()]
        [System.UInt32]
        $Language,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $QuickLaunchDisabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UseDifferentPermissionsFromParentSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTenantSequenceTeamSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Public,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HubSite,

        [Parameter()]
        [System.String[]]
        $TemplateIds,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.UInt32]
        $Lcid,

        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.Int32]
        $TimeZone,

        [Parameter()]
        [System.Double]
        $ResourceQuota,

        [Parameter()]
        [System.Double]
        $ResourceQuotaWarningLevel,

        [Parameter()]
        [System.Int64]
        $StorageQuota,

        [Parameter()]
        [System.Int64]
        $StorageQuotaWarningLevel,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveDeletedSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Author,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Generator,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function New-PnPTerm
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Guid]
        $Id,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $TermSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [System.Collections.Hashtable]
        $LocalCustomProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Guid]
        $Id,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTermLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.Term]]
        $Term,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Guid]
        $Id,

        [Parameter()]
        [System.Int32]
        $Lcid,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsOpenForTermCreation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsNotAvailableForTagging,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String[]]
        $StakeHolders,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPUPABulkImportJob
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Collections.Hashtable]
        $UserProfilePropertyMapping,

        [Parameter()]
        [System.String]
        $IdProperty,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.ImportProfilePropertiesUserIdType]
        $IdType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function New-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Int32]
        $Locale,

        [Parameter()]
        [System.String]
        $Template,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BreakInheritance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritNavigation,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Publish-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipFeatureDeployment,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Read-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $Xml,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Read-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Register-PnPAppCatalogSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.Int32]
        $TimeZoneId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Register-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPAlert
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $User,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AlertPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPClientSideComponent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPContentTypeFromDocumentSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPContentTypeFromList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPCustomAction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPEventReceiver
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.EventReceiverPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPFieldFromContentType
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DoNotUpdateChildren,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.String]
        $SiteRelativeUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPFileFromProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $FilePath,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FileVersionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GraphSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPHubSiteAssociation
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPIndexedProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPJavaScriptLink
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FromSite,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Recycle,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPMicrosoft365GroupMember
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPMicrosoft365GroupOwner
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Users,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPNavigationNode
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.NavigationNodePipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.NavigationType]
        $Location,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Header,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPOrgAssetsLibrary
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LibraryUrl,

        [Parameter()]
        [System.Boolean]
        $ShouldRemoveFromCdn,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPOrgNewsSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $OrgNewsSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPPropertyBagValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPPublishingImageRendition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ImageRenditionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPRoleDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RoleDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Classifications,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPSiteCollectionAdmin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]]
        $Owners,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPSiteCollectionAppCatalog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPSiteDesignTask
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignTaskPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPStoredCredential
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTaxonomyItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $TermPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTeamsUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $Role,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTenantCdnOrigin
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $OriginUrl,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SkipRecycleBin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $FromRecycleBin,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTenantTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $TermStoreName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPUser
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPUserFromGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $LoginName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ViewPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Remove-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPWikiPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [System.String]
        $SiteRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPWorkflowDefinition
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowDefinitionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Remove-PnPWorkflowSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Rename-PnPFile
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [System.String]
        $SiteRelativeUrl,

        [Parameter()]
        [System.String]
        $TargetFileName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $OverwriteIfAlreadyExists,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Rename-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [System.String]
        $TargetFolderName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Request-PnPAccessToken
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ClientId,

        [Parameter()]
        [System.String]
        $Resource,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Scopes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Decoded,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetAsCurrent,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $Credentials,

        [Parameter()]
        [System.String]
        $TenantUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Request-PnPReIndexList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Request-PnPReIndexWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Reset-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativeUrl,

        [Parameter()]
        [Microsoft.SharePoint.Client.CheckinType]
        $CheckinType,

        [Parameter()]
        [System.String]
        $CheckInComment,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Reset-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Boolean]
        $SyncToItems,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Reset-PnPMicrosoft365GroupExpiration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Reset-PnPUserOneDriveQuotaToDefault
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Resolve-PnPFolder
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteRelativePath,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.String[]]
        $Includes
    )
}
function Restore-PnPDeletedMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Restore-PnPFileVersion
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FileVersionPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Restore-PnPRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.RecycleBinItemPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Int32]
        $RowLimit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Restore-PnPTenantRecycleBinItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Resume-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Revoke-PnPHubSiteRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Revoke-PnPSiteDesignRights
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [System.String[]]
        $Principals,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Revoke-PnPTenantServicePrincipalPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ObjectId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Save-PnPClientSidePageConversionLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Save-PnPProvisioningTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningTemplatePipeBind]
        $Template,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Save-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ProvisioningHierarchyPipeBind]
        $Template,

        [Parameter()]
        [System.String]
        $Out,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.Xml.XMLPnPSchemaVersion]
        $Schema,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Send-PnPMail
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Server,

        [Parameter()]
        [System.String]
        $From,

        [Parameter()]
        [System.String]
        $Password,

        [Parameter()]
        [System.String[]]
        $To,

        [Parameter()]
        [System.String[]]
        $Cc,

        [Parameter()]
        [System.String]
        $Subject,

        [Parameter()]
        [System.String]
        $Body,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPApplicationCustomizer
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.UserCustomActionPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $ClientSideComponentId,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CustomActionScope]
        $Scope,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $Sequence,

        [Parameter()]
        [System.String]
        $ClientSideComponentProperties,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Set-PnPAppSideLoading
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPAuditing
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EnableAll,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableAll,

        [Parameter()]
        [System.Int32]
        $RetentionTime,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $TrimAuditLog,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CheckOutCheckInItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MoveCopyItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DeleteRestoreItems,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditContentTypesColumns,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SearchContent,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $EditUsersPermissions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPAvailablePageLayouts
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $PageLayouts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowAllPageLayouts,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPageLayouts,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPClientSidePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageLayoutType]
        $LayoutType,

        [Parameter()]
        [PnP.PowerShell.Commands.ClientSidePages.ClientSidePagePromoteType]
        $PromoteAs,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Publish,

        [Parameter()]
        [OfficeDevPnP.Core.Pages.ClientSidePageHeaderType]
        $HeaderType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [System.String]
        $ThumbnailUrl,

        [Parameter()]
        [System.String]
        $PublishMessage,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPClientSideText
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $InstanceId,

        [Parameter()]
        [System.String]
        $Text,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPClientSideWebPart
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSidePagePipeBind]
        $Page,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ClientSideWebPartPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $PropertiesJson,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPContext
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.ClientContext]
        $Context,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPDefaultColumnValues
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [System.String[]]
        $Value,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPDefaultContentTypeToList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ContentTypePipeBind]
        $ContentType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPDefaultPageLayout
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritFromParentSite,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPDocumentSetField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.DocumentSetPipeBind]
        $DocumentSet,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FieldPipeBind]
        $Field,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetSharedField,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SetWelcomePageField,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveSharedField,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveWelcomePageField,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPField
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPFileCheckedIn
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [Microsoft.SharePoint.Client.CheckinType]
        $CheckinType,

        [Parameter()]
        [System.String]
        $Comment,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Approve,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPFileCheckedOut
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPFolderPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.FolderPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearExisting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPermissions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SystemUpdate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPFooter
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Enabled,

        [Parameter()]
        [Microsoft.SharePoint.Client.FooterLayoutType]
        $Layout,

        [Parameter()]
        [Microsoft.SharePoint.Client.FooterVariantThemeType]
        $BackgroundTheme,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $LogoUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPGraphSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GraphSubscriptionPipeBind]
        $Identity,

        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.AssociatedGroupType]
        $SetAssociatedGroup,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Boolean]
        $AllowRequestToJoinLeave,

        [Parameter()]
        [System.Boolean]
        $AutoAcceptRequestToJoinLeave,

        [Parameter()]
        [System.Boolean]
        $AllowMembersEditMembership,

        [Parameter()]
        [System.Boolean]
        $OnlyAllowMembersViewMembership,

        [Parameter()]
        [System.String]
        $RequestToJoinEmail,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPGroupPermissions
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String[]]
        $AddRole,

        [Parameter()]
        [System.String[]]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPHideDefaultThemes
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $HideDefaultThemes,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPHomePage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $RootFolderRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPHomeSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.HubSitePipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $LogoUrl,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $SiteDesignId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $HideNameInNavigation,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RequiresJoinApproval,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPIndexedProperties
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Keys,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPInPlaceRecordsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Boolean]
        $Enabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPKnowledgeHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $KnowledgeHubSiteUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPLabel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $Label,

        [Parameter()]
        [System.Boolean]
        $SyncToItems,

        [Parameter()]
        [System.Boolean]
        $BlockDeletion,

        [Parameter()]
        [System.Boolean]
        $BlockEdit,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPList
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $EnableContentTypes,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BreakRoleInheritance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetRoleInheritance,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CopyRoleAssignments,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearSubscopes,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Boolean]
        $Hidden,

        [Parameter()]
        [System.Boolean]
        $ForceCheckout,

        [Parameter()]
        [Microsoft.SharePoint.Client.ListExperience]
        $ListExperience,

        [Parameter()]
        [System.Boolean]
        $EnableAttachments,

        [Parameter()]
        [System.Boolean]
        $EnableFolderCreation,

        [Parameter()]
        [System.Boolean]
        $EnableVersioning,

        [Parameter()]
        [System.Boolean]
        $EnableMinorVersions,

        [Parameter()]
        [System.UInt32]
        $MajorVersions,

        [Parameter()]
        [System.UInt32]
        $MinorVersions,

        [Parameter()]
        [System.Boolean]
        $EnableModeration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPListInformationRightsManagement
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $Enable,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableExpiration,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableRejection,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowPrint,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowScript,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowWriteCopy,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $DisableDocumentBrowserView,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $DocumentAccessExpireDays,

        [Parameter()]
        [System.Nullable`1[System.DateTime]]
        $DocumentLibraryProtectionExpireDate,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableDocumentAccessExpire,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableDocumentBrowserPublishingView,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableGroupProtection,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableLicenseCacheExpire,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $LicenseCacheExpireDays,

        [Parameter()]
        [System.String]
        $GroupName,

        [Parameter()]
        [System.String]
        $PolicyDescription,

        [Parameter()]
        [System.String]
        $PolicyTitle,

        [Parameter()]
        [System.String]
        $TemplateId,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPListItem
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPListItemAsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [System.DateTime]
        $DeclarationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPListItemPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ClearExisting,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $InheritPermissions,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $SystemUpdate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPListPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String]
        $AddRole,

        [Parameter()]
        [System.String]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPListRecordDeclaration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.EcmListManualRecordDeclaration]]
        $ManualRecordDeclaration,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AutoRecordDeclaration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPMasterPage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $MasterPageServerRelativeUrl,

        [Parameter()]
        [System.String]
        $CustomMasterPageServerRelativeUrl,

        [Parameter()]
        [System.String]
        $MasterPageSiteRelativeUrl,

        [Parameter()]
        [System.String]
        $CustomMasterPageSiteRelativeUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPMicrosoft365Group
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.Microsoft365GroupPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String[]]
        $Owners,

        [Parameter()]
        [System.String[]]
        $Members,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsPrivate,

        [Parameter()]
        [System.String]
        $GroupLogoPath,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CreateTeam,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $HideFromAddressLists,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $HideFromOutlookClients,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPMinimalDownloadStrategy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPPropertyBagValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Indexed,

        [Parameter()]
        [System.String]
        $Folder,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPProvisioningTemplateMetadata
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $TemplateDisplayName,

        [Parameter()]
        [System.String]
        $TemplateImagePreviewUrl,

        [Parameter()]
        [System.Collections.Hashtable]
        $TemplateProperties,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Providers.ITemplateProviderExtension[]]
        $TemplateProviderExtensions,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPRequestAccessEmails
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Emails,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Disabled,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSearchConfiguration
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Configuration,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchConfigurationScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSearchSettings
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SearchBoxInNavBarType]]
        $SearchBoxInNavBar,

        [Parameter()]
        [System.String]
        $SearchPageUrl,

        [Parameter()]
        [System.String]
        $SearchBoxPlaceholderText,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SearchScopeType]]
        $SearchScope,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SearchSettingsScope]
        $Scope,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Identity,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $DisableFlows,

        [Parameter()]
        [System.String]
        $LogoFilePath,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
        $Sharing,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $StorageMaximumLevel,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $StorageWarningLevel,

        [Parameter()]
        [System.Nullable`1[System.Double]]
        $UserCodeMaximumLevel,

        [Parameter()]
        [System.Nullable`1[System.Double]]
        $UserCodeWarningLevel,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.SiteLockState]]
        $LockState,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $AllowSelfServiceUpgrade,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $NoScriptSite,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Owners,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
        $DefaultLinkPermission,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
        $DefaultSharingLinkType,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]]
        $DisableAppViews,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]]
        $DisableCompanyWideSharingLinks,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableSharingForNonOwners,

        [Parameter()]
        [System.Nullable`1[System.UInt32]]
        $LocaleId,

        [Parameter()]
        [System.String]
        $NewUrl,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion]]
        $RestrictedToGeo,

        [Parameter()]
        [System.Nullable`1[System.Management.Automation.SwitchParameter]]
        $SocialBarOnSitePagesDisabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSiteClosure
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.InformationManagement.ClosureState]
        $State,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSiteDesign
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteDesignPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind[]]
        $SiteScriptIds,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $IsDefault,

        [Parameter()]
        [System.String]
        $PreviewImageAltText,

        [Parameter()]
        [System.String]
        $PreviewImageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.SiteWebTemplate]
        $WebTemplate,

        [Parameter()]
        [System.Int32]
        $Version,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Set-PnPSitePolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPSiteScript
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TenantSiteScriptPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.Int32]
        $Version,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Set-PnPStorageEntity
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [System.String]
        $Value,

        [Parameter()]
        [System.String]
        $Comment,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.StorageEntityScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Set-PnPTaxonomyFieldValue
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.SharePoint.Client.ListItem]
        $ListItem,

        [Parameter()]
        [System.String]
        $InternalFieldName,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $TermId,

        [Parameter()]
        [System.String]
        $Label,

        [Parameter()]
        [System.String]
        $TermPath,

        [Parameter()]
        [System.Collections.Hashtable]
        $Terms,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamifyPromptHidden
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamsChannel
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamsTab
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTabPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamsTeam
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $DisplayName,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.Teams.TeamVisibility]
        $Visibility,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowAddRemoveApps,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowChannelMentions,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateRemoveConnectors,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCreateUpdateRemoveTabs,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowCustomMemes,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowDeleteChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGiphy,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGuestCreateUpdateChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowGuestDeleteChannels,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowOwnerDeleteMessages,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowStickersAndMemes,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowTeamMentions,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowUserDeleteMessages,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowUserEditMessages,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamGiphyContentRating]
        $GiphyContentRating,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowInTeamsSearchAndSuggestions,

        [Parameter()]
        [System.String]
        $Classification,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamsTeamArchivedState
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Identity,

        [Parameter()]
        [System.Boolean]
        $Archived,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $SetSiteReadOnlyForMembers,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTeamsTeamPicture
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTenant
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState]]
        $SpecialCharactersStateInFileFolderNames,

        [Parameter()]
        [System.Int32]
        $MinCompatibilityLevel,

        [Parameter()]
        [System.Int32]
        $MaxCompatibilityLevel,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ExternalServicesEnabled,

        [Parameter()]
        [System.String]
        $NoAccessRedirectUrl,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]]
        $SharingCapability,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $DisplayStartASiteOption,

        [Parameter()]
        [System.String]
        $StartASiteFormUrl,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowEveryoneClaim,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowAllUsersClaim,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowEveryoneExceptExternalUsersClaim,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $SearchResolveExactEmailOrUPN,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $OfficeClientADALDisabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $LegacyAuthProtocolsEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $RequireAcceptingAccountMatchInvitedAccount,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ProvisionSharedWithEveryoneFolder,

        [Parameter()]
        [System.String]
        $SignInAccelerationDomain,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableGuestSignInAcceleration,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $UsePersistentCookiesForExplorerView,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $BccExternalSharingInvitations,

        [Parameter()]
        [System.String]
        $BccExternalSharingInvitationsList,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $UserVoiceForFeedbackEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $PublicCdnEnabled,

        [Parameter()]
        [System.String]
        $PublicCdnAllowedFileTypes,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $RequireAnonymousLinksExpireInDays,

        [Parameter()]
        [System.String]
        $SharingAllowedDomainList,

        [Parameter()]
        [System.String]
        $SharingBlockedDomainList,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]]
        $SharingDomainRestrictionMode,

        [Parameter()]
        [System.Nullable`1[System.Int64]]
        $OneDriveStorageQuota,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $OneDriveForGuestsEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $IPAddressEnforcement,

        [Parameter()]
        [System.String]
        $IPAddressAllowList,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $IPAddressWACTokenLifetime,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $UseFindPeopleInPeoplePicker,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]]
        $DefaultSharingLinkType,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SharingState]]
        $ODBMembersCanShare,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.SharingState]]
        $ODBAccessRequests,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $PreventExternalUsersFromResharing,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ShowPeoplePickerSuggestionsForGuestUsers,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.AnonymousLinkType]]
        $FileAnonymousLinkType,

        [Parameter()]
        [System.Nullable`1[Microsoft.SharePoint.Client.AnonymousLinkType]]
        $FolderAnonymousLinkType,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $NotifyOwnersWhenItemsReshared,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $NotifyOwnersWhenInvitationsAccepted,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $NotificationsInOneDriveForBusinessEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $NotificationsInSharePointEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $OwnerAnonymousNotification,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $SocialBarOnSitePagesDisabled,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $OrphanedPersonalSitesRetentionPeriod,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $DisallowInfectedFileDownload,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]]
        $DefaultLinkPermission,

        [Parameter()]
        [System.Nullable`1[Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType]]
        $ConditionalAccessPolicy,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowDownloadingNonWebViewableFiles,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $AllowEditing,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $ApplyAppEnforcedRestrictionsToAdHocRecipients,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $FilePickerExternalImageSearchEnabled,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EmailAttestationRequired,

        [Parameter()]
        [System.Nullable`1[System.Int32]]
        $EmailAttestationReAuthDays,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $HideDefaultThemes,

        [Parameter()]
        [System.Guid[]]
        $DisabledWebPartIds,

        [Parameter()]
        [System.Nullable`1[System.Boolean]]
        $EnableAIPIntegration,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTenantAppCatalogUrl
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Set-PnPTenantCdnEnabled
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoDefaultOrigins,

        [Parameter()]
        [System.Boolean]
        $Enable,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.CdnType]
        $CdnType,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTenantCdnPolicy
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType]
        $CdnType,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType]
        $PolicyType,

        [Parameter()]
        [System.String]
        $PolicyValue,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTenantSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.UInt32]
        $LocaleId,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $AllowSelfServiceUpgrade,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Owners,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DenyAddAndCustomizePages,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities]
        $SharingCapability,

        [Parameter()]
        [System.Int64]
        $StorageMaximumLevel,

        [Parameter()]
        [System.Int64]
        $StorageWarningLevel,

        [Parameter()]
        [System.Double]
        $UserCodeMaximumLevel,

        [Parameter()]
        [System.Double]
        $UserCodeWarningLevel,

        [Parameter()]
        [System.Nullable`1[OfficeDevPnP.Core.SiteLockState]]
        $LockState,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType]
        $DefaultLinkPermission,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingLinkType]
        $DefaultSharingLinkType,

        [Parameter()]
        [System.String]
        $SharingAllowedDomainList,

        [Parameter()]
        [System.String]
        $SharingBlockedDomainList,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlockDownloadOfNonViewableFiles,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes]
        $SharingDomainRestrictionMode,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy]
        $DisableAppViews,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy]
        $DisableCompanyWideSharingLinks,

        [Parameter()]
        [Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy]
        $DisableFlows,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Wait,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTenantSyncClientRestriction
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $BlockMacSync,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisableReportProblemDialog,

        [Parameter()]
        [System.Collections.Generic.List`1[System.Guid]]
        $DomainGuids,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Enable,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $ExcludedFileExtensions,

        [Parameter()]
        [PnP.PowerShell.Commands.Enums.GrooveBlockOption]
        $GrooveBlockOption,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTermGroup
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TaxonomyItemPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermGroup]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTermSet
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermSet]]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TermGroupPipeBind]
        $TermGroup,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GenericObjectNameIdPipeBind`1[Microsoft.SharePoint.Client.Taxonomy.TermStore]]
        $TermStore,

        [Parameter()]
        [System.String]
        $Name,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $Owner,

        [Parameter()]
        [System.String]
        $Contact,

        [Parameter()]
        [System.Collections.Hashtable]
        $CustomProperties,

        [Parameter()]
        [System.String]
        $StakeholderToAdd,

        [Parameter()]
        [System.String]
        $StakeholderToDelete,

        [Parameter()]
        [System.Boolean]
        $IsAvailableForTagging,

        [Parameter()]
        [System.Boolean]
        $IsOpenForTermCreation,

        [Parameter()]
        [System.Boolean]
        $UseForSiteNavigation,

        [Parameter()]
        [System.Boolean]
        $UseForFacetedNavigation,

        [Parameter()]
        [System.String]
        $SetTargetPageForTerms,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveTargetPageforTerms,

        [Parameter()]
        [System.String]
        $SetCatalogItemPageForCategories,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RemoveCatalogItemPageForCategories,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ColorPaletteUrl,

        [Parameter()]
        [System.String]
        $FontSchemeUrl,

        [Parameter()]
        [System.String]
        $BackgroundImageUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ShareGenerated,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ResetSubwebsToInherit,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $UpdateRootWebOnly,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPTraceLog
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $On,

        [Parameter()]
        [System.String]
        $LogFile,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WriteToConsole,

        [Parameter()]
        [OfficeDevPnP.Core.Diagnostics.LogLevel]
        $Level,

        [Parameter()]
        [System.String]
        $Delimiter,

        [Parameter()]
        [System.Int32]
        $IndentSize,

        [Parameter()]
        [System.Boolean]
        $AutoFlush,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Off,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPUserOneDriveQuota
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Account,

        [Parameter()]
        [System.Int64]
        $Quota,

        [Parameter()]
        [System.Int64]
        $QuotaWarning,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPUserProfileProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String[]]
        $Values
    )
}
function Set-PnPView
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.Collections.Hashtable]
        $Values
    )
}
function Set-PnPWeb
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $SiteLogoUrl,

        [Parameter()]
        [System.String]
        $AlternateCssUrl,

        [Parameter()]
        [System.String]
        $Title,

        [Parameter()]
        [System.String]
        $Description,

        [Parameter()]
        [System.String]
        $MasterUrl,

        [Parameter()]
        [System.String]
        $CustomMasterUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $QuickLaunchEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MembersCanShare,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NoCrawl,

        [Parameter()]
        [Microsoft.SharePoint.Client.HeaderLayoutType]
        $HeaderLayout,

        [Parameter()]
        [Microsoft.SharePoint.Client.SPVariantThemeType]
        $HeaderEmphasis,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $NavAudienceTargetingEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $MegaMenuEnabled,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $DisablePowerAutomate,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $CommentsOnSitePagesDisabled,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPWebhookSubscription
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebhookSubscriptionPipeBind]
        $Subscription,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [System.String]
        $NotificationUrl,

        [Parameter()]
        [System.DateTime]
        $ExpirationDate,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPWebPartProperty
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Key,

        [Parameter()]
        [System.Management.Automation.PSObject]
        $Value,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPWebPermission
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Url,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GroupPipeBind]
        $Group,

        [Parameter()]
        [System.String]
        $User,

        [Parameter()]
        [System.String[]]
        $AddRole,

        [Parameter()]
        [System.String[]]
        $RemoveRole,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPWebTheme
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ThemePipeBind]
        $Theme,

        [Parameter()]
        [System.String]
        $WebUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Set-PnPWikiPageContent
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Content,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.String]
        $ServerRelativePageUrl,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Start-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowSubscriptionPipeBind]
        $Subscription,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $ListItem,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Stop-PnPWorkflowInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WorkflowInstancePipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Submit-PnPSearchQuery
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Query,

        [Parameter()]
        [System.Int32]
        $StartRow,

        [Parameter()]
        [System.Int32]
        $MaxResults,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $All,

        [Parameter()]
        [System.Boolean]
        $TrimDuplicates,

        [Parameter()]
        [System.Collections.Hashtable]
        $Properties,

        [Parameter()]
        [System.String]
        $Refiners,

        [Parameter()]
        [System.Int32]
        $Culture,

        [Parameter()]
        [System.String]
        $QueryTemplate,

        [Parameter()]
        [System.String[]]
        $SelectProperties,

        [Parameter()]
        [System.String[]]
        $RefinementFilters,

        [Parameter()]
        [System.Collections.Hashtable]
        $SortList,

        [Parameter()]
        [System.String]
        $RankingModelId,

        [Parameter()]
        [System.String]
        $ClientType,

        [Parameter()]
        [System.String]
        $CollapseSpecification,

        [Parameter()]
        [System.String]
        $HiddenConstraints,

        [Parameter()]
        [System.Int32]
        $TimeZoneId,

        [Parameter()]
        [System.Boolean]
        $EnablePhonetic,

        [Parameter()]
        [System.Boolean]
        $EnableStemming,

        [Parameter()]
        [System.Boolean]
        $EnableQueryRules,

        [Parameter()]
        [System.Guid]
        $SourceId,

        [Parameter()]
        [System.Boolean]
        $ProcessBestBets,

        [Parameter()]
        [System.Boolean]
        $ProcessPersonalFavorites,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $RelevantResults,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Submit-PnPTeamsChannelMessage
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsTeamPipeBind]
        $Team,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsChannelPipeBind]
        $Channel,

        [Parameter()]
        [System.String]
        $Message,

        [Parameter()]
        [PnP.PowerShell.Commands.Model.Teams.TeamChannelMessageContentType]
        $ContentType,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Important,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Sync-PnPAppToTeams
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Test-PnPListItemIsRecord
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListPipeBind]
        $List,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.ListItemPipeBind]
        $Identity,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Test-PnPOffice365GroupAliasIsUsed
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [System.String]
        $Alias,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Test-PnPTenantTemplate
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Provisioning.Model.ProvisioningHierarchy]
        $Template,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Uninstall-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Uninstall-PnPAppInstance
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppPipeBind]
        $Identity,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Force,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.WebPipeBind]
        $Web,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Confirm,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $WhatIf
    )
}
function Uninstall-PnPSolution
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.GuidPipeBind]
        $PackageId,

        [Parameter()]
        [System.String]
        $PackageName,

        [Parameter()]
        [System.Int32]
        $MajorVersion,

        [Parameter()]
        [System.Int32]
        $MinorVersion,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Unpublish-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Unregister-PnPHubSite
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.SitePipeBind]
        $Site,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Update-PnPApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.AppMetadataPipeBind]
        $Identity,

        [Parameter()]
        [OfficeDevPnP.Core.Enums.AppCatalogScope]
        $Scope,

        [Parameter()]
        [PnP.PowerShell.Commands.Base.PnPConnection]
        $Connection,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Update-PnPSiteClassification
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [OfficeDevPnP.Core.Framework.Graph.Model.SiteClassificationsSettings]
        $Settings,

        [Parameter()]
        [System.Collections.Generic.List`1[System.String]]
        $Classifications,

        [Parameter()]
        [System.String]
        $DefaultClassification,

        [Parameter()]
        [System.String]
        $UsageGuidelinesUrl,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
function Update-PnPTeamsApp
{
    [CmdletBinding()]
    param(
        [Parameter()]
        [PnP.PowerShell.Commands.Base.PipeBinds.TeamsAppPipeBind]
        $Identity,

        [Parameter()]
        [System.String]
        $Path,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $ByPassPermissionCheck,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Verbose,

        [Parameter()]
        [System.Management.Automation.SwitchParameter]
        $Debug
    )
}
#endregion


#region PowerPlatforms
function Add-AdminPowerAppsSyncUser
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Add-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateSet('Internal','Viral')]
    [string[]]
    ${Types},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Add-ConnectorToBusinessDataGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Add-CustomConnectorToPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Mandatory=$true, Position=2, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('lbi','hbi')]
    [string]
    ${GroupName},

    [Parameter(Mandatory=$true, Position=3, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorId},

    [Parameter(Mandatory=$true, Position=4, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorType},

    [Parameter(Position=5)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=6)]
    [string]
    ${ApiVersion})

}
function Add-PowerAppsAccount
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${Audience},

    [Parameter(Position=1)]
    [ValidateSet('prod','preview','tip1','tip2','usgov','usgovhigh')]
    [string]
    ${Endpoint},

    [Parameter(Position=2)]
    [string]
    ${Username},

    [Parameter(Position=3)]
    [securestring]
    ${Password},

    [Parameter(Position=4)]
    [string]
    ${TenantID},

    [Parameter(Position=5)]
    [string]
    ${CertificateThumbprint},

    [Parameter(Position=6)]
    [string]
    ${ClientSecret},

    [Parameter(Position=7)]
    [string]
    ${ApplicationId})

}
function Clear-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Clear-AdminPowerAppAsFeatured
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Clear-AdminPowerAppAsHero
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Disable-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Enable-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Get-AdminDeletedPowerAppsList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Filter', Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='Filter', Position=1, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Name', Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [System.Object]
    ${ApiVersion})

}
function Get-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Environment', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Environment', Mandatory=$true)]
    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Flow')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='Environment')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Get-AdminFlowUserDetails
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerApp
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseCurrencies
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseLanguages
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppCdsDatabaseTemplates
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnection
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Connector', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='Connector')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnectionReferences
{
    [CmdletBinding(DefaultParameterSetName='Connector')]
param(
    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName})

}
function Get-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [string]
    ${PrincipalObjectId},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnector
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Filter', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Connector', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Connector', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Filter')]
    [Parameter(ParameterSetName='Connector')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=2)]
    [string]
    ${PrincipalObjectId},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='User', Position=0)]
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Default')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${CreatedBy},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ReturnCdsDatabaseType})

}
function Get-AdminPowerAppEnvironmentLocations
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string[]]
    ${Filter},

    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Environment', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Environment')]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='Environment')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppLicenses
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${OutputFilePath},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Environment', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Environment', Mandatory=$true)]
    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='App')]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Environment')]
    [Parameter(ParameterSetName='User')]
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppSoftDeletedEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Filter')]
param(
    [Parameter(ParameterSetName='Filter', Position=0)]
    [string[]]
    ${Filter},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion})

}
function Get-AdminPowerAppsUserDetails
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${UserPrincipalName},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${OutputFilePath},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Get-AdminRecoverDeletedPowerApp
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Get-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${ApiVersion})

}
function Get-DlpPolicy
{

param()

}
function Get-JwtToken
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Audience})

}
function Get-TenantDetailsFromGraph
{

param(
    [string]
    ${GraphApiVersion})

}
function Get-TenantSettings
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [string]
    ${ApiVersion})

}
function Get-UsersOrGroupsFromGraph
{
    [CmdletBinding(DefaultParameterSetName='Id')]
param(
    [Parameter(ParameterSetName='Id', Mandatory=$true)]
    [string]
    ${ObjectId},

    [Parameter(ParameterSetName='Search', Mandatory=$true)]
    [string]
    ${SearchString},

    [Parameter(ParameterSetName='Id')]
    [Parameter(ParameterSetName='Search')]
    [string]
    ${GraphApiVersion})

}
function InvokeApi
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Method},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Route},

    [Parameter(Position=2)]
    [System.Object]
    ${Body},

    [switch]
    ${ThrowOnFailure},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function InvokeApiNoParseContent
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${Method},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Route},

    [Parameter(Position=2)]
    [System.Object]
    ${Body},

    [switch]
    ${ThrowOnFailure},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function New-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [bool]
    ${BlockNonBusinessDataGroup},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Name')]
    [ValidateSet('2016-10-01-preview','2018-11-01')]
    [string]
    ${SchemaVersion})

}
function New-AdminPowerAppCdsDatabase
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CurrencyName},

    [Parameter(Mandatory=$true, Position=2, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LanguageName},

    [Parameter(Position=3)]
    [bool]
    ${WaitUntilFinished},

    [Parameter(Position=4)]
    [string[]]
    ${Templates},

    [Parameter(Position=5)]
    [string]
    ${SecurityGroupId},

    [Parameter(Position=6)]
    [string]
    ${DomainName},

    [Parameter(Position=7, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function New-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Name')]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LocationName},

    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [ValidateSet('Trial','Sandbox','Production')]
    [string]
    ${EnvironmentSku},

    [switch]
    ${ProvisionDatabase},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${CurrencyName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${LanguageName},

    [string[]]
    ${Templates},

    [string]
    ${SecurityGroupId},

    [string]
    ${DomainName},

    [bool]
    ${WaitUntilFinished},

    [string]
    ${ApiVersion})

}
function New-DlpPolicy
{

param()

}
function Recover-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [bool]
    ${WaitUntilFinished},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlow
{
    [CmdletBinding(DefaultParameterSetName='Flow')]
param(
    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Flow', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Flow')]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlowApprovals
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Remove-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='Owner')]
param(
    [Parameter(ParameterSetName='Owner')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Owner', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId})

}
function Remove-AdminFlowUserDetails
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${UserId},

    [Parameter(ParameterSetName='Name', ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerApp
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnection
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnector
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppEnvironment
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${RoleId},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion})

}
function Remove-AllowedConsentPlans
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateSet('Internal','Viral')]
    [string[]]
    ${Types},

    [Parameter(Position=1)]
    [bool]
    ${Prompt},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Remove-ConnectorFromBusinessDataGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Remove-CustomConnectorFromPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${PolicyName},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(Position=2)]
    [string]
    ${EnvironmentName},

    [Parameter(Position=3)]
    [string]
    ${ApiVersion})

}
function Remove-DlpPolicy
{

param()

}
function Remove-LegacyCDSDatabase
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${DatabaseId})

}
function Remove-PowerAppsAccount
{
    [CmdletBinding()]
param()

}
function ReplaceMacro
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Input},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Macro},

    [Parameter(Position=2)]
    [string]
    ${Value})

}
function Select-CurrentEnvironment
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Default', Mandatory=$true)]
    [switch]
    ${Default})

}
function Set-AdminDlpPolicy
{
    [CmdletBinding(DefaultParameterSetName='TenantPolicy')]
param(
    [Parameter(ParameterSetName='EnvironmentPolicy', Mandatory=$true)]
    [Parameter(ParameterSetName='TenantPolicy', Mandatory=$true)]
    [string]
    ${PolicyName},

    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('None','Include','Exclude')]
    [string]
    ${FilterType},

    [Parameter(ParameterSetName='TenantPolicy')]
    [string]
    ${Environments},

    [Parameter(ParameterSetName='EnvironmentPolicy')]
    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('hbi','lbi')]
    [string]
    ${DefaultGroup},

    [Parameter(ParameterSetName='EnvironmentPolicy', Mandatory=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='EnvironmentPolicy')]
    [Parameter(ParameterSetName='TenantPolicy')]
    [ValidateSet('Block','Unblock')]
    [string]
    ${SetNonBusinessDataGroupState},

    [string]
    ${ApiVersion},

    [ValidateSet('2016-11-01-preview','2018-11-01')]
    [string]
    ${SchemaVersion})

}
function Set-AdminFlowOwnerRole
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${FlowName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateSet('User','Group')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateSet('CanView','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppApisToBypassConsent
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppAsFeatured
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppAsHero
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='Name')]
    [Parameter(ParameterSetName='Filter')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='Filter')]
    [bool]
    ${ForceLease})

}
function Set-AdminPowerAppCdsAdditionalNotificationEmails
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${EnvironmentName},

    [Parameter(Mandatory=$true, Position=1)]
    [string[]]
    ${AdditionalNotificationEmails},

    [Parameter(Position=2)]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppConnectionRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectionName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppConnectorRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${ConnectorName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppEnvironmentDisplayName
{
    [CmdletBinding(DefaultParameterSetName='Name')]
param(
    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='Name', Mandatory=$true)]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='Name')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppEnvironmentRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('EnvironmentAdmin','EnvironmentMaker')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-AdminPowerAppOwner
{
    [CmdletBinding(DefaultParameterSetName='App')]
param(
    [Parameter(ParameterSetName='App')]
    [string]
    ${ApiVersion},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='App', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='App', Mandatory=$true)]
    [string]
    ${AppOwner})

}
function Set-AdminPowerAppRoleAssignment
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${AppName},

    [Parameter(ParameterSetName='User', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${EnvironmentName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true)]
    [ValidateSet('CanView','CanViewWithShare','CanEdit')]
    [string]
    ${RoleName},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant', Mandatory=$true)]
    [ValidateSet('User','Group','Tenant')]
    [string]
    ${PrincipalType},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [Parameter(ParameterSetName='Tenant')]
    [string]
    ${PrincipalObjectId},

    [Parameter(ParameterSetName='Tenant')]
    [Parameter(ParameterSetName='User')]
    [string]
    ${ApiVersion})

}
function Set-DlpPolicy
{

param()

}
function Set-TenantSettings
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [System.Object]
    ${RequestBody},

    [Parameter(Position=1)]
    [string]
    ${ApiVersion})

}
function Test-PowerAppsAccount
{
    [CmdletBinding()]
param()

}
#endregion
#region SecurityComplianceCenter
function Add-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Add-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Delete-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-ComplianceTagStorage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Execute-AzureAdLabelSync
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Execute-UnifiedPolicyCmdletBatch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CmdletData},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExecutionId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MigrationId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-FilePlanProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identities},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ActivityAlert
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AdminAuditLogConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeBindings},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${RoleGroup},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RecentOnly},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ShowCaseAdmin},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceCaseStatistics
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BeginDateTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EndDateTime},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${LoadTag},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [switch]
    ${Purge},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${IncludeCredential},

    [switch]
    ${Details},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Export},

    [switch]
    ${Preview},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FilterName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludingLabelState},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ComplianceTagStorage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DataRetentionReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceDetailsReportFilter
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceCompliancePolicyInventory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceReportDate
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Expression},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceSummaryReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DeviceUserName},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DeviceComplianceStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${DevicePlatform},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceCompliancePolicy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserInventory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceComplianceUserReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Expression},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DeviceId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConditionalAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CompareToWorkload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${CompareToWorkload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DevicePolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [System.Object]
    ${IncludeExecutionRuleGuids},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-DlpDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DlpCompliancePolicy},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${Expression},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpComplianceRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${SummarizeBy},

    [switch]
    ${AsJob})

}
function Get-DlpEdmSchema
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpKeywordDictionary
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationType
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-DlpSiDetectionsReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitiveType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyAuthority
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyCategory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyCitation
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyDepartment
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyReferenceId
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertyStructure
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${IncludeAdditionalInfo},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-FilePlanPropertySubCategory
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Group
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierPoliciesApplicationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${All},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExoPolicyId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierRecipientStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Identity2},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportDetails
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InformationBarrierReportSummary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Source},

    [System.Object]
    ${Page},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [System.Object]
    ${AggregateBy},

    [System.Object]
    ${TargetUsers},

    [System.Object]
    ${InformationBarrierPolicy},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InitiatingUser},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-InsiderRiskPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-Label
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LabelPolicy
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-LabelPolicyRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-LongTermAuditItems
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LtaAddress},

    [System.Object]
    ${PageOffset},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${StartDate},

    [System.Object]
    ${LabelId},

    [switch]
    ${AsJob})

}
function Get-LongTermAuditStats
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LtaAddress},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-MailFilterListReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ProbeTag},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Expression},

    [System.Object]
    ${SelectionTarget},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Domain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-ManagementRole
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RoleType},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${CmdletParameters},

    [System.Object]
    ${ScriptParameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlet},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Script},

    [switch]
    ${GetChildren},

    [switch]
    ${Recurse},

    [switch]
    ${AsJob})

}
function Get-OrganizationSegment
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-PolicyConfig
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-ProtectionAlert
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessage
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MessageId},

    [System.Object]
    ${Page},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Reported},

    [System.Object]
    ${Direction},

    [System.Object]
    ${QuarantineTypes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndReceivedDate},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PageSize},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RecipientAddress},

    [System.Object]
    ${StartExpiresDate},

    [System.Object]
    ${SenderAddress},

    [System.Object]
    ${Subject},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${StartReceivedDate},

    [System.Object]
    ${Type},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${MyItems},

    [System.Object]
    ${Domain},

    [System.Object]
    ${EndExpiresDate},

    [switch]
    ${AsJob})

}
function Get-QuarantineMessageHeader
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-Recipient
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PropertySet},

    [System.Object]
    ${Properties},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${BookmarkDisplayName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AuthenticationType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RecipientType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RecipientPreviewFilter},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IncludeBookmarkObject},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Capabilities},

    [System.Object]
    ${Filter},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Anr},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${TeamsPolicyOnly},

    [switch]
    ${ExcludeTeamsPolicy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [switch]
    ${RetentionRuleTypes},

    [switch]
    ${AsJob})

}
function Get-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${ShowPartnerLinked},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SCInsights
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EndDate},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SecurityPrincipal
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${OrganizationalUnit},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Types},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [switch]
    ${RoleGroupAssignable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewActivity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyId},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewOverallProgressReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Policies},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewPolicyV2
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Policies},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${StartDate},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-SupervisoryReviewTopCasesReport
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Page},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PageSize},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${DistributionDetail},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Operation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${UserId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RecordType},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-User
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SortBy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PublicFolder},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RecipientTypeDetails},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-FilePlanProperty
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${ValidateOnly},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${RawCsv},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Install-UnifiedCompliancePrerequisite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${LoadOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ForceInitialize},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PolicyCenterSiteOwner},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Migrate-DlpFingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ActivityAlert
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${UserId},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${RecordType},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Description},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EmailCulture},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${ScopeLevel},

    [System.Object]
    ${Category},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Condition},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Type},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Multiplier},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AdminAuditLogSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExternalAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${StatusMailRecipients},

    [System.Object]
    ${Parameters},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${StartDate},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AuditOperation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExchangeLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SharePointLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${Description},

    [System.Object]
    ${SourceCaseType},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExternalId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SecondaryCaseType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SharePointAssetIdQuery},

    [System.Object]
    ${Name},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EventDateTime},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AssetId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [switch]
    ${PreviewOnly},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventTags},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ExchangeAssetIdQuery},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceSearch
{

param(
    [System.Object]
    ${RefinerNames},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IncludeUserAppContent},

    [System.Object]
    ${SharePointLocationExclusion},

    [System.Object]
    ${AllowNotFoundExchangeLocationsEnabled},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${Case},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeOrgContent},

    [System.Object]
    ${HoldNames},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExchangeLocationExclusion},

    [System.Object]
    ${Language},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ContentMatchQuery},

    [switch]
    ${AsJob})

}
function New-ComplianceSearchAction
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SearchName},

    [switch]
    ${IncludeCredential},

    [System.Object]
    ${IncludeSharePointDocumentVersions},

    [System.Object]
    ${ReferenceActionName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${FileTypeExclusionsForUnindexedItems},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${RetryOnError},

    [System.Object]
    ${Version},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${JobOptions},

    [switch]
    ${RetentionReport},

    [switch]
    ${Purge},

    [System.Object]
    ${PurgeType},

    [switch]
    ${Report},

    [System.Object]
    ${Region},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableDedupe},

    [System.Object]
    ${Scope},

    [System.Object]
    ${SearchNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ActionName},

    [switch]
    ${AsJob})

}
function New-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [System.Object]
    ${FilterName},

    [System.Object]
    ${Region},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ComplianceTag
{

param(
    [System.Object]
    ${FilePlanProperty},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${IsRecordLabel},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Notes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RetentionType},

    [System.Object]
    ${EventType},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReviewerEmail},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [System.Object]
    ${RetentionAction},

    [switch]
    ${AsJob})

}
function New-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceConditionalAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${Policy},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${AllowJailbroken},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function New-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceConfigurationRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${Policy},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function New-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockUnsupportedDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyPolicyTo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExclusionList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SharePointLocationException},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${ExchangeSenderMemberOf},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExchangeSenderMemberOfException},

    [System.Object]
    ${Mode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${TeamsLocation},

    [switch]
    ${AsJob})

}
function New-DlpComplianceRule
{

param(
    [System.Object]
    ${DocumentNameMatchesPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${ExceptIfContentContainsSensitiveInformation},

    [System.Object]
    ${ExceptIfDocumentNameMatchesWords},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${ExceptIfProcessingLimitExceeded},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${NotifyPolicyTipCustomText},

    [System.Object]
    ${DocumentNameMatchesWords},

    [System.Object]
    ${NotifyAllowOverride},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${ProcessingLimitExceeded},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfSenderIPRanges},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${DocumentIsPasswordProtected},

    [System.Object]
    ${GenerateAlert},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${ContentExtensionMatchesWords},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ImmutableId},

    [System.Object]
    ${BlockAccessScope},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfAccessScope},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${Comment},

    [System.Object]
    ${NotifyPolicyTipCustomTextTranslations},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${From},

    [System.Object]
    ${AccessScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${ExceptIfContentPropertyContainsWords},

    [System.Object]
    ${ExceptIfDocumentNameMatchesPatterns},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExceptIfDocumentIsPasswordProtected},

    [System.Object]
    ${NotifyEmailCustomText},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ExceptIfSentTo},

    [System.Object]
    ${Policy},

    [System.Object]
    ${SenderIPRanges},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${BlockAccess},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopPolicyProcessing},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${ReportSeverityLevel},

    [System.Object]
    ${ExceptIfDocumentIsUnsupported},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${ContentPropertyContainsWords},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${DocumentIsUnsupported},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${ExceptIfContentExtensionMatchesWords},

    [System.Object]
    ${Name},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EncryptRMSTemplate},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${SetHeader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function New-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpFingerprint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FileData},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MigrationId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CitationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CitationJurisdiction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ParentId},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExchangeLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SharePointLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentDateFrom},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${HoldContent},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [System.Object]
    ${ContentDateTo},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${HoldDurationDisplayHint},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SegmentsAllowed},

    [System.Object]
    ${AssignedSegment},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SegmentAllowedFilter},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${SegmentsBlocked},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-InsiderRiskPolicy
{

param(
    [System.Object]
    ${HistoricTimeSpan},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitivityLabels},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${PostTerminationActivity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsSites},

    [System.Object]
    ${InsiderRiskScenario},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${FutureTerminationWindow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Indicators},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SharepointSites},

    [System.Object]
    ${TenantSetting},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${DlpSensitiveTypes},

    [System.Object]
    ${InScopeTimeSpan},

    [System.Object]
    ${SchemaVersion},

    [System.Object]
    ${PastTerminationWindow},

    [switch]
    ${AsJob})

}
function New-Label
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LocaleSettings},

    [System.Object]
    ${ParentId},

    [System.Object]
    ${DisplayName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Setting},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${LabelActions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AdvancedSettings},

    [System.Object]
    ${Settings},

    [System.Object]
    ${Tooltip},

    [System.Object]
    ${Conditions},

    [System.Object]
    ${MigrationId},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-LabelPolicy
{

param(
    [System.Object]
    ${Labels},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ModernGroupLocationException},

    [System.Object]
    ${Settings},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AdvancedSettings},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Setting},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${PublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${MigrationId},

    [System.Object]
    ${ModernGroupLocation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExchangeLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${SkypeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkypeLocationException},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointLocationException},

    [switch]
    ${AsJob})

}
function New-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserGroupFilter},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-ProtectionAlert
{

param(
    [System.Object]
    ${NotificationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyUserThrottleWindow},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Description},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${AlertBy},

    [System.Object]
    ${NotifyUserThrottleThreshold},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationCulture},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AggregationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VolumeThreshold},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Category},

    [System.Object]
    ${AlertFor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LogicalOperationName},

    [System.Object]
    ${NotifyUserSuppressionExpiryDate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Filter},

    [System.Object]
    ${NotifyUserOnFilterMatch},

    [System.Object]
    ${ThreatType},

    [System.Object]
    ${Disabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Name},

    [switch]
    ${AsJob})

}
function New-RetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TeamsChannelLocation},

    [System.Object]
    ${ModernGroupLocationException},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${SharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${OneDriveLocationException},

    [System.Object]
    ${PublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ModernGroupLocation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExchangeLocationException},

    [System.Object]
    ${TeamsChatLocationException},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TeamsChatLocation},

    [System.Object]
    ${OneDriveLocation},

    [System.Object]
    ${SkypeLocation},

    [System.Object]
    ${TeamsChannelLocationException},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SkypeLocationException},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SharePointLocationException},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function New-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PublishComplianceTag},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyComplianceTag},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ExpirationDateOption},

    [System.Object]
    ${Comment},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MachineLearningModelIDs},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ExcludedItemClasses},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RetentionDurationDisplayHint},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function New-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Roles},

    [switch]
    ${AsJob})

}
function New-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ContentSources},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Condition},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchesDataModel},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CcsiDataModelOperator},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SamplingRate},

    [switch]
    ${AsJob})

}
function New-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TeamsChatLocationException},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TeamsChannelLocationException},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TeamsChatLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${RestrictiveRetention},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TeamsChannelLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Policy},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Preview-QuarantineMessage
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Release-QuarantineMessage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ReportFalsePositive},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AllowSender},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${ReleaseToAll},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ActivityAlert
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${PreviewOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FilterName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConditionalAccessRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-InsiderRiskPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-Label
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-LabelPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-ProtectionAlert
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RecordLabel
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LabelName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ItemUrl},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Member},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TeamsRetentionCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ForceDeletion},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-AdminAuditLog
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EndDate},

    [System.Object]
    ${ObjectIds},

    [System.Object]
    ${StartIndex},

    [System.Object]
    ${ExternalAccess},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Parameters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Cmdlets},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${IsSuccess},

    [System.Object]
    ${StartDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ActivityAlert
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${UserId},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RecordType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Description},

    [System.Object]
    ${EmailCulture},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${ScopeLevel},

    [System.Object]
    ${Category},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Condition},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Disabled},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Multiplier},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuditConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Workload},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Organization},

    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-AuditConfigurationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AuditOperation},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CaseHoldPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddExchangeLocation},

    [switch]
    ${UpdateStatistics},

    [System.Object]
    ${AddSharePointLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddPublicFolderLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CaseHoldRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceCase
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CaseType},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [System.Object]
    ${ExternalId},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${Reopen},

    [System.Object]
    ${Identity},

    [switch]
    ${Close},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceRetentionEvent
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${SharePointAssetIdQuery},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AssetId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EventTags},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ExchangeAssetIdQuery},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceRetentionEventType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceSearch
{

param(
    [System.Object]
    ${RefinerNames},

    [System.Object]
    ${ContentMatchQuery},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${SharePointLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AddSharePointLocation},

    [System.Object]
    ${AddExchangeLocationExclusion},

    [System.Object]
    ${IncludeUserAppContent},

    [System.Object]
    ${SharePointLocationExclusion},

    [System.Object]
    ${AllowNotFoundExchangeLocationsEnabled},

    [switch]
    ${Force},

    [System.Object]
    ${ExchangeLocationExclusion},

    [System.Object]
    ${AddSharePointLocationExclusion},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExchangeLocation},

    [System.Object]
    ${PublicFolderLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoveSharePointLocationExclusion},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IncludeOrgContent},

    [System.Object]
    ${RemoveExchangeLocationExclusion},

    [System.Object]
    ${HoldNames},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Language},

    [System.Object]
    ${Name},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-ComplianceSearchAction
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${ChangeExportKey},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceSecurityFilter
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filters},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [System.Object]
    ${FilterName},

    [System.Object]
    ${Region},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ComplianceTag
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FilePlanProperty},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Notes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EventType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ReviewerEmail},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConditionalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConditionalAccessRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${AllowJailbroken},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function Set-DeviceConfigurationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceConfigurationRule
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${CameraEnabled},

    [System.Object]
    ${AllowVideoConferencing},

    [System.Object]
    ${AntiVirusSignatureStatus},

    [System.Object]
    ${FirewallStatus},

    [System.Object]
    ${AllowAppStore},

    [System.Object]
    ${AllowAssistantWhileLocked},

    [System.Object]
    ${AppsRating},

    [System.Object]
    ${PasswordHistoryCount},

    [System.Object]
    ${PasswordQuality},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${PhoneMemoryEncrypted},

    [System.Object]
    ${EmailAddress},

    [System.Object]
    ${BluetoothEnabled},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowConvenienceLogon},

    [System.Object]
    ${MaxPasswordGracePeriod},

    [System.Object]
    ${AllowVoiceAssistant},

    [System.Object]
    ${AllowiCloudDocSync},

    [System.Object]
    ${AntiVirusStatus},

    [System.Object]
    ${TVShowsRating},

    [System.Object]
    ${ForceAppStorePassword},

    [System.Object]
    ${AllowDiagnosticSubmission},

    [System.Object]
    ${AutoUpdateStatus},

    [System.Object]
    ${WLANEnabled},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowVoiceDialing},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AccountName},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PasswordComplexity},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PasswordTimeout},

    [System.Object]
    ${SmartScreenEnabled},

    [System.Object]
    ${AllowiCloudPhotoSync},

    [System.Object]
    ${AllowSimplePassword},

    [System.Object]
    ${AllowPassbookWhileLocked},

    [System.Object]
    ${PasswordMinimumLength},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PasswordRequired},

    [System.Object]
    ${MaxPasswordAttemptsBeforeWipe},

    [System.Object]
    ${MoviesRating},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${WorkFoldersSyncUrl},

    [System.Object]
    ${PasswordExpirationDays},

    [System.Object]
    ${UserAccountControlStatus},

    [System.Object]
    ${RequireEmailProfile},

    [System.Object]
    ${ForceEncryptedBackup},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccountUserName},

    [System.Object]
    ${AllowScreenshot},

    [System.Object]
    ${AllowiCloudBackup},

    [System.Object]
    ${TargetGroups},

    [System.Object]
    ${ExchangeActiveSyncHost},

    [System.Object]
    ${PasswordMinComplexChars},

    [System.Object]
    ${SystemSecurityTLS},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegionRatings},

    [System.Object]
    ${EnableRemovableStorage},

    [switch]
    ${AsJob})

}
function Set-DeviceTenantPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DeviceTenantRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockUnsupportedDevices},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyPolicyTo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExclusionList},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${AddTeamsLocation},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${ExchangeSenderMemberOfException},

    [System.Object]
    ${Comment},

    [switch]
    ${RetryDistribution},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddSharePointLocationException},

    [System.Object]
    ${AddTeamsLocationException},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${RemoveTeamsLocationException},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExchangeSenderMemberOf},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveTeamsLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Mode},

    [switch]
    ${AsJob})

}
function Set-DlpComplianceRule
{

param(
    [System.Object]
    ${DocumentNameMatchesPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExceptIfRecipientDomainIs},

    [System.Object]
    ${ExceptIfContentContainsSensitiveInformation},

    [System.Object]
    ${ExceptIfDocumentNameMatchesWords},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ExceptIfFromAddressContainsWords},

    [System.Object]
    ${ExceptIfProcessingLimitExceeded},

    [System.Object]
    ${AnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${NotifyPolicyTipCustomText},

    [System.Object]
    ${DocumentNameMatchesWords},

    [System.Object]
    ${NotifyAllowOverride},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${ProcessingLimitExceeded},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressContainsWords},

    [System.Object]
    ${ExceptIfSenderIPRanges},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FromAddressMatchesPatterns},

    [System.Object]
    ${DocumentIsPasswordProtected},

    [System.Object]
    ${GenerateAlert},

    [System.Object]
    ${ExceptIfSubjectMatchesPatterns},

    [System.Object]
    ${ContentExtensionMatchesWords},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${BlockAccessScope},

    [System.Object]
    ${AnyOfRecipientAddressContainsWords},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ExceptIfFromAddressMatchesPatterns},

    [System.Object]
    ${ExceptIfAccessScope},

    [System.Object]
    ${RecipientDomainIs},

    [System.Object]
    ${IncidentReportContent},

    [System.Object]
    ${Comment},

    [System.Object]
    ${NotifyPolicyTipCustomTextTranslations},

    [System.Object]
    ${GenerateIncidentReport},

    [System.Object]
    ${From},

    [System.Object]
    ${AccessScope},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RemoveHeader},

    [System.Object]
    ${ActivationDate},

    [System.Object]
    ${ExceptIfContentPropertyContainsWords},

    [System.Object]
    ${ExceptIfDocumentNameMatchesPatterns},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ExceptIfDocumentIsPasswordProtected},

    [System.Object]
    ${NotifyEmailCustomText},

    [System.Object]
    ${ExceptIfSubjectContainsWords},

    [System.Object]
    ${Priority},

    [System.Object]
    ${ExceptIfSentTo},

    [System.Object]
    ${SenderIPRanges},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [System.Object]
    ${FromMemberOf},

    [System.Object]
    ${BlockAccess},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${StopPolicyProcessing},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${ReportSeverityLevel},

    [System.Object]
    ${ExceptIfDocumentIsUnsupported},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RuleErrorAction},

    [System.Object]
    ${ContentPropertyContainsWords},

    [System.Object]
    ${SentTo},

    [System.Object]
    ${DocumentIsUnsupported},

    [System.Object]
    ${SubjectMatchesPatterns},

    [System.Object]
    ${SubjectContainsWords},

    [System.Object]
    ${ExpiryDate},

    [System.Object]
    ${ExceptIfContentExtensionMatchesWords},

    [System.Object]
    ${FromAddressContainsWords},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EncryptRMSTemplate},

    [System.Object]
    ${ExceptIfAnyOfRecipientAddressMatchesPatterns},

    [System.Object]
    ${SetHeader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-DlpEdmSchema
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpKeywordDictionary
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationType
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Locale},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Fingerprints},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationTypeConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${RegexGrammarLimit},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${FingerprintThreshold},

    [switch]
    ${AsJob})

}
function Set-DlpSensitiveInformationTypeRulePackage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${FileData},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyAuthority
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyCitation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CitationUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${CitationJurisdiction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyDepartment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertyReferenceId
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-FilePlanPropertySubCategory
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HoldCompliancePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AddSharePointLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddPublicFolderLocation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-HoldComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentDateFrom},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${HoldContent},

    [System.Object]
    ${Disabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [System.Object]
    ${ContentMatchQuery},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentDateTo},

    [System.Object]
    ${HoldDurationDisplayHint},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SegmentsAllowed},

    [System.Object]
    ${SegmentAllowedFilter},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${SegmentsBlocked},

    [System.Object]
    ${Comment},

    [switch]
    ${AsJob})

}
function Set-InsiderRiskPolicy
{

param(
    [System.Object]
    ${HistoricTimeSpan},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SensitivityLabels},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PostTerminationActivity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Comment},

    [System.Object]
    ${TeamsSites},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DlpPolicy},

    [System.Object]
    ${FutureTerminationWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${Indicators},

    [switch]
    ${RetryDistribution},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SharepointSites},

    [System.Object]
    ${TenantSetting},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DlpSensitiveTypes},

    [System.Object]
    ${InScopeTimeSpan},

    [System.Object]
    ${SchemaVersion},

    [System.Object]
    ${PastTerminationWindow},

    [switch]
    ${AsJob})

}
function Set-Label
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DisplayName},

    [System.Object]
    ${Settings},

    [System.Object]
    ${AdvancedSettings},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Setting},

    [System.Object]
    ${ParentId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Conditions},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Comment},

    [System.Object]
    ${MigrationId},

    [System.Object]
    ${Tooltip},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Disabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PreviousLabel},

    [System.Object]
    ${NextLabel},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${LabelActions},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LocaleSettings},

    [switch]
    ${AsJob})

}
function Set-LabelPolicy
{

param(
    [System.Object]
    ${Settings},

    [System.Object]
    ${AddExchangeLocation},

    [System.Object]
    ${PreviousLabelPolicy},

    [System.Object]
    ${Setting},

    [System.Object]
    ${AddExchangeLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveExchangeLocationException},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AdvancedSettings},

    [System.Object]
    ${RemoveModernGroupLocation},

    [switch]
    ${Force},

    [System.Object]
    ${AddLabels},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveModernGroupLocationException},

    [System.Object]
    ${AddModernGroupLocationException},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${AddModernGroupLocation},

    [System.Object]
    ${AddSkypeLocation},

    [System.Object]
    ${AddPublicFolderLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${MigrationId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AddSharePointLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RemoveSkypeLocationException},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${NextLabelPolicy},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveSkypeLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddSkypeLocationException},

    [System.Object]
    ${RemoveLabels},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function Set-OrganizationSegment
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${UserGroupFilter},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-PolicyConfig
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ProcessingLimitExceededSeverity},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ComplianceUrl},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EnableLabelCoauth},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${RetentionForwardCrawl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${OnPremisesWorkload},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EndpointDlpGlobalSettingsPsws},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DocumentIsUnsupportedSeverity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SenderAddressLocation},

    [System.Object]
    ${RuleErrorAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-ProtectionAlert
{

param(
    [System.Object]
    ${NotificationEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotifyUserThrottleWindow},

    [System.Object]
    ${Threshold},

    [System.Object]
    ${Description},

    [System.Object]
    ${Operation},

    [System.Object]
    ${NotifyUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AlertBy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AggregationType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Severity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${VolumeThreshold},

    [System.Object]
    ${TimeWindow},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Category},

    [System.Object]
    ${AlertFor},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Disabled},

    [System.Object]
    ${NotifyUserSuppressionExpiryDate},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Filter},

    [System.Object]
    ${NotifyUserOnFilterMatch},

    [System.Object]
    ${NotifyUserThrottleThreshold},

    [System.Object]
    ${NotificationCulture},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-RetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AddExchangeLocation},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AddExchangeLocationException},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [System.Object]
    ${RemoveTeamsChatLocation},

    [System.Object]
    ${RemoveExchangeLocationException},

    [System.Object]
    ${Enabled},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${RemoveOneDriveLocationException},

    [System.Object]
    ${AddSharePointLocation},

    [System.Object]
    ${AddTeamsChatLocationException},

    [System.Object]
    ${AddSkypeLocation},

    [System.Object]
    ${RemoveModernGroupLocation},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RemovePublicFolderLocation},

    [System.Object]
    ${RemoveModernGroupLocationException},

    [System.Object]
    ${AddModernGroupLocationException},

    [System.Object]
    ${AddTeamsChatLocation},

    [System.Object]
    ${RemoveSharePointLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddOneDriveLocationException},

    [System.Object]
    ${AddModernGroupLocation},

    [System.Object]
    ${AddTeamsChannelLocationException},

    [System.Object]
    ${AddPublicFolderLocation},

    [switch]
    ${RetryDistribution},

    [System.Object]
    ${RemoveTeamsChatLocationException},

    [System.Object]
    ${RemoveTeamsChannelLocationException},

    [System.Object]
    ${RemoveTeamsChannelLocation},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AddSharePointLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddTeamsChannelLocation},

    [System.Object]
    ${RemoveSkypeLocationException},

    [System.Object]
    ${RemoveSharePointLocationException},

    [System.Object]
    ${RemoveExchangeLocation},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${RemoveSkypeLocation},

    [System.Object]
    ${RemoveOneDriveLocation},

    [System.Object]
    ${AddOneDriveLocation},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AddSkypeLocationException},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function Set-RetentionComplianceRule
{

param(
    [System.Object]
    ${ContentDateFrom},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ExcludedItemClasses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchQuery},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ApplyComplianceTag},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ExpirationDateOption},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${ContentDateTo},

    [System.Object]
    ${RetentionDurationDisplayHint},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-RoleGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Name},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-SupervisoryReviewPolicyV2
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddReviewers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${Comment},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Reviewers},

    [System.Object]
    ${RetentionPeriodInDays},

    [System.Object]
    ${RemoveReviewers},

    [switch]
    ${AsJob})

}
function Set-SupervisoryReviewRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ContentSources},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ContentContainsSensitiveInformation},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Condition},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ContentMatchesDataModel},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CcsiDataModelOperator},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SamplingRate},

    [switch]
    ${AsJob})

}
function Set-TeamsRetentionCompliancePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RemoveTeamsChannelLocation},

    [System.Object]
    ${RemoveTeamsChatLocation},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${AddTeamsChatLocationException},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AddTeamsChatLocation},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AddTeamsChannelLocationException},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RemoveTeamsChannelLocationException},

    [System.Object]
    ${RemoveTeamsChatLocationException},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AddTeamsChannelLocation},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${RetryDistribution},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RestrictiveRetention},

    [switch]
    ${AsJob})

}
function Set-TeamsRetentionComplianceRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${RetentionComplianceAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Comment},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-UnifiedAuditLogRetentionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RetentionDuration},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Operations},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserIds},

    [System.Object]
    ${RecordTypes},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${RetryOnError},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Start-InformationBarrierPoliciesApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-ComplianceSearch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Stop-InformationBarrierPoliciesApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-DataClassification
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TestTextExtractionResults},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TextToClassify},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ClassificationNames},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-InformationBarrierPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-ComplianceCaseMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Case},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-eDiscoveryCaseAdmin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Users},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-RoleGroupMember
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Members},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Validate-RetentionRuleQuery
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${KqlQueryString},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
#endregion
#region SharePointOnline
function Add-SPOGeoAdministrator
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Group', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='ObjectId', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${ObjectId})

}
function Add-SPOHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [Object]
    ${HubSite})

}
function Add-SPOHubToHubAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [guid]
    ${Source},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [guid]
    ${Target})

}
function Add-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LibraryUrl},

    [string]
    ${ThumbnailUrl},

    [Microsoft.SharePoint.Administration.OrgAssetType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${OrgAssetType},

    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Add-SPOSiteCollectionAppCatalog
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [Object]
    ${Site})

}
function Add-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebTemplate},

    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind[]]
    ${SiteScripts},

    [string]
    ${Description},

    [string]
    ${PreviewImageUrl},

    [string]
    ${PreviewImageAltText},

    [switch]
    ${IsDefault},

    [guid]
    ${DesignPackageId})

}
function Add-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [guid]
    ${SiteDesignId},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl})

}
function Add-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Content},

    [string]
    ${Description})

}
function Add-SPOSiteScriptPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ContentPath},

    [string]
    ${Description})

}
function Add-SPOTenantCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Add-SPOTheme
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Name')]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePalettePipeBind]
    ${Palette},

    [Parameter(Mandatory=$true)]
    [bool]
    ${IsInverted},

    [switch]
    ${Overwrite})

}
function Add-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true, Position=3)]
    [string]
    ${Group})

}
function Approve-SPOTenantServicePrincipalPermissionGrant
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${Resource},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Scope})

}
function Approve-SPOTenantServicePrincipalPermissionRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${RequestId})

}
function Connect-SPOService
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.UrlCmdletPipeBind]
    ${Url},

    [Parameter(Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credential},

    [Parameter(Position=2)]
    [string]
    ${ClientTag},

    [Parameter(ParameterSetName='AuthenticationLocation', Position=3)]
    [Microsoft.Online.SharePoint.PowerShell.AADCrossTenantAuthenticationLocation]
    ${Region},

    [Parameter(ParameterSetName='AuthenticationUrl', Mandatory=$true, Position=3)]
    [string]
    ${AuthenticationUrl})

}
function ConvertTo-SPOMigrationEncryptedPackage
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetFilesPath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetPackagePath},

    [switch]
    ${NoLogFile})

}
function ConvertTo-SPOMigrationTargetedPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${OutputPackagePath},

    [Parameter(Mandatory=$true, Position=3)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='DocumentLibraryImport', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibraryPath},

    [Parameter(ParameterSetName='DocumentLibraryImport')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibrarySubFolderPath},

    [Parameter(ParameterSetName='ListImport', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetListPath},

    [ValidateNotNullOrEmpty()]
    [string]
    ${UserMappingFile},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${AzureADUserCredentials},

    [switch]
    ${NoAzureADLookup},

    [Microsoft.Online.SharePoint.Migration.TargetEnvironment]
    ${TargetEnvironment},

    [switch]
    ${ParallelImport},

    [long]
    ${PartitionSizeInBytes},

    [switch]
    ${NoLogFile})

}
function Deny-SPOTenantServicePrincipalPermissionRequest
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${RequestId})

}
function Disable-SPOTenantServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Disconnect-SPOService
{
    [CmdletBinding()]
param()

}
function Enable-SPOCommSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${SiteUrl},

    [guid]
    ${DesignPackageId})

}
function Enable-SPOTenantServicePrincipal
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Export-SPOQueryLogs
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [System.Nullable[datetime]]
    ${StartTime},

    [string]
    ${OutputFolder})

}
function Export-SPOUserInfo
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [string]
    ${OutputFolder})

}
function Export-SPOUserProfile
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [string]
    ${OutputFolder})

}
function Get-SPOAppErrors
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [guid]
    ${ProductId},

    [Parameter(Position=2)]
    [datetime]
    ${StartTimeInUtc},

    [Parameter(Position=3)]
    [datetime]
    ${EndTimeInUtc})

}
function Get-SPOAppInfo
{
    [CmdletBinding()]
param(
    [Parameter(Position=1)]
    [guid]
    ${ProductId},

    [Parameter(Position=2)]
    [string]
    ${Name})

}
function Get-SPOBrowserIdleSignOut
{
    [CmdletBinding()]
param()

}
function Get-SPOBuiltInDesignPackageVisibility
{
    [CmdletBinding()]
param(
    [System.Nullable`1[[Microsoft.SharePoint.Administration.DesignPackageType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DesignPackage})

}
function Get-SPOCrossGeoMovedUsers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet('MoveIn','MoveOut')]
    [string]
    ${Direction})

}
function Get-SPOCrossGeoMoveReport
{
    [CmdletBinding()]
param(
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [datetime]
    ${MoveStartTime},

    [datetime]
    ${MoveEndTime},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.JobType]
    ${MoveJobType},

    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOCrossGeoUsers
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${ValidDataLocation})

}
function Get-SPODataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPODeletedSite
{
    [CmdletBinding(DefaultParameterSetName='ParameterSetAllSites')]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [string]
    ${Limit},

    [Parameter(ParameterSetName='ParameterSetAllSites')]
    [switch]
    ${IncludePersonalSite},

    [Parameter(ParameterSetName='ParameterSetPersonalSitesOnly', Mandatory=$true)]
    [switch]
    ${IncludeOnlyPersonalSite})

}
function Get-SPOExternalUser
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(ParameterSetName='All', Position=1)]
    [int]
    ${Position},

    [Parameter(ParameterSetName='All', Position=2)]
    [int]
    ${PageSize},

    [Parameter(ParameterSetName='All', Position=3)]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='All', Position=4)]
    [Microsoft.Online.SharePoint.TenantManagement.SortOrder, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${SortOrder},

    [Parameter(ParameterSetName='All', Position=5)]
    [string]
    ${SiteUrl},

    [Parameter(ParameterSetName='All', Position=6)]
    [bool]
    ${ShowOnlyUsersWithAcceptingAccountNotMatchInvitedAccount})

}
function Get-SPOGeoAdministrator
{
    [CmdletBinding()]
param()

}
function Get-SPOGeoMoveCrossCompatibilityStatus
{
    [CmdletBinding()]
param()

}
function Get-SPOGeoStorageQuota
{
    [CmdletBinding()]
param(
    [switch]
    ${AllLocations})

}
function Get-SPOHideDefaultThemes
{
    [CmdletBinding()]
param()

}
function Get-SPOHomeSite
{
    [CmdletBinding()]
param()

}
function Get-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param()

}
function Get-SPOMigrationJobProgress
{
    [CmdletBinding()]
param(
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueUri},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Parameter(ParameterSetName='AzureLocationsImplicit', Mandatory=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [guid[]]
    ${JobIds},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [switch]
    ${DontWaitForEndJob},

    [switch]
    ${NoLogFile})

}
function Get-SPOMigrationJobStatus
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [ValidateNotNullOrEmpty()]
    [guid]
    ${JobId},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile})

}
function Get-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding()]
param()

}
function Get-SPOMultiGeoExperience
{
    [CmdletBinding()]
param()

}
function Get-SPOOrgAssetsLibrary
{
    [CmdletBinding()]
param()

}
function Get-SPOOrgNewsSite
{
    [CmdletBinding()]
param()

}
function Get-SPOPublicCdnOrigins
{
    [CmdletBinding()]
param()

}
function Get-SPOSite
{
    [CmdletBinding(DefaultParameterSetName='ParamSet1')]
param(
    [Parameter(ParameterSetName='ParamSet1', Position=0, ValueFromPipeline=$true)]
    [Parameter(ParameterSetName='ParamSet3', Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Filter},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Limit},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='ParamSet2')]
    [switch]
    ${Detailed},

    [Parameter(ParameterSetName='ParamSet3')]
    [switch]
    ${DisableSharingForNonOwnersStatus},

    [Parameter(ParameterSetName='ParamSet2')]
    [string]
    ${Template},

    [Parameter(ParameterSetName='ParamSet2')]
    [System.Nullable[bool]]
    ${IncludePersonalSite},

    [Parameter(ParameterSetName='ParamSet2')]
    [System.Nullable[bool]]
    ${GroupIdDefined})

}
function Get-SPOSiteCollectionAppCatalogs
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site})

}
function Get-SPOSiteContentMoveState
{
    [CmdletBinding(DefaultParameterSetName='MoveReport')]
param(
    [Parameter(ParameterSetName='SourceSiteUrl', Mandatory=$true)]
    [string]
    ${SourceSiteUrl},

    [Parameter(ParameterSetName='SiteMoveId', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${SiteMoveId},

    [Parameter(ParameterSetName='MoveReport')]
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveStartTime},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveEndTime},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOSiteDataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity})

}
function Get-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Get-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Get-SPOSiteDesignRun
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${WebUrl},

    [Parameter(Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${SiteDesignId})

}
function Get-SPOSiteDesignRunStatus
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignRun]
    ${Run})

}
function Get-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignTaskPipeBind]
    ${Identity},

    [Parameter(Position=1)]
    [string]
    ${WebUrl})

}
function Get-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Position=2)]
    [string]
    ${Group},

    [int]
    ${Limit})

}
function Get-SPOSiteRenameState
{
    [CmdletBinding(DefaultParameterSetName='SourceSiteUrl', SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='SourceSiteUrl', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParentId', Mandatory=$true)]
    [guid]
    ${ParentOperationId},

    [Parameter(ParameterSetName='RenameReport')]
    [Parameter(ParameterSetName='ParentId')]
    [System.Nullable[Microsoft.Online.SharePoint.PowerShell.RenameState]]
    ${State})

}
function Get-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity})

}
function Get-SPOSiteScriptFromList
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${ListUrl})

}
function Get-SPOSiteScriptFromWeb
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl},

    [string[]]
    ${IncludedLists},

    [switch]
    ${IncludeBranding},

    [switch]
    ${IncludeTheme},

    [switch]
    ${IncludeRegionalSettings},

    [switch]
    ${IncludeSiteExternalSharingCapability},

    [switch]
    ${IncludeLinksToExportedItems})

}
function Get-SPOSiteUserInvitations
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${EmailAddress})

}
function Get-SPOStorageEntity
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${Key})

}
function Get-SPOTenant
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantCdnEnabled
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantCdnOrigins
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantCdnPolicies
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Get-SPOTenantContentTypeReplicationParameters
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantLogEntry
{
    [CmdletBinding(DefaultParameterSetName='SiteSubscriptionId')]
param(
    [Parameter(ParameterSetName='CorrelationId', Mandatory=$true)]
    [guid]
    ${CorrelationId},

    [Parameter(ParameterSetName='Source', Mandatory=$true)]
    [int]
    ${Source},

    [Parameter(ParameterSetName='User', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${User},

    [Parameter(Position=0)]
    [datetime]
    ${StartTimeInUtc},

    [Parameter(Position=1)]
    [datetime]
    ${EndTimeInUtc},

    [Parameter(Position=2)]
    [ValidateRange(1, 5000)]
    [uint32]
    ${MaxRows})

}
function Get-SPOTenantLogLastAvailableTimeInUtc
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantServicePrincipalPermissionGrants
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantServicePrincipalPermissionRequests
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param()

}
function Get-SPOTenantTaxonomyReplicationParameters
{
    [CmdletBinding()]
param()

}
function Get-SPOTheme
{
    [CmdletBinding()]
param(
    [Parameter(Position=0, ValueFromPipeline=$true)]
    [string]
    ${Name})

}
function Get-SPOUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias})

}
function Get-SPOUnifiedGroupMoveState
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${GroupAlias})

}
function Get-SPOUser
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(ParameterSetName='ByGroup', Position=2)]
    [string]
    ${Group},

    [Parameter(ParameterSetName='ByLogin', Position=2)]
    [string]
    ${LoginName},

    [Parameter(ParameterSetName='ByGroup', Position=3)]
    [Parameter(ParameterSetName='All', Position=3)]
    [string]
    ${Limit})

}
function Get-SPOUserAndContentMoveState
{
    [CmdletBinding(DefaultParameterSetName='MoveReport')]
param(
    [Parameter(ParameterSetName='UserPrincipalName', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='OdbMoveId', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${OdbMoveId},

    [Parameter(ParameterSetName='MoveReport')]
    [ValidateRange(1, 1000)]
    [uint32]
    ${Limit},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveStartTime},

    [Parameter(ParameterSetName='MoveReport')]
    [datetime]
    ${MoveEndTime},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveState]
    ${MoveState},

    [Parameter(ParameterSetName='MoveReport')]
    [Microsoft.Online.SharePoint.PowerShell.MoveDirection]
    ${MoveDirection})

}
function Get-SPOUserOneDriveLocation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${UserPrincipalName})

}
function Get-SPOWebTemplate
{
    [CmdletBinding()]
param(
    [Parameter(Position=0)]
    [uint32]
    ${LocaleId},

    [int]
    ${CompatibilityLevel},

    [string]
    ${Name},

    [string]
    ${Title})

}
function Grant-SPOHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${Principals},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOHubSiteUserRightsClient]
    ${Rights})

}
function Grant-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Principals},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPrincipalRights]
    ${Rights})

}
function Invoke-SPOMigrationEncryptUploadSubmit
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceParameterSet', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [switch]
    ${NoLogFile},

    [switch]
    ${ParallelUpload})

}
function Invoke-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${WebUrl})

}
function Invoke-SPOSiteSwap
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${SourceUrl},

    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${TargetUrl},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${ArchiveUrl},

    [switch]
    ${DisableRedirection},

    [switch]
    ${NoWait})

}
function New-SPOMigrationEncryptionParameters
{
    [CmdletBinding()]
param()

}
function New-SPOMigrationPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${OutputPackagePath},

    [Parameter(Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(Position=3)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibraryPath},

    [Parameter(Position=4)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetDocumentLibrarySubFolderPath},

    [switch]
    ${IncludeFileSharePermissions},

    [switch]
    ${ReplaceInvalidCharacters},

    [switch]
    ${IgnoreHidden},

    [switch]
    ${NoLogFile},

    [switch]
    ${NoAzureADLookup})

}
function New-SPOPublicCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Url})

}
function New-SPOSdnProvider
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Identity},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${License})

}
function New-SPOSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.PowerShell.UrlCmdletPipeBind]
    ${Url},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Owner},

    [Parameter(Mandatory=$true)]
    [long]
    ${StorageQuota},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Template},

    [uint32]
    ${LocaleId},

    [int]
    ${CompatibilityLevel},

    [double]
    ${ResourceQuota},

    [int]
    ${TimeZoneId},

    [switch]
    ${NoWait})

}
function New-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Group},

    [Parameter(Mandatory=$true, Position=4)]
    [string[]]
    ${PermissionLevels})

}
function Register-SPODataEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${PrimaryKeyVersion},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${SecondaryKeyVersion})

}
function Register-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [AllowEmptyCollection()]
    [AllowNull()]
    [string[]]
    ${Principals})

}
function Remove-SPODeletedSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Remove-SPOExternalUser
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='All', Mandatory=$true, Position=1)]
    [string[]]
    ${UniqueIDs})

}
function Remove-SPOGeoAdministrator
{
    [CmdletBinding(DefaultParameterSetName='User')]
param(
    [Parameter(ParameterSetName='Group', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='User', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${UserPrincipalName},

    [Parameter(ParameterSetName='ObjectId', Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${ObjectId})

}
function Remove-SPOHomeSite
{
    [CmdletBinding()]
param()

}
function Remove-SPOHubSiteAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Site})

}
function Remove-SPOHubToHubAssociation
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [guid]
    ${HubSiteId})

}
function Remove-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param()

}
function Remove-SPOMigrationJob
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [guid]
    ${JobId},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile})

}
function Remove-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Location})

}
function Remove-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [string]
    ${LibraryUrl},

    [guid]
    ${ListId})

}
function Remove-SPOOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OrgNewsSiteUrl})

}
function Remove-SPOPublicCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [string]
    ${Identity})

}
function Remove-SPOSdnProvider
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param()

}
function Remove-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Remove-SPOSiteCollectionAppCatalog
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site})

}
function Remove-SPOSiteCollectionAppCatalogById
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [guid]
    ${SiteId})

}
function Remove-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity})

}
function Remove-SPOSiteDesignTask
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignTaskPipeBind]
    ${Identity})

}
function Remove-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Identity})

}
function Remove-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity})

}
function Remove-SPOSiteUserInvitations
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${EmailAddress},

    [Parameter(Position=3)]
    [switch]
    ${CountOnly})

}
function Remove-SPOStorageEntity
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [string]
    ${Key})

}
function Remove-SPOTenantCdnOrigin
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OriginUrl},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Remove-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param()

}
function Remove-SPOTheme
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Name')]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Identity})

}
function Remove-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(ParameterSetName='ByLogin', Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(Position=3)]
    [string]
    ${Group})

}
function Remove-SPOUserInfo
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [string]
    ${RedactName})

}
function Remove-SPOUserProfile
{
    [CmdletBinding(DefaultParameterSetName='All')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LoginName},

    [string]
    ${UserId})

}
function Repair-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [guid]
    ${RuleId},

    [switch]
    ${RunAlways})

}
function Request-SPOPersonalSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [string[]]
    ${UserEmails},

    [switch]
    ${NoWait})

}
function Request-SPOUpgradeEvaluationSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${NoUpgrade},

    [switch]
    ${NoEmail})

}
function Restore-SPODataEncryptionPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${PrimaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${PrimaryKeyVersion},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${SecondaryKeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${SecondaryKeyVersion})

}
function Restore-SPODeletedSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [switch]
    ${NoWait})

}
function Revoke-SPOHubSiteRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string[]]
    ${Principals})

}
function Revoke-SPOSiteDesignRights
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Principals})

}
function Revoke-SPOTenantServicePrincipalPermission
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${ObjectId})

}
function Revoke-SPOUserSession
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${User})

}
function Set-SPOBrowserIdleSignOut
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${Enabled},

    [timespan]
    ${WarnAfter},

    [timespan]
    ${SignOutAfter})

}
function Set-SPOBuiltInDesignPackageVisibility
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [bool]
    ${IsVisible},

    [Parameter(Mandatory=$true)]
    [Microsoft.SharePoint.Administration.DesignPackageType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${DesignPackage})

}
function Set-SPOGeoStorageQuota
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${GeoLocation},

    [Parameter(Mandatory=$true)]
    [long]
    ${StorageQuotaMB})

}
function Set-SPOHideDefaultThemes
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [bool]
    ${HideDefaultThemes})

}
function Set-SPOHomeSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${HomeSiteUrl})

}
function Set-SPOHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [string]
    ${Title},

    [string]
    ${LogoUrl},

    [string]
    ${Description},

    [System.Nullable[guid]]
    ${SiteDesignId},

    [System.Nullable[bool]]
    ${RequiresJoinApproval},

    [System.Nullable[bool]]
    ${HideNameInNavigation},

    [System.Nullable[bool]]
    ${EnablePermissionsSync})

}
function Set-SPOKnowledgeHubSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${KnowledgeHubSiteUrl})

}
function Set-SPOMigrationPackageAzureSource
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageLocation]
    ${MigrationSourceLocations},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourceFilesPath},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SourcePackagePath},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${FileContainerName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PackageContainerName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure')]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountName},

    [Parameter(ParameterSetName='ExplicitSourceExplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceExplicitAzure', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AccountKey},

    [Parameter(ParameterSetName='ExplicitSourceImplicitAzure', Mandatory=$true)]
    [Parameter(ParameterSetName='ImplicitSourceImplicitAzure', Mandatory=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters},

    [switch]
    ${NoUpload},

    [switch]
    ${NoSnapshotCreation},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.MigrationFileEncryptionInfo[]]
    ${EncryptionMetaInfo},

    [switch]
    ${NoLogFile},

    [switch]
    ${Overwrite},

    [switch]
    ${ParallelUpload})

}
function Set-SPOMultiGeoCompanyAllowedDataLocation
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Location},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${InitialDomain})

}
function Set-SPOMultiGeoExperience
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [switch]
    ${AllInstances})

}
function Set-SPOOrgAssetsLibrary
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${LibraryUrl},

    [string]
    ${ThumbnailUrl},

    [Microsoft.SharePoint.Administration.OrgAssetType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${OrgAssetType})

}
function Set-SPOOrgNewsSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [string]
    ${OrgNewsSiteUrl})

}
function Set-SPOSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(ParameterSetName='ParamSet1')]
    [long]
    ${StorageQuota},

    [Parameter(ParameterSetName='ParamSet1')]
    [long]
    ${StorageQuotaWarningLevel},

    [Parameter(ParameterSetName='ParamSet1')]
    [double]
    ${ResourceQuota},

    [Parameter(ParameterSetName='ParamSet1')]
    [double]
    ${ResourceQuotaWarningLevel},

    [Parameter(ParameterSetName='ParamSet1')]
    [uint32]
    ${LocaleId},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowSelfServiceUpgrade},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${NoWait},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${LockState},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${DenyAddAndCustomizePages},

    [Parameter(ParameterSetName='ParamSet2', Mandatory=$true)]
    [bool]
    ${EnablePWA},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingCapability},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${ShowPeoplePickerSuggestionsForGuestUsers},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${StorageQuotaReset},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.SandboxedCodeActivationCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SandboxedCodeActivationCapability},

    [Parameter(ParameterSetName='ParamSet3')]
    [switch]
    ${DisableSharingForNonOwners},

    [Parameter(ParameterSetName='ParamSet5')]
    [switch]
    ${RemoveLabel},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.CompanyWideSharingLinksPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableCompanyWideSharingLinks},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingDomainRestrictionMode},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${SharingAllowedDomainList},

    [Parameter(ParameterSetName='ParamSet1')]
    [string]
    ${SharingBlockedDomainList},

    [Parameter(ParameterSetName='ParamSet1')]
    [Parameter(ParameterSetName='AuthContextParameterSet')]
    [Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${ConditionalAccessPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowDownloadingNonWebViewableFiles},

    [Parameter(ParameterSetName='ParamSet1')]
    [Microsoft.Online.SharePoint.TenantManagement.SPOLimitedAccessFileType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${LimitedAccessFileType},

    [Parameter(ParameterSetName='ParamSet1')]
    [bool]
    ${AllowEditing},

    [Parameter(ParameterSetName='ParamSet1')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SensitivityLabel},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.AppViewsPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableAppViews},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.FlowsPolicy, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DisableFlows},

    [Parameter(ParameterSetName='AuthContextParameterSet')]
    [string]
    ${ProtectionLevelName},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantAdministration.RestrictedToRegion, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${RestrictedToGeo},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${CommentsOnSitePagesDisabled},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${UpdateUserTypeFromAzureAD},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${SocialBarOnSitePagesDisabled},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[guid]]
    ${HubSiteId},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultSharingLinkType},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultLinkPermission},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${DefaultLinkToExistingAccess},

    [Parameter(ParameterSetName='ParamSet1')]
    [switch]
    ${DefaultLinkToExistingAccessReset},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[int]]
    ${AnonymousLinkExpirationInDays},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${OverrideTenantAnonymousLinkExpirationPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[int]]
    ${ExternalUserExpirationInDays},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable[bool]]
    ${OverrideTenantExternalUserExpirationPolicy},

    [Parameter(ParameterSetName='ParamSet1')]
    [AllowEmptyCollection()]
    [guid[]]
    ${InformationSegment},

    [Parameter(ParameterSetName='ParamSet1')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.BlockDownloadLinksFileTypes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${BlockDownloadLinksFileType})

}
function Set-SPOSiteDesign
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteDesignPipeBind]
    ${Identity},

    [string]
    ${Title},

    [string]
    ${WebTemplate},

    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind[]]
    ${SiteScripts},

    [string]
    ${Description},

    [string]
    ${PreviewImageUrl},

    [string]
    ${PreviewImageAltText},

    [System.Nullable[bool]]
    ${IsDefault},

    [System.Nullable[int]]
    ${Version},

    [System.Nullable[guid]]
    ${DesignPackageId})

}
function Set-SPOSiteGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${Identity},

    [Parameter(Position=3)]
    [string]
    ${Name},

    [Parameter(Position=5)]
    [string[]]
    ${PermissionLevelsToAdd},

    [Parameter(Position=6)]
    [string[]]
    ${PermissionLevelsToRemove},

    [Parameter(Position=7)]
    [string]
    ${Owner})

}
function Set-SPOSiteOffice365Group
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${DisplayName},

    [Parameter(Mandatory=$true, Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Alias},

    [Parameter(Position=3)]
    [switch]
    ${IsPublic},

    [Parameter(Position=4)]
    [string]
    ${Description},

    [Parameter(Position=5)]
    [string]
    ${Classification},

    [Parameter(Position=6)]
    [switch]
    ${KeepOldHomepage})

}
function Set-SPOSiteScript
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [Parameter(ValueFromPipeline=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Content},

    [string]
    ${Description},

    [System.Nullable[int]]
    ${Version})

}
function Set-SPOSiteScriptPackage
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [ValidateNotNull()]
    [Microsoft.Online.SharePoint.PowerShell.SPOSiteScriptPipeBind]
    ${Identity},

    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [ValidateNotNullOrEmpty()]
    [string]
    ${ContentPath},

    [string]
    ${Description},

    [System.Nullable[int]]
    ${Version})

}
function Set-SPOStorageEntity
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true)]
    [string]
    ${Key},

    [Parameter(Mandatory=$true)]
    [string]
    ${Value},

    [Parameter(Mandatory=$true)]
    [string]
    ${Comments},

    [Parameter(Mandatory=$true)]
    [string]
    ${Description})

}
function Set-SPOTenant
{
    [CmdletBinding(DefaultParameterSetName='None')]
param(
    [int]
    ${MinCompatibilityLevel},

    [int]
    ${MaxCompatibilityLevel},

    [System.Nullable[bool]]
    ${ExternalServicesEnabled},

    [string]
    ${NoAccessRedirectUrl},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingCapabilities, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingCapability},

    [System.Nullable[bool]]
    ${DisplayStartASiteOption},

    [string]
    ${StartASiteFormUrl},

    [System.Nullable[bool]]
    ${ShowEveryoneClaim},

    [System.Nullable[bool]]
    ${ShowAllUsersClaim},

    [System.Nullable[bool]]
    ${ShowEveryoneExceptExternalUsersClaim},

    [System.Nullable[bool]]
    ${SearchResolveExactEmailOrUPN},

    [System.Nullable[bool]]
    ${OfficeClientADALDisabled},

    [System.Nullable[bool]]
    ${LegacyAuthProtocolsEnabled},

    [System.Nullable[bool]]
    ${RequireAcceptingAccountMatchInvitedAccount},

    [System.Nullable[bool]]
    ${ProvisionSharedWithEveryoneFolder},

    [string]
    ${SignInAccelerationDomain},

    [System.Nullable[bool]]
    ${EnableGuestSignInAcceleration},

    [System.Nullable[bool]]
    ${UsePersistentCookiesForExplorerView},

    [Parameter(ParameterSetName='ParameterSetContentTypeSyncSiteTemplatesList', Mandatory=$true)]
    [ValidateSet('MySites')]
    [string[]]
    ${ContentTypeSyncSiteTemplatesList},

    [Parameter(ParameterSetName='ParameterSetContentTypeSyncSiteTemplatesList')]
    [switch]
    ${ExcludeSiteTemplate},

    [System.Nullable[bool]]
    ${BccExternalSharingInvitations},

    [string]
    ${BccExternalSharingInvitationsList},

    [System.Nullable[bool]]
    ${UserVoiceForFeedbackEnabled},

    [System.Nullable[bool]]
    ${PublicCdnEnabled},

    [string]
    ${PublicCdnAllowedFileTypes},

    [System.Nullable[int]]
    ${RequireAnonymousLinksExpireInDays},

    [string]
    ${SharingAllowedDomainList},

    [string]
    ${SharingBlockedDomainList},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingDomainRestrictionModes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SharingDomainRestrictionMode},

    [System.Nullable[long]]
    ${OneDriveStorageQuota},

    [System.Nullable[bool]]
    ${OneDriveForGuestsEnabled},

    [System.Nullable[bool]]
    ${IPAddressEnforcement},

    [string]
    ${IPAddressAllowList},

    [System.Nullable[int]]
    ${IPAddressWACTokenLifetime},

    [System.Nullable[bool]]
    ${EnablePromotedFileHandlers},

    [System.Nullable[bool]]
    ${UseFindPeopleInPeoplePicker},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingLinkType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultSharingLinkType},

    [System.Nullable`1[[Microsoft.SharePoint.Client.SharingState, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ODBMembersCanShare},

    [System.Nullable`1[[Microsoft.SharePoint.Client.SharingState, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ODBAccessRequests},

    [System.Nullable[bool]]
    ${PreventExternalUsersFromResharing},

    [System.Nullable[bool]]
    ${ShowPeoplePickerSuggestionsForGuestUsers},

    [System.Nullable`1[[Microsoft.SharePoint.Client.AnonymousLinkType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${FileAnonymousLinkType},

    [System.Nullable`1[[Microsoft.SharePoint.Client.AnonymousLinkType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${FolderAnonymousLinkType},

    [System.Nullable[bool]]
    ${NotifyOwnersWhenItemsReshared},

    [System.Nullable[bool]]
    ${NotifyOwnersWhenInvitationsAccepted},

    [System.Nullable[bool]]
    ${NotificationsInOneDriveForBusinessEnabled},

    [System.Nullable[bool]]
    ${NotificationsInSharePointEnabled},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SpecialCharactersState, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${SpecialCharactersStateInFileFolderNames},

    [System.Nullable[bool]]
    ${OwnerAnonymousNotification},

    [System.Nullable[bool]]
    ${CommentsOnSitePagesDisabled},

    [System.Nullable[bool]]
    ${CommentsOnFilesDisabled},

    [System.Nullable[bool]]
    ${SocialBarOnSitePagesDisabled},

    [System.Nullable[int]]
    ${OrphanedPersonalSitesRetentionPeriod},

    [System.Nullable[bool]]
    ${PermissiveBrowserFileHandlingOverride},

    [System.Nullable[bool]]
    ${DisallowInfectedFileDownload},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SharingPermissionType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${DefaultLinkPermission},

    [string]
    ${CustomizedExternalSharingServiceUrl},

    [string]
    ${ConditionalAccessPolicyErrorHelpLink},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SPOConditionalAccessPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${ConditionalAccessPolicy},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable[bool]]
    ${AllowDownloadingNonWebViewableFiles},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SPOLimitedAccessFileType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${LimitedAccessFileType},

    [Parameter(ParameterSetName='ParamSetMultipleSites')]
    [System.Nullable[bool]]
    ${AllowEditing},

    [System.Nullable[bool]]
    ${ApplyAppEnforcedRestrictionsToAdHocRecipients},

    [System.Nullable[bool]]
    ${FilePickerExternalImageSearchEnabled},

    [System.Nullable[bool]]
    ${EmailAttestationRequired},

    [System.Nullable[int]]
    ${EmailAttestationReAuthDays},

    [System.Nullable[bool]]
    ${SyncPrivacyProfileProperties},

    [guid[]]
    ${DisabledWebPartIds},

    [System.Nullable[bool]]
    ${EnableMinimumVersionRequirement},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.SensitiveByDefaultState, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${MarkNewFilesSensitiveByDefault},

    [System.Nullable[bool]]
    ${EnableAIPIntegration},

    [System.Nullable[bool]]
    ${SyncAadB2BManagementPolicy},

    [System.Nullable[bool]]
    ${AllowCommentsTextOnEmailEnabled},

    [System.Nullable[bool]]
    ${EnableAzureADB2BIntegration},

    [Parameter(ParameterSetName='ParamSetMultipleSites', Position=0, ValueFromPipeline=$true)]
    [Object[]]
    ${Sites},

    [System.Nullable[bool]]
    ${ExternalUserExpirationRequired},

    [System.Nullable[int]]
    ${ExternalUserExpireInDays},

    [System.Nullable`1[[Microsoft.Online.SharePoint.TenantManagement.BlockDownloadLinksFileTypes, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]
    ${BlockDownloadLinksFileType})

}
function Set-SPOTenantCdnEnabled
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [bool]
    ${Enable},

    [Microsoft.Online.SharePoint.PowerShell.SPOTenantCdnTypeClient]
    ${CdnType},

    [switch]
    ${NoDefaultOrigins})

}
function Set-SPOTenantCdnPolicy
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnPolicyType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${PolicyType},

    [Parameter(Mandatory=$true)]
    [string]
    ${PolicyValue},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.TenantAdministration.SPOTenantCdnType, Microsoft.Online.SharePoint.Client.Tenant, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${CdnType})

}
function Set-SPOTenantContentTypeReplicationParameters
{
    [CmdletBinding(DefaultParameterSetName='ReplicateSelectedContentTypes')]
param(
    [Parameter(ParameterSetName='ReplicateAllContentTypes', Mandatory=$true)]
    [switch]
    ${ReplicateAllContentTypes},

    [Parameter(ParameterSetName='ReplicateSelectedContentTypes', Mandatory=$true)]
    [AllowEmptyCollection()]
    [string[]]
    ${ReplicatedContentTypes})

}
function Set-SPOTenantSyncClientRestriction
{
    [CmdletBinding()]
param(
    [Parameter(ParameterSetName='Blocking')]
    [switch]
    ${Enable},

    [Parameter(ParameterSetName='Blocking')]
    [string]
    ${DomainGuids},

    [Parameter(ParameterSetName='Blocking')]
    [switch]
    ${BlockMacSync},

    [Parameter(ParameterSetName='FileExclusion')]
    [string]
    ${ExcludedFileExtensions},

    [Parameter(ParameterSetName='GrooveBlockOptions')]
    [ValidateSet('OptOut','HardOptIn','SoftOptIn')]
    [string]
    ${GrooveBlockOption},

    [Parameter(ParameterSetName='ReportProblemDialogFeature', Mandatory=$true)]
    [bool]
    ${DisableReportProblemDialog})

}
function Set-SPOTenantTaxonomyReplicationParameters
{
    [CmdletBinding(DefaultParameterSetName='ReplicateSelectedGroups')]
param(
    [Parameter(ParameterSetName='ReplicateAllGroups', Mandatory=$true)]
    [switch]
    ${ReplicateAllGroups},

    [Parameter(ParameterSetName='ReplicateSelectedGroups', Mandatory=$true)]
    [AllowEmptyCollection()]
    [string[]]
    ${ReplicatedGroups})

}
function Set-SPOUnifiedGroup
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${GroupAlias},

    [Parameter(Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PreferredDataLocation})

}
function Set-SPOUser
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Site},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${LoginName},

    [Parameter(ParameterSetName='ByLogin', Position=3)]
    [bool]
    ${IsSiteCollectionAdmin},

    [Parameter(ParameterSetName='ByLogin', Position=3)]
    [switch]
    ${UpdateUserTypeFromAzureAD})

}
function Set-SPOWebTheme
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('Identity','Name')]
    [Microsoft.Online.SharePoint.PowerShell.SpoThemePipeBind]
    ${Theme},

    [Parameter(Mandatory=$true, Position=1)]
    [Object]
    ${Web})

}
function Start-SPOSiteContentMove
{
    [CmdletBinding(DefaultParameterSetName='UrlAndDestinationDataLocation')]
param(
    [Parameter(ParameterSetName='UrlAndDestinationUrl', Mandatory=$true, Position=0)]
    [Parameter(ParameterSetName='UrlAndDestinationDataLocation', Mandatory=$true, Position=0)]
    [string]
    ${SourceSiteUrl},

    [Parameter(ParameterSetName='UrlAndDestinationDataLocation', Mandatory=$true, Position=1)]
    [string]
    ${DestinationDataLocation},

    [Parameter(ParameterSetName='UrlAndDestinationUrl', Mandatory=$true, Position=1)]
    [string]
    ${DestinationUrl},

    [Parameter(Position=2)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=4)]
    [string]
    ${Reserved},

    [Parameter(Position=5)]
    [switch]
    ${ValidationOnly},

    [Parameter(Position=6)]
    [switch]
    ${Force},

    [Parameter(Position=7)]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(Position=8)]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(Position=9)]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(Position=10)]
    [switch]
    ${SuppressBcsCheck})

}
function Start-SPOSiteRename
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(ParameterSetName='StartNewSiteRename', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [Object]
    ${Identity},

    [Parameter(ParameterSetName='StartNewSiteRename', Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${NewSiteUrl},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${NewSiteTitle},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${SuppressBcsCheck},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [switch]
    ${ValidationOnly},

    [Parameter(ParameterSetName='StartNewSiteRename')]
    [string]
    ${Reserved})

}
function Start-SPOUnifiedGroupMove
{
    [CmdletBinding(DefaultParameterSetName='GroupAliasAndDestinationDataLocation')]
param(
    [Parameter(ParameterSetName='GroupAliasAndDestinationDataLocation', Mandatory=$true, Position=0)]
    [string]
    ${GroupAlias},

    [Parameter(ParameterSetName='GroupAliasAndDestinationDataLocation', Mandatory=$true, Position=1)]
    [string]
    ${DestinationDataLocation},

    [Parameter(Position=2)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=4)]
    [string]
    ${Reserved},

    [Parameter(Position=5)]
    [switch]
    ${ValidationOnly},

    [Parameter(Position=6)]
    [switch]
    ${Force},

    [Parameter(Position=7)]
    [switch]
    ${SuppressMarketplaceAppCheck},

    [Parameter(Position=8)]
    [switch]
    ${SuppressWorkflow2013Check},

    [Parameter(Position=9)]
    [switch]
    ${SuppressAllWarnings},

    [Parameter(Position=10)]
    [switch]
    ${SuppressBcsCheck})

}
function Start-SPOUserAndContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${UserPrincipalName},

    [Parameter(Mandatory=$true, Position=2)]
    [string]
    ${DestinationDataLocation},

    [Parameter(Position=3)]
    [datetime]
    ${PreferredMoveBeginDate},

    [Parameter(Position=4)]
    [datetime]
    ${PreferredMoveEndDate},

    [Parameter(Position=5)]
    [string]
    ${Notify},

    [Parameter(Position=6)]
    [string]
    ${Reserved},

    [Parameter(Position=7)]
    [switch]
    ${ValidationOnly})

}
function Stop-SPOSiteContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [string]
    ${SourceSiteUrl})

}
function Stop-SPOUserAndContentMove
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${UserPrincipalName})

}
function Submit-SPOMigrationJob
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${TargetWebUrl},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true, Position=1)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${FileContainerUri},

    [Parameter(ParameterSetName='AzureLocationsInline', Mandatory=$true, Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${PackageContainerUri},

    [Parameter(ParameterSetName='AzureLocationsInline')]
    [ValidateNotNullOrEmpty()]
    [string]
    ${AzureQueueUri},

    [Parameter(ParameterSetName='AzureLocationsPipebind', Mandatory=$true, Position=1, ValueFromPipeline=$true)]
    [Microsoft.Online.SharePoint.Migration.MigrationPackageAzureLocations]
    ${MigrationPackageAzureLocations},

    [Parameter(Mandatory=$true)]
    [Microsoft.Online.SharePoint.PowerShell.CredentialCmdletPipeBind]
    ${Credentials},

    [switch]
    ${NoLogFile},

    [ValidateNotNullOrEmpty()]
    [Microsoft.Online.SharePoint.Migration.EncryptionParameters]
    ${EncryptionParameters})

}
function Test-SPOSite
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [guid]
    ${RuleId},

    [switch]
    ${RunAlways})

}
function Unregister-SPOHubSite
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Alias('HubSite')]
    [Object]
    ${Identity},

    [switch]
    ${Force})

}
function Update-SPODataEncryptionPolicy
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [Parameter(Mandatory=$true)]
    [string]
    ${KeyVaultName},

    [Parameter(Mandatory=$true)]
    [string]
    ${KeyName},

    [Parameter(Mandatory=$true)]
    [guid]
    ${KeyVersion},

    [Parameter(Mandatory=$true)]
    [Microsoft.SharePoint.Client.CustomerKeyVaultKeyType, Microsoft.SharePoint.Client, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c]
    ${KeyType})

}
function Update-UserType
{
    [CmdletBinding()]
param(
    [Parameter(Mandatory=$true, Position=1)]
    [string]
    ${LoginName})

}
function Upgrade-SPOSite
{
    [CmdletBinding(DefaultParameterSetName='SPSiteById', SupportsShouldProcess=$true, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]
    [Object]
    ${Identity},

    [switch]
    ${VersionUpgrade},

    [switch]
    ${QueueOnly},

    [switch]
    ${NoEmail})

}
#endregion
#region SkypeForBusiness
function Clear-CsOnlineTelephoneNumberReservation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ReservationId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function ConvertTo-JsonForPSWS
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${InputObject},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Depth},

    [switch]
    ${Compress},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendEmailToAddress},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${SendEmail},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Disable-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OriginatorSid},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SipAddressType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [System.Object]
    ${SipDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('HostingProvider')]
    [System.Object]
    ${HostingProviderProxyFqdn},

    [System.Object]
    ${SipAddress},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${RegistrarPool},

    [System.Object]
    ${ProxyPool},

    [System.Object]
    ${Identity},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Enable-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowPstnOnlyMeetings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [System.Object]
    ${SendEmailFromDisplayName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('Passcode')]
    [System.Object]
    ${ConferenceId},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${TenantDomain},

    [System.Object]
    ${TollFreeServiceNumber},

    [System.Object]
    ${SendEmailToAddress},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SendEmailFromAddress},

    [switch]
    ${SendEmail},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowTollFreeDialIn},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${ReplaceProvider},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function Enable-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Export-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Find-CsGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxResults},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MailEnabledOnly},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExactMatchOnly},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Find-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxResults},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${UnAssociatedOnly},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${ExactMatchOnly},

    [switch]
    ${AssociatedOnly},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAudioConferencingProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${NameFilter},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SortBy},

    [System.Object]
    ${First},

    [switch]
    ${ExcludeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Descending},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${IncludeStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Years},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Names},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IncludeResources},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantSupportedLanguage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantSupportedTimeZone
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsAutoAttendantTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsBroadcastMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${ExposeSDNConfigurationJsonBlob},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsBroadcastMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCallQueue
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${NameFilter},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [switch]
    ${ExcludeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Descending},

    [System.Object]
    ${Expand},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Sort},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCloudCallDataConnection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsCloudMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsEffectiveTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsGraphPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHostedVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHostingProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHuntGroupTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHybridMediationServer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Filter},

    [System.Object]
    ${SiteName},

    [switch]
    ${AsJob})

}
function Get-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsImFilterConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingMigrationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${StartTime},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MigrationType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${SummaryOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [System.Object]
    ${EndTime},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMeetingRoom
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ApplicableTo},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [System.Object]
    ${Include},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOAuthConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Skip},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineApplicationInstanceAssociationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingBridge
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingLanguagesSupported
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialinConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${City},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialinConferencingTenantConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUserInfo
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SearchQuery},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Skip},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Filter},

    [switch]
    ${SortDescending},

    [System.Object]
    ${Select},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialInConferencingUserState
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LicenseState},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDialOutPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDirectoryTenant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineDirectoryTenantNumberCities
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineEnhancedEmergencyServiceDisclaimer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisCivicAddress
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NumberOfResultsToSkip},

    [switch]
    ${PopulateNumberOfVoiceUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PopulateNumberOfTelephoneNumbers},

    [System.Object]
    ${CivicAddressId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${City},

    [System.Object]
    ${ValidationStatus},

    [switch]
    ${Force},

    [System.Object]
    ${AssignmentStatus},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisLocation
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NumberOfResultsToSkip},

    [switch]
    ${PopulateNumberOfVoiceUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${PopulateNumberOfTelephoneNumbers},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${Location},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CountryOrRegion},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${City},

    [System.Object]
    ${ValidationStatus},

    [switch]
    ${Force},

    [System.Object]
    ${AssignmentStatus},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TargetStore},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BSSID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineNumberPortInOrder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortInOrderId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineNumberPortOutOrderPin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlinePSTNGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlinePstnUsage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineSipDomain
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Domain},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${DomainStatus},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumber
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('CityCode')]
    [System.Object]
    ${CapitalOrMajorCity},

    [switch]
    ${ExpandLocation},

    [System.Object]
    ${NumberType},

    [System.Object]
    ${InventoryType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Assigned},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${ActivationState},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TelephoneNumber},

    [System.Object]
    ${TelephoneNumberStartsWith},

    [System.Object]
    ${ResultSize},

    [System.Object]
    ${Country},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TelephoneNumberGreaterThan},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${IsNotAssigned},

    [System.Object]
    ${TelephoneNumberLessThan},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberAvailableCount
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryAreas
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryCities
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryCountries
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryRegions
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${InventoryType},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberInventoryTypes
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineTelephoneNumberReservationsInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('OnLyncServer')]
    [switch]
    ${OnModernServer},

    [switch]
    ${OnOfficeCommunicationServer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${OU},

    [System.Object]
    ${DomainController},

    [switch]
    ${UnassignedUser},

    [System.Object]
    ${ResultSize},

    [switch]
    ${UsePreferredDC},

    [switch]
    ${SkipUserPolicies},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoicemailUserSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOnlineVoiceUser
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${ExpandLocation},

    [System.Object]
    ${Identity},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchQuery},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${NumberAssigned},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${First},

    [System.Object]
    ${Skip},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${PSTNConnectivity},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${CivicAddressId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [switch]
    ${NumberNotAssigned},

    [switch]
    ${GetPendingUsers},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GetFromAAD},

    [System.Object]
    ${EnterpriseVoiceStatus},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${First},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${IncludeStatus},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Skip},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Names},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Years},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${IncludeResources},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantSupportedLanguage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantSupportedTimeZone
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsOrganizationalAutoAttendantTenantInformation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPresencePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPrivacyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsPushNotificationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsClientConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsComplianceRecordingApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEducationAssignmentsAppPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestCallingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsGuestMessagingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingBroadcastConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${ExposeSDNConfigurationJsonBlob},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradeConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsUpgradeStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsVerticalPackagePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTeamsVideoInteropServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantBlockedCallingNumbers
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantFederationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantHybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantLicensingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [switch]
    ${ExpandSubnets},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantPublicProvider
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Tenant},

    [switch]
    ${AsJob})

}
function Get-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsTenantUpdateTimeWindow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUCPhoneConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Credential},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LdapFilter},

    [System.Object]
    ${Filter},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ResultSize},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserLocationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserPstnSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserServicesPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsUserSession
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${StartTime},

    [System.Object]
    ${User},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EndTime},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Get-CsVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${LocalStore},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Filter},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsBroadcastMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsCloudMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsDialoutPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsGraphPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsHostedVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AdditionalParameters},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DomainController},

    [System.Object]
    ${PolicyType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsUpgradePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${MigrateMeetingsToTeams},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsVerticalPackagePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTeamsVideoInteropServicePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Grant-CsVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PolicyName},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Global},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Input},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsOnlineAudioFile
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${FileName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Content},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AudioFileExpiryInterval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Import-CsOrganizationalAutoAttendantHolidays
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Input},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-CsUcsRollback
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Invoke-CsUserPreferredDataLocationSync
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DataLocation},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendant
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Operator},

    [System.Object]
    ${DefaultCallFlow},

    [System.Object]
    ${Name},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${InclusionScope},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${EnableVoiceResponse},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${CallHandlingAssociations},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${VoiceId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GreetingsSettingAuthorizedUsers},

    [System.Object]
    ${TimeZoneId},

    [System.Object]
    ${CallFlows},

    [System.Object]
    ${LanguageId},

    [switch]
    ${Force},

    [System.Object]
    ${ExclusionScope},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallableEntity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [switch]
    ${EnableTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallFlow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Greetings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Menu},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantCallHandlingAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallFlowId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Disable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantDialScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GroupScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupIds},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantMenu
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Prompts},

    [switch]
    ${EnableDialByName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${DirectorySearchMethod},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${MenuOptions},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantMenuOption
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Prompt},

    [System.Object]
    ${VoiceResponses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DtmfResponse},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsAutoAttendantPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ActiveType},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TextToSpeechPrompt},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${AudioFilePrompt},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CallingIDSubstitute},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableUserOverride},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BlockIncomingPstnCallerID},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsCallQueue
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${PresenceBasedRouting},

    [System.Object]
    ${AgentAlertTime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${MusicOnHoldAudioFileId},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${Users},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TimeoutAction},

    [System.Object]
    ${ConferenceMode},

    [System.Object]
    ${OverflowSharedVoicemailTextToSpeechPrompt},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutSharedVoicemailTextToSpeechPrompt},

    [System.Object]
    ${EnableOverflowSharedVoicemailTranscription},

    [System.Object]
    ${WelcomeMusicAudioFileId},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OverflowSharedVoicemailAudioFilePrompt},

    [System.Object]
    ${EnableTimeoutSharedVoicemailTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Name},

    [System.Object]
    ${TimeoutSharedVoicemailAudioFilePrompt},

    [switch]
    ${AsJob})

}
function New-CsClientPolicy
{

param(
    [System.Object]
    ${DisableMeetingSubjectAndLocation},

    [System.Object]
    ${DisableEmailComparisonCheck},

    [System.Object]
    ${DisableSavingIM},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TabURL},

    [System.Object]
    ${EnableIMAutoArchiving},

    [System.Object]
    ${EnableMediaRedirection},

    [System.Object]
    ${EnableSQMData},

    [System.Object]
    ${MaximumDGsAllowedInContactList},

    [System.Object]
    ${EnableAppearOffline},

    [System.Object]
    ${SPSearchCenterInternalURL},

    [System.Object]
    ${RequireContentPin},

    [System.Object]
    ${DisableHandsetOnLockedMachine},

    [System.Object]
    ${P2PAppSharingEncryption},

    [System.Object]
    ${EnableHotdesking},

    [System.Object]
    ${EnableServerConversationHistory},

    [System.Object]
    ${RateMyCallAllowCustomUserFeedback},

    [System.Object]
    ${TelemetryTier},

    [System.Object]
    ${DisableInkIM},

    [System.Object]
    ${EnableSkypeUI},

    [System.Object]
    ${CustomLinkInErrorMessages},

    [System.Object]
    ${EnableNotificationForNewSubscribers},

    [System.Object]
    ${DisableContactCardOrganizationTab},

    [System.Object]
    ${EnableHighPerformanceConferencingAppSharing},

    [System.Object]
    ${DisableHtmlIm},

    [System.Object]
    ${EnableOnlineFeedback},

    [System.Object]
    ${IMLatencySpinnerDelay},

    [System.Object]
    ${IMLatencyErrorThreshold},

    [System.Object]
    ${HotdeskingTimeout},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DisablePresenceNote},

    [System.Object]
    ${ConferenceIMIdleTimeout},

    [System.Object]
    ${HelpEnvironment},

    [System.Object]
    ${BlockConversationFromFederatedContacts},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ShowSharepointPhotoEditLink},

    [System.Object]
    ${Description},

    [System.Object]
    ${DisablePoorNetworkWarnings},

    [System.Object]
    ${EnableUnencryptedFileTransfer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PlayAbbreviatedDialTone},

    [System.Object]
    ${EnableURL},

    [System.Object]
    ${DisablePoorDeviceWarnings},

    [System.Object]
    ${CustomizedHelpUrl},

    [System.Object]
    ${DisableFederatedPromptDisplayName},

    [System.Object]
    ${SearchPrefixFlags},

    [System.Object]
    ${MaximumNumberOfContacts},

    [System.Object]
    ${RateMyCallDisplayPercentage},

    [System.Object]
    ${DisableEmoticons},

    [System.Object]
    ${DisplayPhoto},

    [System.Object]
    ${DisableCalendarPresence},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ExcludedContactFolders},

    [System.Object]
    ${ShowRecentContacts},

    [switch]
    ${InMemory},

    [System.Object]
    ${EnableExchangeDelegateSync},

    [System.Object]
    ${EnableClientMusicOnHold},

    [System.Object]
    ${EnableMeetingEngagement},

    [System.Object]
    ${EnableTracing},

    [System.Object]
    ${IMWarning},

    [System.Object]
    ${SPSearchInternalURL},

    [System.Object]
    ${CalendarStatePublicationInterval},

    [System.Object]
    ${DisableOneNote12Integration},

    [System.Object]
    ${EnableHighPerformanceP2PAppSharing},

    [System.Object]
    ${EnableConversationWindowTabs},

    [System.Object]
    ${EnableViewBasedSubscriptionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MaxPhotoSizeKB},

    [System.Object]
    ${WebServicePollInterval},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOnlineFeedbackScreenshots},

    [System.Object]
    ${EnableExchangeContactSync},

    [System.Object]
    ${EnableFullScreenVideo},

    [System.Object]
    ${DisableOnlineContextualSearch},

    [System.Object]
    ${SPSearchCenterExternalURL},

    [System.Object]
    ${DisablePhonePresence},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SPSearchExternalURL},

    [System.Object]
    ${CustomStateUrl},

    [System.Object]
    ${SupportModernFilePicker},

    [System.Object]
    ${EnableEnterpriseCustomizedHelp},

    [System.Object]
    ${EnableEventLogging},

    [System.Object]
    ${DisableRTFIM},

    [System.Object]
    ${DGRefreshInterval},

    [System.Object]
    ${MAPIPollInterval},

    [System.Object]
    ${TracingLevel},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableCallLogAutoArchiving},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableExchangeContactsFolder},

    [System.Object]
    ${DisablePICPromptDisplayName},

    [System.Object]
    ${DisableFreeBusyInfo},

    [switch]
    ${Force},

    [System.Object]
    ${AutoDiscoveryRetryInterval},

    [System.Object]
    ${PolicyEntry},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AttendantSafeTransfer},

    [System.Object]
    ${MusicOnHoldAudioFile},

    [System.Object]
    ${ShowManagePrivacyRelationships},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisableFeedsTab},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AddressBookAvailability},

    [System.Object]
    ${EnableVOIPCallDefault},

    [System.Object]
    ${EnableClientAutoPopulateWithTeam},

    [System.Object]
    ${PublicationBatchDelay},

    [switch]
    ${AsJob})

}
function New-CsCloudCallDataConnection
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsConferencingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VideoBitRateKb},

    [System.Object]
    ${AllowExternalUserControl},

    [System.Object]
    ${Description},

    [System.Object]
    ${EnableReliableConferenceDeletion},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowParticipantControl},

    [switch]
    ${InMemory},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ApplicationSharingMode},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DisablePowerPointAnnotations},

    [switch]
    ${Force},

    [System.Object]
    ${EnableDialInConferencing},

    [System.Object]
    ${EnableAppDesktopSharing},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowLargeMeetings},

    [System.Object]
    ${AllowExternalUsersToSaveContent},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxMeetingSize},

    [System.Object]
    ${EnableOnlineMeetingPromptForLyncResources},

    [System.Object]
    ${AllowConferenceRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowAnonymousParticipantsInMeetings},

    [System.Object]
    ${TotalReceiveVideoBitRateKb},

    [System.Object]
    ${AllowNonEnterpriseVoiceUsersToDialOut},

    [System.Object]
    ${AllowAnnotations},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${AppSharingBitRateKb},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${AllowQandA},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileTransferBitRateKb},

    [System.Object]
    ${AllowMultiView},

    [System.Object]
    ${EnableP2PVideo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxVideoConferenceResolution},

    [System.Object]
    ${CloudRecordingServiceSupport},

    [System.Object]
    ${AllowExternalUsersToRecordMeeting},

    [System.Object]
    ${AllowIPVideo},

    [System.Object]
    ${EnableP2PRecording},

    [System.Object]
    ${EnableMultiViewJoin},

    [System.Object]
    ${AudioBitRateKb},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowFederatedParticipantJoinAsSameEnterprise},

    [System.Object]
    ${EnableDataCollaboration},

    [System.Object]
    ${AllowUserToScheduleMeetingsWithAppSharing},

    [System.Object]
    ${AllowOfficeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPolls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${AsJob})

}
function New-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsEdgeAllowAllKnownDomains
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsEdgeAllowList
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowedDomain},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsEdgeDomainPattern
{

param(
    [System.Object]
    ${Domain},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsExternalAccessPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnablePublicCloudAccess},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableXmppAccess},

    [System.Object]
    ${EnableFederationAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableOutsideAccess},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnablePublicCloudAudioVideoAccess},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowTitleVisibility},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowPresenceVisibility},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsHuntGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AgentAlertTime},

    [System.Object]
    ${MusicOnHoldFileContent},

    [System.Object]
    ${Domain},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${Ring},

    [System.Object]
    ${MusicOnHoldFileName},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientAudience},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HuntGroupServiceCallbackUri},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${TimeoutAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WelcomeMusicFileName},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${WelcomeMusicFileContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineUri},

    [switch]
    ${AsJob})

}
function New-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OsUpdateTimeWindow},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EdgeFQDN},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${BitsUpdateTimeWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableAutoUpdate},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsHybridTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsMobilityPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireWiFiForSharing},

    [System.Object]
    ${EncryptAppData},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowCustomerExperienceImprovementProgram},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${EnableMobility},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowDeviceContactsSync},

    [System.Object]
    ${VoiceSettings},

    [System.Object]
    ${AllowSaveIMHistory},

    [System.Object]
    ${RequireWIFIForIPVideo},

    [System.Object]
    ${AllowSaveCallLogs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableOutsideVoice},

    [System.Object]
    ${AllowSaveCredentials},

    [System.Object]
    ${EnableIPAudioVideo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowAutomaticPstnFallback},

    [System.Object]
    ${RequireIntune},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowExchangeConnectivity},

    [System.Object]
    ${EnablePushNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-CsNetworkMediaBypassConfiguration
{

param(
    [System.Object]
    ${BypassID},

    [System.Object]
    ${ExternalBypassMode},

    [System.Object]
    ${InternalBypassMode},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AlwaysBypass},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableDefaultBypassID},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${EnabledForAudioVideoConferences},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RunFullProvisioningFlow},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${CallbackUri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [System.Object]
    ${ApplicationId},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [System.Object]
    ${Region},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UserPrincipalName},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ConfigurationType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ConfigurationId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineAudioFile
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Content},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${FileName},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineBulkAssignmentInput
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineDateTimeRange
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [System.Object]
    ${ValidationStatus},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function New-CsOnlineLisLocation
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [Alias('State')]
    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Location},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${Longitude},

    [Alias('Name')]
    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function New-CsOnlineNumberPortInOrder
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${IsManual},

    [System.Object]
    ${LOABase64PayLoad},

    [System.Object]
    ${SubscriberStreetName},

    [System.Object]
    ${SubscriberCountry},

    [System.Object]
    ${InventoryType},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${LOAContentType},

    [System.Object]
    ${SubscriberCounty},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TelephoneNumberRanges},

    [System.Object]
    ${SubscriberAdditionalInfo},

    [System.Object]
    ${SubscriberArea},

    [System.Object]
    ${SubscriberBusinessName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${RequestedFocDateEnd},

    [System.Object]
    ${SubscriberBuildingNumberSuffix},

    [System.Object]
    ${LosingTelcoPin},

    [System.Object]
    ${SubscriberAddressLine3},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FriendlyName},

    [switch]
    ${IsPartialPort},

    [switch]
    ${Force},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequestedFocDate},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BillingTelephoneNumber},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SubscriberCity},

    [System.Object]
    ${SubscriberPreDirectional},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SubscriberZipCode},

    [System.Object]
    ${TelephoneNumbers},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SubscriberAddressLine2},

    [System.Object]
    ${SubscriberStreetSuffix},

    [System.Object]
    ${SubscriberCompanyName},

    [System.Object]
    ${RangeHolder},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubscriberAddressLine1},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SubscriberCityAlias},

    [System.Object]
    ${SubscriberLastName},

    [System.Object]
    ${LosingTelcoAccountId},

    [System.Object]
    ${SubscriberBuildingNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${SubscriberDescription},

    [System.Object]
    ${RequestedFocDateBegin},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${SubscriberPostDirectional},

    [System.Object]
    ${LOAAuthorizingPerson},

    [System.Object]
    ${SubscriberFirstName},

    [switch]
    ${AsJob})

}
function New-CsOnlinePSTNGateway
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GenerateRingingWhileLocatingUser},

    [System.Object]
    ${Fqdn},

    [switch]
    ${InMemory},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${GatewaySiteId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FailoverTimeSeconds},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [System.Object]
    ${OutbundTeamsNumberTranslationRules},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PidfLoSupported},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BypassMode},

    [System.Object]
    ${FailoverResponseCodes},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendSipOptions},

    [System.Object]
    ${ProxySbc},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundPstnNumberTranslationRules},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SipSignalingPort},

    [System.Object]
    ${MediaRelayRoutingLocationOverride},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutboundPstnNumberTranslationRules},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypass},

    [System.Object]
    ${GatewaySiteLbrEnabled},

    [System.Object]
    ${ForwardCallHistory},

    [System.Object]
    ${MaxConcurrentSessions},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ForwardPai},

    [System.Object]
    ${InboundTeamsNumberTranslationRules},

    [switch]
    ${AsJob})

}
function New-CsOnlineSchedule
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FridayHours},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [switch]
    ${WeeklyRecurrentSchedule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${DateTimeRanges},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MondayHours},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TuesdayHours},

    [switch]
    ${FixedSchedule},

    [System.Object]
    ${WednesdayHours},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [switch]
    ${Complement},

    [System.Object]
    ${SundayHours},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${SaturdayHours},

    [System.Object]
    ${ThursdayHours},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsOnlineTimeRange
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${End},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Start},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ShareData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaximumRecordingLength},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableTranscription},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableEditingCallAnswerRulesSetting},

    [System.Object]
    ${EnableTranscriptionProfanityMasking},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${EnableTranscriptionTranslation},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OnlinePstnGatewayList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${NumberPattern},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RouteType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendant
{

param(
    [System.Object]
    ${TimeZoneId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExclusionScope},

    [System.Object]
    ${Schedules},

    [System.Object]
    ${Ring},

    [System.Object]
    ${LineUris},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${EnableVoiceResponse},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DefaultCallFlow},

    [System.Object]
    ${Operator},

    [System.Object]
    ${CallHandlingAssociations},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [System.Object]
    ${VoiceId},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${CallbackUri},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${CallFlows},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ClientAudience},

    [System.Object]
    ${InclusionScope},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Domain},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallableEntity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallFlow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Greetings},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Menu},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantCallHandlingAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallFlowId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Disable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Type},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ScheduleId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantDialScope
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${GroupScope},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${GroupIds},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantMenu
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Prompts},

    [switch]
    ${EnableDialByName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${MenuOptions},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantMenuOption
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CallTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${VoiceResponses},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DtmfResponse},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsOrganizationalAutoAttendantPrompt
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ActiveType},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TextToSpeechPrompt},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${AudioFilePrompt},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsAppPermissionPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${GlobalCatalogAppsType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PrivateCatalogAppsType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultCatalogAppsType},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GlobalCatalogApps},

    [System.Object]
    ${DefaultCatalogApps},

    [System.Object]
    ${PrivateCatalogApps},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AppPresetList},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PinnedAppBarApps},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowUserPinning},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowSideLoading},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsCallingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowWebPSTNCalling},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallGroups},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SafeTransferEnabled},

    [System.Object]
    ${BusyOnBusyEnabledType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowVoicemail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MusicOnHoldEnabledType},

    [System.Object]
    ${PreventTollBypass},

    [System.Object]
    ${AllowCallForwardingToUser},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowCallForwardingToPhone},

    [System.Object]
    ${AllowPrivateCalling},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowDelegation},

    [switch]
    ${AsJob})

}
function New-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallPark},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPrivateChannelCreation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowPrivateTeamDiscovery},

    [System.Object]
    ${AllowOrgWideTeamCreation},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingApplication
{

param(
    [System.Object]
    ${RequiredBeforeCallEstablishment},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequiredDuringCall},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConcurrentInvitationCount},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ComplianceRecordingPairedApplications},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequiredBeforeMeetingJoin},

    [System.Object]
    ${RequiredDuringMeeting},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingPairedApplication
{

param(
    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Id},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${WarnUserOnRemoval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ComplianceRecordingApplications},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationGroup},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationDialOutNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationMode},

    [switch]
    ${Force},

    [System.Object]
    ${ExternalLocationLookupMode},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [System.Object]
    ${EmergencyNumbers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowEnhancedEmergencyServices},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsEmergencyNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EmergencyDialString},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EmergencyDialMask},

    [System.Object]
    ${OnlinePSTNUsage},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserInitiatedMode},

    [System.Object]
    ${ReceiveSurveysMode},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HotDeskingIdleTimeoutInMinutes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowHotDesking},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SignInMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${SearchOnCommonAreaPhoneMode},

    [switch]
    ${AsJob})

}
function New-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${BroadcastRecordingMode},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BroadcastAttendeeVisibilityMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowBroadcastTranscription},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowBroadcastScheduling},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsMeetingPolicy
{

param(
    [System.Object]
    ${IPAudioMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IPVideoMode},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowMeetNow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AutoAdmittedUsers},

    [System.Object]
    ${AllowOutlookAddIn},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LiveCaptionsEnabledType},

    [System.Object]
    ${AllowPrivateMeetingScheduling},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowOrganizersToOverrideLobbySettings},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowExternalParticipantGiveRequestControl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MediaBitRateKb},

    [System.Object]
    ${AllowAnonymousUsersToStartMeeting},

    [System.Object]
    ${AllowPSTNUsersToBypassLobby},

    [System.Object]
    ${PreferredMeetingProviderForIslandsMode},

    [System.Object]
    ${AllowTranscription},

    [System.Object]
    ${AllowChannelMeetingScheduling},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${VideoFiltersMode},

    [System.Object]
    ${MeetingChatEnabledType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowPrivateMeetNow},

    [System.Object]
    ${ScreenSharingMode},

    [System.Object]
    ${AllowPowerPointSharing},

    [System.Object]
    ${AllowIPVideo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowParticipantGiveRequestControl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowCloudRecording},

    [System.Object]
    ${AllowWhiteboard},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function New-CsTeamsMessagingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOwnerDeleteMessage},

    [System.Object]
    ${Description},

    [System.Object]
    ${AllowUserChat},

    [System.Object]
    ${Identity},

    [switch]
    ${InMemory},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${ChannelsInChatListEnabledType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${AllowStickers},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowUrlPreviews},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowImmersiveReader},

    [System.Object]
    ${AllowUserTranslation},

    [System.Object]
    ${AllowUserEditMessage},

    [System.Object]
    ${AudioMessageEnabledType},

    [System.Object]
    ${AllowRemoveUser},

    [System.Object]
    ${ReadReceiptsEnabledType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowMemes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowPriorityMessages},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${GiphyRatingType},

    [System.Object]
    ${AllowGiphy},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function New-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Order},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OptimizeDeviceDialing},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NormalizationRules},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SimpleName},

    [System.Object]
    ${ExternalAccessPrefix},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkRegion
{

param(
    [System.Object]
    ${BypassID},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CentralSite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${EmergencyCallRoutingPolicy},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OnlineVoiceRoutingPolicy},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableLocationBasedRouting},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SiteAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EmergencyCallingPolicy},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [System.Object]
    ${LocationPolicy},

    [switch]
    ${AsJob})

}
function New-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubnetID},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${IPAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsTenantUpdateTimeWindow
{

param(
    [System.Object]
    ${DayOfMonth},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DaysOfWeek},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Monthly},

    [System.Object]
    ${StartTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Weekly},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Duration},

    [System.Object]
    ${WeeksOfMonth},

    [switch]
    ${Daily},

    [switch]
    ${Force},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function New-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TenantKey},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AadApplicationIds},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InstructionUri},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowAppGuestJoinsAsAuthenticated},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function New-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Parent},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${IsInternalExtension},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Register-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [switch]
    ${InMemory},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MediationServerIPAddress},

    [System.Object]
    ${MediationServerFqdn},

    [switch]
    ${Force},

    [System.Object]
    ${SiteName},

    [switch]
    ${AsJob})

}
function Register-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Remove-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsCallQueue
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsClientPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsConferencingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsExternalAccessPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHuntGroup
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsHybridTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsMobilityPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineApplicationInstanceAssociation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Identities},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisCivicAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CivicAddressId},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisLocation
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TargetStore},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ChassisID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${BSSID},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NCSApiUrl},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineNumberPortInOrder
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortInOrderId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlinePSTNGateway
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Id},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineTelephoneNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsComplianceRecordingApplication
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMeetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsMessagingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsTenantUpdateTimeWindow
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ParticipantPasscode},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TollNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Remove-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Search-CsOnlineTelephoneNumberInventory
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${InventoryType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Quantity},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [System.Object]
    ${AreaCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Area},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Select-CsOnlineTelephoneNumberInventory
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ReservationId},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('City')]
    [System.Object]
    ${CapitalOrMajorCity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('Country')]
    [System.Object]
    ${CountryOrRegion},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('Region')]
    [System.Object]
    ${RegionalGroup},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TelephoneNumbers},

    [System.Object]
    ${Area},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsBroadcastMeetingConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableSdnProviderForBroadcastMeeting},

    [System.Object]
    ${SdnAzureSubscriptionId},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SdnProviderName},

    [switch]
    ${Force},

    [System.Object]
    ${SdnApiTemplateUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableAnonymousBroadcastMeeting},

    [System.Object]
    ${EnableTechPreviewFeatures},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SdnFallbackAttendeeThresholdCountForBroadcastMeeting},

    [System.Object]
    ${SdnApiToken},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableBroadcastMeeting},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${BroadcastMeetingSupportUrl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${EnableOpenBroadcastMeeting},

    [System.Object]
    ${EnableBroadcastMeetingRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnforceBroadcastMeetingRecording},

    [System.Object]
    ${SdnLicenseId},

    [switch]
    ${AsJob})

}
function Set-CsCallingLineIdentity
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceNumber},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${CallingIDSubstitute},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableUserOverride},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BlockIncomingPstnCallerID},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCallQueue
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${PresenceBasedRouting},

    [System.Object]
    ${AgentAlertTime},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${MusicOnHoldAudioFileId},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${Users},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${TimeoutAction},

    [System.Object]
    ${ConferenceMode},

    [System.Object]
    ${OverflowSharedVoicemailTextToSpeechPrompt},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TimeoutSharedVoicemailTextToSpeechPrompt},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOverflowSharedVoicemailTranscription},

    [System.Object]
    ${WelcomeMusicAudioFileId},

    [System.Object]
    ${LanguageId},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OverflowSharedVoicemailAudioFilePrompt},

    [System.Object]
    ${EnableTimeoutSharedVoicemailTranscription},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Name},

    [System.Object]
    ${LineUri},

    [System.Object]
    ${TimeoutSharedVoicemailAudioFilePrompt},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceConfigurationReplicationStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceDeploymentStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Action},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Error},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsCceApplianceStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [System.Object]
    ${ConfigurationSnapshot},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Error},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Status},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsClientPolicy
{

param(
    [System.Object]
    ${DisableMeetingSubjectAndLocation},

    [System.Object]
    ${DisableEmailComparisonCheck},

    [System.Object]
    ${DisableSavingIM},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TabURL},

    [System.Object]
    ${EnableIMAutoArchiving},

    [System.Object]
    ${EnableMediaRedirection},

    [System.Object]
    ${EnableSQMData},

    [System.Object]
    ${MaximumDGsAllowedInContactList},

    [System.Object]
    ${EnableAppearOffline},

    [System.Object]
    ${SPSearchCenterInternalURL},

    [System.Object]
    ${RequireContentPin},

    [System.Object]
    ${DisableHandsetOnLockedMachine},

    [System.Object]
    ${P2PAppSharingEncryption},

    [System.Object]
    ${EnableHotdesking},

    [System.Object]
    ${EnableServerConversationHistory},

    [System.Object]
    ${RateMyCallAllowCustomUserFeedback},

    [System.Object]
    ${TelemetryTier},

    [System.Object]
    ${DisableInkIM},

    [System.Object]
    ${EnableSkypeUI},

    [System.Object]
    ${CustomLinkInErrorMessages},

    [System.Object]
    ${EnableNotificationForNewSubscribers},

    [System.Object]
    ${DisableContactCardOrganizationTab},

    [System.Object]
    ${EnableHighPerformanceConferencingAppSharing},

    [System.Object]
    ${DisableHtmlIm},

    [System.Object]
    ${EnableOnlineFeedback},

    [System.Object]
    ${IMLatencySpinnerDelay},

    [System.Object]
    ${IMLatencyErrorThreshold},

    [System.Object]
    ${HotdeskingTimeout},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${DisablePresenceNote},

    [System.Object]
    ${ConferenceIMIdleTimeout},

    [System.Object]
    ${HelpEnvironment},

    [System.Object]
    ${BlockConversationFromFederatedContacts},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ShowSharepointPhotoEditLink},

    [System.Object]
    ${Description},

    [System.Object]
    ${DisablePoorNetworkWarnings},

    [System.Object]
    ${EnableUnencryptedFileTransfer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PlayAbbreviatedDialTone},

    [System.Object]
    ${EnableURL},

    [System.Object]
    ${DisablePoorDeviceWarnings},

    [System.Object]
    ${CustomizedHelpUrl},

    [System.Object]
    ${DisableFederatedPromptDisplayName},

    [System.Object]
    ${SearchPrefixFlags},

    [System.Object]
    ${MaximumNumberOfContacts},

    [System.Object]
    ${RateMyCallDisplayPercentage},

    [System.Object]
    ${DisableEmoticons},

    [System.Object]
    ${DisplayPhoto},

    [System.Object]
    ${DisableCalendarPresence},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ExcludedContactFolders},

    [System.Object]
    ${ShowRecentContacts},

    [System.Object]
    ${EnableExchangeDelegateSync},

    [System.Object]
    ${EnableClientMusicOnHold},

    [System.Object]
    ${EnableMeetingEngagement},

    [System.Object]
    ${EnableTracing},

    [System.Object]
    ${IMWarning},

    [System.Object]
    ${SPSearchInternalURL},

    [System.Object]
    ${CalendarStatePublicationInterval},

    [System.Object]
    ${DisableOneNote12Integration},

    [System.Object]
    ${EnableHighPerformanceP2PAppSharing},

    [System.Object]
    ${EnableConversationWindowTabs},

    [System.Object]
    ${EnableViewBasedSubscriptionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MaxPhotoSizeKB},

    [System.Object]
    ${WebServicePollInterval},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnableOnlineFeedbackScreenshots},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableExchangeContactSync},

    [System.Object]
    ${EnableFullScreenVideo},

    [System.Object]
    ${DisableOnlineContextualSearch},

    [System.Object]
    ${SPSearchCenterExternalURL},

    [System.Object]
    ${DisablePhonePresence},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SPSearchExternalURL},

    [System.Object]
    ${CustomStateUrl},

    [System.Object]
    ${SupportModernFilePicker},

    [System.Object]
    ${EnableEnterpriseCustomizedHelp},

    [System.Object]
    ${EnableEventLogging},

    [System.Object]
    ${DisableRTFIM},

    [System.Object]
    ${DGRefreshInterval},

    [System.Object]
    ${MAPIPollInterval},

    [System.Object]
    ${TracingLevel},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${EnableCallLogAutoArchiving},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableExchangeContactsFolder},

    [System.Object]
    ${DisablePICPromptDisplayName},

    [System.Object]
    ${DisableFreeBusyInfo},

    [switch]
    ${Force},

    [System.Object]
    ${AutoDiscoveryRetryInterval},

    [System.Object]
    ${PolicyEntry},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AttendantSafeTransfer},

    [System.Object]
    ${MusicOnHoldAudioFile},

    [System.Object]
    ${ShowManagePrivacyRelationships},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisableFeedsTab},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AddressBookAvailability},

    [System.Object]
    ${EnableVOIPCallDefault},

    [System.Object]
    ${EnableClientAutoPopulateWithTeam},

    [System.Object]
    ${PublicationBatchDelay},

    [switch]
    ${AsJob})

}
function Set-CsConferencingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${VideoBitRateKb},

    [System.Object]
    ${AllowExternalUserControl},

    [System.Object]
    ${Description},

    [System.Object]
    ${EnableReliableConferenceDeletion},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowParticipantControl},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ApplicationSharingMode},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DisablePowerPointAnnotations},

    [switch]
    ${Force},

    [System.Object]
    ${EnableDialInConferencing},

    [System.Object]
    ${EnableAppDesktopSharing},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowLargeMeetings},

    [System.Object]
    ${AllowExternalUsersToSaveContent},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${MaxMeetingSize},

    [System.Object]
    ${EnableOnlineMeetingPromptForLyncResources},

    [System.Object]
    ${AllowConferenceRecording},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowAnonymousParticipantsInMeetings},

    [System.Object]
    ${TotalReceiveVideoBitRateKb},

    [System.Object]
    ${AllowNonEnterpriseVoiceUsersToDialOut},

    [System.Object]
    ${AllowAnnotations},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${AppSharingBitRateKb},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${AllowQandA},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${FileTransferBitRateKb},

    [System.Object]
    ${AllowMultiView},

    [System.Object]
    ${EnableP2PVideo},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${MaxVideoConferenceResolution},

    [System.Object]
    ${CloudRecordingServiceSupport},

    [System.Object]
    ${AllowExternalUsersToRecordMeeting},

    [System.Object]
    ${AllowIPVideo},

    [System.Object]
    ${EnableP2PRecording},

    [System.Object]
    ${EnableMultiViewJoin},

    [System.Object]
    ${AudioBitRateKb},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowFederatedParticipantJoinAsSameEnterprise},

    [System.Object]
    ${EnableDataCollaboration},

    [System.Object]
    ${AllowUserToScheduleMeetingsWithAppSharing},

    [System.Object]
    ${AllowOfficeContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPolls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${AsJob})

}
function Set-CsDefaultCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsExternalAccessPolicy
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnablePublicCloudAccess},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableXmppAccess},

    [System.Object]
    ${EnableFederationAccess},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableOutsideAccess},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${EnablePublicCloudAudioVideoAccess},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsExternalUserCommunicationPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnableFileTransfer},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowTitleVisibility},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowPresenceVisibility},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnableP2PFileTransfer},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsGlobalCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsHuntGroup
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AgentAlertTime},

    [System.Object]
    ${MusicOnHoldFileContent},

    [System.Object]
    ${AllowOptOut},

    [System.Object]
    ${MusicOnHoldFileName},

    [System.Object]
    ${Name},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TimeoutActionTarget},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ClientAudience},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OverflowThreshold},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HuntGroupServiceCallbackUri},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${UseDefaultMusicOnHold},

    [System.Object]
    ${PrimaryUri},

    [System.Object]
    ${OverflowActionTarget},

    [System.Object]
    ${RoutingMethod},

    [System.Object]
    ${TimeoutAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${DistributionLists},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${TimeoutThreshold},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${WelcomeMusicFileName},

    [System.Object]
    ${OverflowAction},

    [System.Object]
    ${WelcomeMusicFileContent},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineUri},

    [switch]
    ${AsJob})

}
function Set-CsHybridMediationServer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AccessProxyExternalFqdn},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Fqdn},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${MaintenanceMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MediationServerGruu},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsHybridPSTNSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OsUpdateTimeWindow},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${EdgeFQDN},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${BitsUpdateTimeWindow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableAutoUpdate},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsIPPhonePolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PowerSavePostOfficeHoursTimeoutMS},

    [System.Object]
    ${Identity},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [System.Object]
    ${EnableBetterTogetherOverEthernet},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${KeyboardLockMaxPinRetry},

    [System.Object]
    ${LocalProvisioningServerAddress},

    [System.Object]
    ${PowerSaveDuringOfficeHoursTimeoutMS},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${LocalProvisioningServerType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PrioritizedCodecsList},

    [System.Object]
    ${UserDialTimeoutMS},

    [System.Object]
    ${BetterTogetherOverEthernetPairingMode},

    [System.Object]
    ${DateTimeFormat},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${LocalProvisioningServerPassword},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableDeviceUpdate},

    [System.Object]
    ${EnableOneTouchVoicemail},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LocalProvisioningServerUser},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${EnableExchangeCalendaring},

    [System.Object]
    ${EnablePowerSaveMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Set-CsMeetingConfiguration
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PstnCallersBypassLobby},

    [System.Object]
    ${Identity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${DesignateAsPresenter},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowConferenceRecording},

    [System.Object]
    ${UserUriFormatForStUser},

    [System.Object]
    ${AssignedConferenceTypeByDefault},

    [System.Object]
    ${LogoURL},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${RequireRoomSystemsAuthorization},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${CustomFooterText},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${HelpURL},

    [System.Object]
    ${AllowCloudRecordingService},

    [System.Object]
    ${AdmitAnonymousUsersByDefault},

    [System.Object]
    ${LegalURL},

    [System.Object]
    ${EnableAssignedConferenceType},

    [System.Object]
    ${EnableMeetingReport},

    [switch]
    ${AsJob})

}
function Set-CsMeetingRoom
{

param(
    [System.Object]
    ${RemoteCallControlTelephonyEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SipAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExchangeArchivingPolicy},

    [Alias('CsEnabled')]
    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineServerURI},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AcpInfo},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${PassThru},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AudioVideoDisabled},

    [System.Object]
    ${PrivateLine},

    [System.Object]
    ${HostedVoiceMail},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnterpriseVoiceEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LineURI},

    [switch]
    ${AsJob})

}
function Set-CsMobilityPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequireWiFiForSharing},

    [System.Object]
    ${EncryptAppData},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowCustomerExperienceImprovementProgram},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${EnableMobility},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowDeviceContactsSync},

    [System.Object]
    ${VoiceSettings},

    [System.Object]
    ${AllowSaveIMHistory},

    [System.Object]
    ${RequireWIFIForIPVideo},

    [System.Object]
    ${AllowSaveCallLogs},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${EnableOutsideVoice},

    [System.Object]
    ${AllowSaveCredentials},

    [System.Object]
    ${EnableIPAudioVideo},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowAutomaticPstnFallback},

    [System.Object]
    ${RequireIntune},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowExchangeConnectivity},

    [System.Object]
    ${EnablePushNotifications},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-CsNetworkConfiguration
{

param(
    [System.Object]
    ${NetworkRegions},

    [System.Object]
    ${InterNetworkRegionRoutes},

    [switch]
    ${Force},

    [System.Object]
    ${InterNetworkSitePolicies},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypassSettings},

    [System.Object]
    ${BWPolicyProfiles},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableBandwidthPolicyCheck},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${NetworkSites},

    [System.Object]
    ${Subnets},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${NetworkRegionLinks},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOAuthConfiguration
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${ExchangeAutodiscoverAllowedDomains},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${ServiceName},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AdditionalAudienceUrls},

    [System.Object]
    ${Realm},

    [System.Object]
    ${ClientAuthorizationOAuthServerIdentity},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ClientAdalAuthOverride},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ExchangeAutodiscoverUrl},

    [System.Object]
    ${AlternateAudienceUrl},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${RunFullProvisioningFlow},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CallbackUri},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${IsInternalRun},

    [System.Object]
    ${Tenant},

    [Alias('SipUri')]
    [System.Object]
    ${Uri},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${PhoneNumber},

    [System.Object]
    ${Ring},

    [System.Object]
    ${Audience},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${DisplayName},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OnpremPhoneNumber},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingBridge
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DefaultServiceNumber},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${SetDefault},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Instance},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${PrimaryLanguage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SecondaryLanguages},

    [switch]
    ${RestoreDefaultLanguages},

    [switch]
    ${Force},

    [System.Object]
    ${BotType},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingTenantSettings
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${IncludeTollFreeNumberInMeetingInvites},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EntryExitAnnouncementsType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${MigrateServiceNumbersOnCrossForestMove},

    [System.Object]
    ${AutomaticallySendEmailsToUsers},

    [System.Object]
    ${AllowedDialOutExternalDomains},

    [System.Object]
    ${AutomaticallyReplaceAcpProvider},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowFederatedUsersToDialOutToSelf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendEmailFromOverride},

    [System.Object]
    ${EnableNameRecording},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AutomaticallyMigrateUserMeetings},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${PinLength},

    [System.Object]
    ${UseUniqueConferenceIds},

    [System.Object]
    ${AllowFederatedUsersToDialOutToThirdParty},

    [System.Object]
    ${AllowPSTNOnlyMeetingsByDefault},

    [System.Object]
    ${EnableEntryExitNotifications},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableDialOutJoinConfirmation},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SendEmailFromDisplayName},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingUser
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TollFreeServiceNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${BridgeName},

    [switch]
    ${SendEmail},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ServiceNumber},

    [Alias('ResetPasscode')]
    [switch]
    ${ResetConferenceId},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SendEmailFromAddress},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${ResetLeaderPin},

    [Alias('Passcode')]
    [System.Object]
    ${ConferenceId},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${SendEmailToAddress},

    [System.Object]
    ${BridgeId},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TenantDomain},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowTollFreeDialIn},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${SendEmailFromDisplayName},

    [System.Object]
    ${AllowPSTNOnlyMeetings},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDialInConferencingUserDefaultNumber
{

param(
    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [System.Object]
    ${TenantDomain},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ToNumber},

    [System.Object]
    ${CapitalOrMajorCity},

    [System.Object]
    ${FromNumber},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${NumberType},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${RescheduleMeetings},

    [System.Object]
    ${AreaOrState},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [switch]
    ${AsJob})

}
function Set-CsOnlineDirectoryUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Ring},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineEnhancedEmergencyServiceDisclaimer
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Version},

    [switch]
    ${ForceAccept},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${CountryOrRegion},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [System.Object]
    ${ValidationStatus},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisLocation
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${Confidence},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${CountryOrRegion},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${CityAlias},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${StateOrProvince},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${Latitude},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Location},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${Longitude},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${Elin},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisPort
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${PortID},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Subnet},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${TargetStore},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisSwitch
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ChassisID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineLisWirelessAccessPoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${IsDebug},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${BSSID},

    [System.Object]
    ${NCSApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationId},

    [System.Object]
    ${TargetStore},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineNumberPortInOrder
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LOABase64PayLoad},

    [System.Object]
    ${SubscriberStreetName},

    [System.Object]
    ${SubscriberCountry},

    [System.Object]
    ${LOAContentType},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${SubscriberArea},

    [System.Object]
    ${SubscriberBusinessName},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${LosingTelcoPin},

    [System.Object]
    ${SubscriberAddressLine3},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${FriendlyName},

    [System.Object]
    ${IsPartialPort},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequestedFocDate},

    [System.Object]
    ${BillingTelephoneNumber},

    [System.Object]
    ${SubscriberCity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SubscriberAddressLine2},

    [System.Object]
    ${PortInOrderId},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${SubscriberAddressLine1},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SubscriberLastName},

    [System.Object]
    ${LosingTelcoAccountId},

    [System.Object]
    ${SubscriberBuildingNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EmailAddresses},

    [System.Object]
    ${LOAAuthorizingPerson},

    [System.Object]
    ${SubscriberFirstName},

    [System.Object]
    ${SubscriberZipCode},

    [switch]
    ${AsJob})

}
function Set-CsOnlineNumberPortOutOrderPin
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${PortOrderPin},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlinePSTNGateway
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GenerateRingingWhileLocatingUser},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${FailoverTimeSeconds},

    [switch]
    ${Force},

    [System.Object]
    ${OutbundTeamsNumberTranslationRules},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${GatewaySiteId},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PidfLoSupported},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${BypassMode},

    [System.Object]
    ${FailoverResponseCodes},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${SendSipOptions},

    [System.Object]
    ${ProxySbc},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${InboundPstnNumberTranslationRules},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${SipSignalingPort},

    [System.Object]
    ${MediaRelayRoutingLocationOverride},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${OutboundPstnNumberTranslationRules},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${MediaBypass},

    [System.Object]
    ${GatewaySiteLbrEnabled},

    [System.Object]
    ${ForwardCallHistory},

    [System.Object]
    ${MaxConcurrentSessions},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ForwardPai},

    [System.Object]
    ${InboundTeamsNumberTranslationRules},

    [switch]
    ${AsJob})

}
function Set-CsOnlinePstnUsage
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Usage},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineSchedule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoicemailPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${ShareData},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${MaximumRecordingLength},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EnableTranscription},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableEditingCallAnswerRulesSetting},

    [System.Object]
    ${EnableTranscriptionProfanityMasking},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${EnableTranscriptionTranslation},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoicemailUserSettings
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${PromptLanguage},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultGreetingPromptOverwrite},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${DefaultOofGreetingPromptOverwrite},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${OofGreetingFollowAutomaticRepliesEnabled},

    [System.Object]
    ${ShareData},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${CallAnswerRule},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${OofGreetingFollowCalendarEnabled},

    [System.Object]
    ${TransferTarget},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${OofGreetingEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${VoicemailEnabled},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceRoute
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${OnlinePstnGatewayList},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${NumberPattern},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceRoutingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${RouteType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnlinePstnUsages},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Description},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceUser
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${TelephoneNumber},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${LocationID},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOnlineVoiceUserBulk
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${NumberAssignmentDetails},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsPrivacyConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${EnablePrivacyMode},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PublishLocationDataDefault},

    [System.Object]
    ${AutoInitiateContacts},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DisplayPublishedPhotoDefault},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsPushNotificationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableApplePushNotificationService},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${EnableMicrosoftPushNotificationService},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsAppPermissionPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${GlobalCatalogAppsType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${PrivateCatalogAppsType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${DefaultCatalogAppsType},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${PrivateCatalogApps},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GlobalCatalogApps},

    [System.Object]
    ${DefaultCatalogApps},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsAppSetupPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AppPresetList},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${PinnedAppBarApps},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowUserPinning},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowSideLoading},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsCallingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowWebPSTNCalling},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${PreventTollBypass},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallGroups},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${SafeTransferEnabled},

    [System.Object]
    ${BusyOnBusyEnabledType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowVoicemail},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${MusicOnHoldEnabledType},

    [System.Object]
    ${AllowCallForwardingToUser},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowCallForwardingToPhone},

    [System.Object]
    ${AllowPrivateCalling},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowDelegation},

    [switch]
    ${AsJob})

}
function Set-CsTeamsCallParkPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowCallPark},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsChannelsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowPrivateChannelCreation},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowPrivateTeamDiscovery},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOrgWideTeamCreation},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsClientConfiguration
{

param(
    [System.Object]
    ${AllowEmailIntoChannel},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RestrictedSenderList},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowGoogleDrive},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowSkypeBusinessInterop},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${AllowScopedPeopleSearchandAccess},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowShareFile},

    [System.Object]
    ${AllowGuestUser},

    [System.Object]
    ${AllowOrganizationTab},

    [System.Object]
    ${ResourceAccountContentAccess},

    [System.Object]
    ${AllowEgnyte},

    [System.Object]
    ${AllowBox},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowResourceAccountSendMessage},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ContentPin},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowDropBox},

    [switch]
    ${Force},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function Set-CsTeamsComplianceRecordingApplication
{

param(
    [System.Object]
    ${RequiredBeforeCallEstablishment},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${RequiredDuringCall},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ConcurrentInvitationCount},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${ComplianceRecordingPairedApplications},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${RequiredBeforeMeetingJoin},

    [System.Object]
    ${RequiredDuringMeeting},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsComplianceRecordingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${WarnUserOnRemoval},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ComplianceRecordingApplications},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEducationAssignmentsAppPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TurnItInApiKey},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${TurnItInApiUrl},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${ParentDigestEnabledType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${TurnItInEnabledType},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MakeCodeEnabledType},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEmergencyCallingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${NotificationGroup},

    [System.Object]
    ${ExternalLocationLookupMode},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${NotificationDialOutNumber},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${NotificationMode},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsEmergencyCallRoutingPolicy
{

param(
    [System.Object]
    ${EmergencyNumbers},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowEnhancedEmergencyServices},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsFeedbackPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${ReceiveSurveysMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UserInitiatedMode},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestCallingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowPrivateCalling},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestMeetingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${ScreenSharingMode},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowMeetNow},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowIPVideo},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsGuestMessagingConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowMemes},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowImmersiveReader},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowGiphy},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${AllowStickers},

    [System.Object]
    ${AllowUserEditMessage},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${AllowUserChat},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${GiphyRatingType},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsIPPhonePolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${HotDeskingIdleTimeoutInMinutes},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${SearchOnCommonAreaPhoneMode},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${AllowHotDesking},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SignInMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingBroadcastConfiguration
{

param(
    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${SupportURL},

    [System.Object]
    ${AllowSdnProviderForBroadcastMeeting},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SdnProviderName},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SdnApiToken},

    [System.Object]
    ${SdnApiTemplateUrl},

    [System.Object]
    ${SdnLicenseId},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingBroadcastPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [System.Object]
    ${BroadcastRecordingMode},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BroadcastAttendeeVisibilityMode},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowBroadcastTranscription},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowBroadcastScheduling},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingConfiguration
{

param(
    [System.Object]
    ${ClientVideoPortRange},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${DisableAnonymousJoin},

    [System.Object]
    ${Identity},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${Instance},

    [System.Object]
    ${ClientAppSharingPortRange},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${EnableQoS},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${LogoURL},

    [System.Object]
    ${ClientAppSharingPort},

    [System.Object]
    ${ClientVideoPort},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${ClientAudioPortRange},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${ClientMediaPortRangeEnabled},

    [System.Object]
    ${ClientAudioPort},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${CustomFooterText},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${HelpURL},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LegalURL},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMeetingPolicy
{

param(
    [System.Object]
    ${IPAudioMode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IPVideoMode},

    [System.Object]
    ${Description},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowMeetNow},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowIPAudio},

    [System.Object]
    ${AllowSharedNotes},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AutoAdmittedUsers},

    [System.Object]
    ${AllowOutlookAddIn},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [System.Object]
    ${LiveCaptionsEnabledType},

    [System.Object]
    ${AllowPrivateMeetingScheduling},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowOrganizersToOverrideLobbySettings},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowExternalParticipantGiveRequestControl},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${MediaBitRateKb},

    [System.Object]
    ${AllowAnonymousUsersToStartMeeting},

    [System.Object]
    ${AllowPSTNUsersToBypassLobby},

    [System.Object]
    ${PreferredMeetingProviderForIslandsMode},

    [System.Object]
    ${AllowTranscription},

    [System.Object]
    ${AllowChannelMeetingScheduling},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowAnonymousUsersToDialOut},

    [System.Object]
    ${VideoFiltersMode},

    [System.Object]
    ${MeetingChatEnabledType},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowPrivateMeetNow},

    [System.Object]
    ${ScreenSharingMode},

    [System.Object]
    ${AllowPowerPointSharing},

    [System.Object]
    ${AllowIPVideo},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowParticipantGiveRequestControl},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AllowCloudRecording},

    [System.Object]
    ${AllowWhiteboard},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMessagingPolicy
{

param(
    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${AllowOwnerDeleteMessage},

    [System.Object]
    ${Description},

    [System.Object]
    ${AllowUserChat},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowGiphy},

    [System.Object]
    ${Instance},

    [System.Object]
    ${AllowUserDeleteMessage},

    [System.Object]
    ${ChannelsInChatListEnabledType},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${Force},

    [System.Object]
    ${AllowStickers},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${AllowUrlPreviews},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${AllowImmersiveReader},

    [System.Object]
    ${AllowUserTranslation},

    [System.Object]
    ${AllowUserEditMessage},

    [System.Object]
    ${AudioMessageEnabledType},

    [System.Object]
    ${AllowRemoveUser},

    [System.Object]
    ${ReadReceiptsEnabledType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AllowMemes},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${AllowPriorityMessages},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${GiphyRatingType},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${AsJob})

}
function Set-CsTeamsMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${EnableLegacyClientInterop},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsNotificationAndFeedsPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${SuggestedFeedsEnabledType},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${TrendingFeedsEnabledType},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsPinnedApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Order},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsTargetingPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${SuggestedPresetTags},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${CustomTagsMode},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${TeamOwnersEditWhoCanManageTagsMode},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${ManageTagsPermissionMode},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsTranslationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsUpgradeConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${SfBMeetingJoinUx},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${DownloadTeams},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTeamsUpgradeStatus
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${Details},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${State},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsTenantBlockedCallingNumbers
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${InboundExemptNumberPatterns},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${InboundBlockedNumberPatterns},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantBlockedNumberExceptionPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [switch]
    ${Force},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Enabled},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantCatalogApp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${OptimizeDeviceDialing},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NormalizationRules},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExternalAccessPrefix},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${SimpleName},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantFederationConfiguration
{

param(
    [System.Object]
    ${AllowedDomainsAsAList},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${SharedSipAddressSpace},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${BlockedDomains},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${TreatDiscoveredPartnersAsUnverified},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${AllowFederatedUsers},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${AllowedDomains},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [System.Object]
    ${AllowPublicUsers},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantHybridConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${HybridConfigServiceInternalUrl},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${UseOnPremDialPlan},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${HybridConfigServiceExternalUrl},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PeerDestination},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantMigrationConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${MeetingMigrationEnabled},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${Force},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Subnets},

    [System.Object]
    ${NetworkSites},

    [System.Object]
    ${NetworkRegions},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkRegion
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${CentralSite},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkSite
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${EmergencyCallRoutingPolicy},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${OnlineVoiceRoutingPolicy},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnableLocationBasedRouting},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${NetworkRegionID},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LocationPolicy},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EmergencyCallingPolicy},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantNetworkSubnet
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [System.Object]
    ${NetworkSiteID},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantPublicProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Provider},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsTenantTrustedIPAddress
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${MaskBits},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsTenantUpdateTimeWindow
{

param(
    [System.Object]
    ${DayOfMonth},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${DaysOfWeek},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Monthly},

    [System.Object]
    ${StartTime},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${Identity},

    [switch]
    ${Weekly},

    [System.Object]
    ${Tenant},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Duration},

    [System.Object]
    ${WeeksOfMonth},

    [switch]
    ${Daily},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsUCPhoneConfiguration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${VoiceDiffServTag},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Voice8021p},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${MinPhonePinLength},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${EnforcePhoneLock},

    [System.Object]
    ${PhoneLockTimeout},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${LoggingLevel},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SIPSecurityMode},

    [System.Object]
    ${CalendarPollInterval},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsUser
{

param(
    [System.Object]
    ${RemoteCallControlTelephonyEnabled},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SipAddress},

    [System.Object]
    ${Identity},

    [System.Object]
    ${ExchangeArchivingPolicy},

    [Alias('CsEnabled')]
    [System.Object]
    ${Enabled},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${LineServerURI},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${OnPremLineURI},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [System.Object]
    ${AcpInfo},

    [System.Object]
    ${DomainController},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [switch]
    ${PassThru},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [System.Object]
    ${AudioVideoDisabled},

    [System.Object]
    ${PrivateLine},

    [System.Object]
    ${HostedVoiceMail},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${EnterpriseVoiceEnabled},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${LineURI},

    [switch]
    ${AsJob})

}
function Set-CsUserAcp
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Name},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [switch]
    ${PassThru},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${TollFreeNumbers},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ParticipantPasscode},

    [System.Object]
    ${Identity},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Url},

    [System.Object]
    ${TollNumber},

    [System.Object]
    ${Domain},

    [System.Object]
    ${IsDefault},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsUserPstnSettings
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${AllowInternationalCalls},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${HybridPSTNSite},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Set-CsUserServicesPolicy
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${MigrationDelayInDays},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${EnableAwaySinceIndication},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${UcsAllowed},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsVideoInteropServiceProvider
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${TenantKey},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${AadApplicationIds},

    [System.Object]
    ${Identity},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${InstructionUri},

    [System.Object]
    ${AllowAppGuestJoinsAsAuthenticated},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Set-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${Description},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${Priority},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${Pattern},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Translation},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${IsInternalExtension},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Start-CsExMeetingMigration
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TargetMeetingType},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${CleanupSipDisabled},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${SourceMeetingType},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Switch-CsOnlineApplicationEndpoint
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ObjectId},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Sync-CsOnlineApplicationInstance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${CallbackUri},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${ObjectId},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsEffectiveTenantDialPlan
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${EffectiveTenantDialPlanName},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${DialedNumber},

    [System.Object]
    ${Identity},

    [switch]
    ${TenantScopeOnly},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsInboundBlockedNumberPattern
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${TenantId},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [System.Object]
    ${FQDN},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${PhoneNumber},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlineCarrierPortabilityIn
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${TelephoneNumbers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlineLisCivicAddress
{

param(
    [System.Object]
    ${PostalCode},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Description},

    [System.Object]
    ${CountryOrRegion},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('db')]
    [switch]
    ${Debug},

    [switch]
    ${Force},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [System.Object]
    ${PostDirectional},

    [System.Object]
    ${StreetSuffix},

    [System.Object]
    ${Tenant},

    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [System.Object]
    ${StreetName},

    [System.Object]
    ${City},

    [System.Object]
    ${CivicAddressId},

    [System.Object]
    ${CompanyTaxId},

    [System.Object]
    ${StateOrProvince},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${HouseNumberSuffix},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [System.Object]
    ${HouseNumber},

    [System.Object]
    ${CompanyName},

    [System.Object]
    ${PreDirectional},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${AsJob})

}
function Test-CsOnlinePortabilityIn
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${TelephoneNumberRanges},

    [System.Object]
    ${TelephoneNumbers},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Test-CsVoiceNormalizationRule
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [System.Object]
    ${DialedNumber},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [System.Object]
    ${NormalizationRule},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Unregister-CsHybridPSTNAppliance
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Unregister-CsOnlineDialInConferencingServiceNumber
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [System.Object]
    ${BridgeName},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [System.Object]
    ${TenantDomain},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [switch]
    ${RemoveDefaultServiceNumber},

    [System.Object]
    ${Tenant},

    [System.Object]
    ${BridgeId},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [System.Object]
    ${Identity},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [System.Object]
    ${Instance},

    [switch]
    ${AsJob})

}
function Update-CsAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Identity},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-CsOrganizationalAutoAttendant
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [System.Object]
    ${PrimaryUri},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [Alias('DC')]
    [System.Object]
    ${DomainController},

    [System.Object]
    ${ApplicationId},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
function Update-CsTenantMeetingUrl
{

param(
    [Alias('ea')]
    [System.Object]
    ${ErrorAction},

    [Alias('vb')]
    [switch]
    ${Verbose},

    [Alias('ov')]
    [System.Object]
    ${OutVariable},

    [Alias('wi')]
    [switch]
    ${WhatIf},

    [Alias('infa')]
    [System.Object]
    ${InformationAction},

    [Alias('wv')]
    [System.Object]
    ${WarningVariable},

    [Alias('db')]
    [switch]
    ${Debug},

    [Alias('pv')]
    [System.Object]
    ${PipelineVariable},

    [Alias('cf')]
    [switch]
    ${Confirm},

    [Alias('ob')]
    [System.Object]
    ${OutBuffer},

    [Alias('ev')]
    [System.Object]
    ${ErrorVariable},

    [System.Object]
    ${Tenant},

    [Alias('wa')]
    [System.Object]
    ${WarningAction},

    [switch]
    ${Force},

    [Alias('iv')]
    [System.Object]
    ${InformationVariable},

    [switch]
    ${AsJob})

}
#endregion
